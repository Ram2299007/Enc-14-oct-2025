package com.Appzia.enclosure.Adapter;

import android.Manifest;
import android.media.MediaScannerConnection;

import android.app.Activity;
import android.app.Dialog;
import android.app.DownloadManager;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.ContentProviderOperation;
import android.content.Context;
import android.content.Intent;
import android.content.OperationApplicationException;
import android.content.pm.PackageManager;
import android.content.res.ColorStateList;
import android.content.res.Configuration;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.graphics.Paint;

import android.graphics.RenderEffect;
import android.graphics.Shader;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.GradientDrawable;
import android.graphics.drawable.LayerDrawable;
import android.graphics.pdf.PdfRenderer;
import android.icu.text.SimpleDateFormat;
import android.media.MediaPlayer;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Environment;
import android.os.Handler;
import android.os.Looper;
import android.os.ParcelFileDescriptor;
import android.os.RemoteException;
import android.provider.ContactsContract;
import android.provider.MediaStore;
import android.content.ContentResolver;
import android.content.ContentValues;
import android.text.Editable;
import android.text.SpannableString;
import android.text.Spanned;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.RelativeSizeSpan;
import android.util.Log;
import android.util.TypedValue;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.AlphaAnimation;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.webkit.URLUtil;
import android.widget.AutoCompleteTextView;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.OptIn;
import androidx.annotation.RequiresApi;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.AppCompatButton;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatImageView;

import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.cardview.widget.CardView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.media3.common.util.UnstableApi;
import androidx.recyclerview.widget.DefaultItemAnimator;
import androidx.recyclerview.widget.DiffUtil;
import androidx.recyclerview.widget.ItemTouchHelper;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import java.util.Objects;
import java.io.OutputStream;
import java.io.InputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.File;

import com.Appzia.enclosure.Model.emojiModel;
import com.Appzia.enclosure.Model.forwardnameModel;
import com.Appzia.enclosure.Model.get_user_active_contact_list_Model;
import com.Appzia.enclosure.Model.linkPreviewModel;
import com.Appzia.enclosure.Model.messageModel;
import com.Appzia.enclosure.Model.messagemodel2;
import com.Appzia.enclosure.Utils.ChatadapterFiles.receiverViewHolder;
import com.Appzia.enclosure.Utils.ChatadapterFiles.senderViewHolder;
import com.Appzia.enclosure.Model.selectionBunchModel;
import com.Appzia.enclosure.R;
import com.Appzia.enclosure.Screens.MainActivityOld;
import com.Appzia.enclosure.Screens.chattingScreen;
import com.Appzia.enclosure.Utils.MultipleImageDialogHelper;
import com.Appzia.enclosure.Screens.show_document_screen;
import com.Appzia.enclosure.Screens.show_image_Screen;
import com.Appzia.enclosure.Screens.show_video_playerScreen;
import com.Appzia.enclosure.Utils.BlurHelper;
import com.Appzia.enclosure.Utils.BlurImageOptimizer;
import com.Appzia.enclosure.Utils.Bottomshit.MusicPlayerBottomSheet;
import com.Appzia.enclosure.Utils.BroadcastReiciver.AudioPlaybackService;
import com.Appzia.enclosure.Utils.BroadcastReiciver.UploadChatHelperForward;
import com.Appzia.enclosure.Utils.Constant;
import com.Appzia.enclosure.Utils.ChatadapterFiles.senderReceiverDownload;
import com.Appzia.enclosure.Utils.ChatadapterFiles.otherFunctions;

import com.Appzia.enclosure.Utils.ItemTouchHelperAdapter;
import com.Appzia.enclosure.Utils.OfflineDatabase.DatabaseHelper;

import com.Appzia.enclosure.Utils.WaveformView;
import com.Appzia.enclosure.Utils.Webservice;
import com.Appzia.enclosure.Utils.SwipeNavigationHelper;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.DataSource;
import com.bumptech.glide.load.DecodeFormat;
import com.bumptech.glide.load.engine.DiskCacheStrategy;
import com.bumptech.glide.signature.ObjectKey;
import com.bumptech.glide.request.RequestListener;
import com.bumptech.glide.request.RequestOptions;
import com.bumptech.glide.request.target.Target;
import com.bumptech.glide.load.engine.GlideException;
import androidx.annotation.Nullable;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.imageview.ShapeableImageView;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.progressindicator.LinearProgressIndicator;
import com.google.android.material.shape.CornerFamily;
import com.google.android.material.shape.ShapeAppearanceModel;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import com.google.firebase.database.ValueEventListener;


import org.apache.commons.logging.LogFactory;

import java.lang.ref.WeakReference;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import javax.crypto.SecretKey;

import de.hdodenhof.circleimageview.CircleImageView;
import eightbitlab.com.blurview.BlurView;
import io.github.ponnamkarthik.richlinkpreview.MetaData;
import io.github.ponnamkarthik.richlinkpreview.ResponseListener;
import io.github.ponnamkarthik.richlinkpreview.RichPreview;

public class chatAdapter extends RecyclerView.Adapter implements ItemTouchHelperAdapter {
    private static final org.apache.commons.logging.Log log = LogFactory.getLog(chatAdapter.class);
    // Interface for multi-selection callbacks
    public interface OnMultiSelectListener {
        void onMultiSelectModeChanged(boolean isMultiSelectMode);

        void onSelectionCountChanged(int count);

        void onForwardSelected();
    }
    private Set<String> animatedMessageIds = new HashSet<>();
    int dumPosition = 0;
    public static Context mContext;
    int SENDER_VIEW_TYPE = 1;
    emojiAdapterChatAdapter emojiAdapterChatAdapter;
    private int lastReceiverPosition = -1;
    public WeakReference<RecyclerView> recyclerViewReference;
    emoji_adapter_addbtn emoji_adapter_addbtn;
    private SecretKey key;
    private final RecyclerView.RecycledViewPool viewPool = new RecyclerView.RecycledViewPool();
    ColorStateList tintList;
    String themColor;
    private MediaPlayer currentMediaPlayer = null;
    private ImageView currentPlayButton = null;
    private LinearProgressIndicator currentProgressBar = null;
    private Handler currentHandler = null;
    RequestOptions requestOptions = new RequestOptions();
    private static boolean loadHighQuality = true;
    private boolean isLastItemVisible;
    public static long downloadId;
    int RECEIVER_VIEW_TYPE = 2;
    // Multi-selection functionality
    public boolean isMultiSelectMode = false;
    public HashSet<Integer> selectedPositions = new HashSet<>();
    public OnMultiSelectListener multiSelectListener;

    public static int checkBarIsActive = 0;
    public static ArrayList<forwardnameModel> forwardNameList = new ArrayList<>();
    public static LinearLayout dx;
    public LinearLayout richBoxForward;
    FirebaseDatabase database;
    public static forwardAdapter forwardAdapter;
    public static forwardnameAdapter forwardnameAdapter;
    public static RecyclerView recyclerview;
    public static RecyclerView namerecyclerview;
    public static TextView forwardText;
    public static ArrayList<get_user_active_contact_list_Model> get_user_active_contact_forward_list = new ArrayList<>();
    int temppostion = 0;
    public ArrayList<messageModel> messageList = new ArrayList<>();
    int temptotalduration = 0;
    public MediaPlayerCallback mediaPlayerCallback;
    public RecyclerView messageRecView;
    chattingScreen chattingScreen;
    EditText phone2Contact;

    Activity mActivity;
    Handler handler;
    CardView valuable;
    public String receiverUid;
    String userFTokenKey;
    String name;
    String captionKey;
    TextView originalName;

    TextView TextViewname, blockUser;
    LinearLayout messageboxContainer, blockContainer;


    public chatAdapter(Context mContext, RecyclerView messageRecView, ArrayList<messageModel> messageList, chattingScreen chattingScreens, Activity mActivity, EditText phone2Contact, Handler handler, CardView valuable, String receiverUid, String userFTokenKey, String name, String captionKey, TextView originalName, TextView TextViewname, TextView blockUser, LinearLayout blockContainer, LinearLayout messageboxContainer) {
        this.mContext = mContext;
        this.messageRecView = messageRecView;
        this.messageList = messageList;
        this.chattingScreen = chattingScreens;
        this.mActivity = mActivity;
        this.phone2Contact = phone2Contact;
        this.handler = handler;
        this.valuable = valuable;
        this.isLastItemVisible = false;
        this.receiverUid = receiverUid;
        this.userFTokenKey = userFTokenKey;
        this.recyclerViewReference = new WeakReference<>(messageRecView);
        this.name = name;
        this.captionKey = captionKey;
        this.originalName = originalName;
        this.TextViewname = TextViewname;
        this.blockUser = blockUser;
        this.blockContainer = blockContainer;
        this.messageboxContainer = messageboxContainer;
    }

    // Multi-selection methods


    @Override
    public long getItemId(int position) {
        try {
            messageModel m = messageList.get(position);
            if (m == null) return RecyclerView.NO_ID;
            String mid = m.getModelId();
            if (mid != null && !mid.isEmpty()) {
                return (mid.hashCode() & 0xffffffffL);
            }
            // Prefer timestamp as stable unique fallback
            long ts = m.getTimestamp();
            if (ts != 0L) {
                // combine uid + receiverUid + timestamp to reduce collisions
                String key = (m.getUid() == null ? "" : m.getUid()) + "|" + (m.getReceiverUid() == null ? "" : m.getReceiverUid()) + "|" + ts;
                return (key.hashCode() & 0xffffffffL);
            }
            // Final fallback with more entropy
            String key = (m.getUid() == null ? "" : m.getUid()) + "|" + (m.getReceiverUid() == null ? "" : m.getReceiverUid()) + "|" + (m.getTime() == null ? "" : m.getTime()) + "|" + (m.getMessage() == null ? "" : m.getMessage());
            return (key.hashCode() & 0xffffffffL);
        } catch (Exception e) {
            return RecyclerView.NO_ID;
        }
    }




    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        Log.d("onCreateViewHolder", "Creating ViewHolder for viewType: " + (viewType == SENDER_VIEW_TYPE ? "SENDER" : "RECEIVER"));

        if (viewType == SENDER_VIEW_TYPE) {
            View view = LayoutInflater.from(mContext).inflate(R.layout.sample_sender, parent, false);
            Log.d("onCreateViewHolder", "Created senderViewHolder");
            return new senderViewHolder(view);
        } else {
            View view = LayoutInflater.from(mContext).inflate(R.layout.sample_receiver, parent, false);
            Log.d("onCreateViewHolder", "Created receiverViewHolder");
            return new receiverViewHolder(view);
        }
    }

    @Override
    public int getItemViewType(int position) {
        try {
            messageModel m = messageList.get(position);
            if (m == null) return RECEIVER_VIEW_TYPE;

            String me = "";
            try {
                Constant.getSfFuncion(mContext);
                me = Constant.getSF.getString(Constant.UID_KEY, "");
            } catch (Exception ignore) {
            }

            boolean isSender = (me != null && !me.isEmpty() && me.equals(m.getUid()));
            int viewType = isSender ? SENDER_VIEW_TYPE : RECEIVER_VIEW_TYPE;

            Log.d("getItemViewType", "Position: " + position +
                    ", ModelId: " + m.getModelId() +
                    ", Message UID: " + m.getUid() +
                    ", Current UID: " + me +
                    ", IsSender: " + isSender +
                    ", ViewType: " + (viewType == SENDER_VIEW_TYPE ? "SENDER" : "RECEIVER"));

            return viewType;
        } catch (Exception e) {
            Log.e("getItemViewType", "Error in getItemViewType: " + e.getMessage());
            return RECEIVER_VIEW_TYPE;
        }
    }


    @RequiresApi(api = Build.VERSION_CODES.TIRAMISU)
    @Override
    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, final int position) {
        final messageModel model = messageList.get(position);
        final chatAdapter adapter = this; // Reference to the adapter instance

        // 🚀 ULTRA-FAST SCROLLING OPTIMIZATIONS - WATER-LIKE PERFORMANCE
        holder.itemView.setLayerType(View.LAYER_TYPE_HARDWARE, null); // Hardware acceleration
        holder.itemView.setDrawingCacheEnabled(true); // Enable drawing cache
        holder.itemView.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH); // High quality cache

        // 🚀 ADDITIONAL PERFORMANCE BOOSTS
        holder.itemView.setWillNotCacheDrawing(false); // Allow caching
        holder.itemView.setWillNotDraw(false); // Allow drawing

        // Define width for selectionBunch images (125dp)
        float widthInDp = 125f;

        // Handle multi-selection mode for all messages
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
            // Apply highlight to ALL message types (sender, receiver, and any future types)
            if (senderReceiverDownload.isSelected(position, selectedPositions)) {
                // Add full width highlight background for selected messages
                // Apply to the root container to cover full width including margins
                holder.itemView.setBackgroundColor(ContextCompat.getColor(mContext, R.color.highlightcolor));

                // Also apply to the inner container to ensure full coverage
                ViewGroup rootView = (ViewGroup) holder.itemView;
                if (rootView.getChildCount() > 0) {
                    View innerContainer = rootView.getChildAt(0);
                    if (innerContainer instanceof ViewGroup) {
                        ((ViewGroup) innerContainer).setBackgroundColor(ContextCompat.getColor(mContext, R.color.highlightcolor));
                    }
                }
            } else {
                // Remove highlight background
                holder.itemView.setBackgroundColor(Color.TRANSPARENT);

                // Also remove from inner container
                ViewGroup rootView = (ViewGroup) holder.itemView;
                if (rootView.getChildCount() > 0) {
                    View innerContainer = rootView.getChildAt(0);
                    if (innerContainer instanceof ViewGroup) {
                        ((ViewGroup) innerContainer).setBackgroundColor(Color.TRANSPARENT);
                    }
                }
            }

            // Show/hide checkbox for both sender and receiver messages
            if (holder instanceof senderViewHolder) {
                senderViewHolder senderHolder = (senderViewHolder) holder;
                senderHolder.selectionCheckbox.setVisibility(View.VISIBLE);

                // Get theme color from SharedPreferences
                Constant.getSfFuncion(mContext);
                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");

                // Set checkbox state based on selection
                if (senderReceiverDownload.isSelected(position, selectedPositions)) {
                    senderHolder.selectionCheckbox.setImageResource(R.drawable.multitick);
                    senderHolder.selectionCheckbox.setColorFilter(Color.parseColor(themColor));
                } else {
                    senderHolder.selectionCheckbox.setImageResource(R.drawable.multitick);
                    senderHolder.selectionCheckbox.setColorFilter(ContextCompat.getColor(mContext, R.color.gray3));
                }
            } else if (holder instanceof receiverViewHolder) {
                receiverViewHolder receiverHolder = (receiverViewHolder) holder;
                receiverHolder.selectionCheckbox.setVisibility(View.VISIBLE);

                // Get theme color from SharedPreferences
                Constant.getSfFuncion(mContext);
                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");

                // Set checkbox state based on selection
                if (senderReceiverDownload.isSelected(position, selectedPositions)) {
                    receiverHolder.selectionCheckbox.setImageResource(R.drawable.multitick);
                    receiverHolder.selectionCheckbox.setColorFilter(Color.parseColor(themColor));
                } else {
                    receiverHolder.selectionCheckbox.setImageResource(R.drawable.multitick);
                    receiverHolder.selectionCheckbox.setColorFilter(ContextCompat.getColor(mContext, R.color.gray3));
                }
            }

            // Multi-selection click handling is now integrated into individual click listeners
        }
        else {
            // Normal mode - hide checkboxes and remove click listeners
            if (holder instanceof senderViewHolder) {
                senderViewHolder senderHolder = (senderViewHolder) holder;
                senderHolder.selectionCheckbox.setVisibility(View.GONE);
            } else if (holder instanceof receiverViewHolder) {
                receiverViewHolder receiverHolder = (receiverViewHolder) holder;
                receiverHolder.selectionCheckbox.setVisibility(View.GONE);
            }

            // Reset background to transparent for ALL message types
            holder.itemView.setBackgroundColor(Color.TRANSPARENT);

            // Also reset inner container background
            ViewGroup rootView = (ViewGroup) holder.itemView;
            if (rootView.getChildCount() > 0) {
                View innerContainer = rootView.getChildAt(0);
                if (innerContainer instanceof ViewGroup) {
                    ((ViewGroup) innerContainer).setBackgroundColor(Color.TRANSPARENT);
                }
            }

            // Remove click listener for normal mode
            holder.itemView.setOnClickListener(null);
        }

        database = FirebaseDatabase.getInstance();
        if (messageList.size() == 0) {
            if (valuable.getVisibility() == View.GONE) {
                Animation fadeIn = new AlphaAnimation(0, 1);
                fadeIn.setDuration(2000);
                valuable.startAnimation(fadeIn);
                valuable.setVisibility(View.VISIBLE);
            }

        } else {
            if (valuable.getVisibility() == View.VISIBLE) {
                Animation fadeOut = new AlphaAnimation(1, 0);
                fadeOut.setDuration(2000);
                valuable.startAnimation(fadeOut);
                valuable.setVisibility(View.GONE);
            }
        }
        try {
            if (holder.getClass() == senderViewHolder.class) {
                // Only apply blur if user is blocked - optimized for scrolling performance
                boolean isUserBlocked = blockUser.getText().toString().equals("true");
                if (isUserBlocked) {
                    // Apply blur effect only when user is blocked (preserve block functionality)
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                        RenderEffect blurEffect = RenderEffect.createBlurEffect(40f, 40f, Shader.TileMode.CLAMP);
                        ((senderViewHolder) holder).itemView.setRenderEffect(blurEffect);
                    }
                    // Disable interaction for blocked users
                    ((senderViewHolder) holder).itemView.setClickable(false);
                    ((senderViewHolder) holder).itemView.setFocusable(false);
                    ((senderViewHolder) holder).itemView.setEnabled(false);
                    ((senderViewHolder) holder).itemView.setOnTouchListener((v, event) -> true); // Consume all touch events
                } else {
                    // Remove blur effect for non-blocked users (optimized for scrolling)
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                        ((senderViewHolder) holder).itemView.setRenderEffect(null); // remove blur
                    }
                    // Enable interaction for non-blocked users
                    ((senderViewHolder) holder).itemView.setClickable(true);
                    ((senderViewHolder) holder).itemView.setFocusable(true);
                    ((senderViewHolder) holder).itemView.setEnabled(true);
                    ((senderViewHolder) holder).itemView.setOnTouchListener(null); // Restore default
                }


                if(model.getEmojiCount()!=null){
                    if (!model.getEmojiCount().equals("")) {
                        ArrayList<emojiModel> decryptedemoji = model.getEmojiModel();

                        // Remove duplicates by using HashSet
                        HashSet<emojiModel> uniqueEmojis = new HashSet<>(decryptedemoji);

                        // Convert HashSet back to ArrayList to maintain order
                        ArrayList<emojiModel> uniqueEmojiList = new ArrayList<>(uniqueEmojis);

                        StringBuilder emojiText = new StringBuilder();

                        // Loop through all unique emojis and append them to StringBuilder
                        for (int i = 0; i < uniqueEmojiList.size(); i++) {
                            emojiText.append(uniqueEmojiList.get(i).getEmoji()).append(" ");  // Add space between emojis
                        }

                        // If emoji count is 2, append the count at the end of emojis


                        if (model.getEmojiCount().equals("2")) {
                            // Use SpannableString to make the "2" smaller
                            String fullText = emojiText.toString().trim() + " 2 ";  // Add space before "2"
                            SpannableString spannableString = new SpannableString(fullText);

                            // Make the "2" text smaller
                            int start = fullText.length() - 1;  // Start of "2"
                            int end = fullText.length();  // End of "2"
                            spannableString.setSpan(new RelativeSizeSpan(0.9f), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  // 0.9f to make it smaller

                            // Set the styled text with emojis and the small "2"
                            ((senderViewHolder) holder).emojiText.setText(spannableString);
                        } else {
                            // Set the text without the "2"
                            ((senderViewHolder) holder).emojiText.setText(emojiText.toString().trim());
                        }

                        ((senderViewHolder) holder).emojiTextCard.setVisibility(View.VISIBLE);
                    } else {
                        ((senderViewHolder) holder).emojiTextCard.setVisibility(View.GONE);
                    }
                }else{
                    ((senderViewHolder) holder).emojiTextCard.setVisibility(View.GONE);
                }

                ((senderViewHolder) holder).emojiTextCard.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        // Handle multi-selection mode first
                        if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                            senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                            return;
                        }

                        Constant.Vibrator(mContext);
                        Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                        Constant.bottomSheetDialog.show();
                        RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                        ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);


                        Constant.getSfFuncion(mContext);

                        String receiverRoom = model.getUid() + model.getReceiverUid();

                        ArrayList<emojiModel> emojiList = new ArrayList<>();
                        emojiPeopleAdapter emojiPeopleAdapter = new emojiPeopleAdapter(mContext, emojiList, receiverUid);

                        recyclerView.setLayoutManager(new LinearLayoutManager(mContext));
                        recyclerView.setAdapter(emojiPeopleAdapter);

                        DatabaseReference emojiRef = database.getReference().child(Constant.CHAT).child(receiverRoom).child(model.getModelId()).child("emojiModel");

                        emojiRef.addValueEventListener(new ValueEventListener() {
                            @Override
                            public void onDataChange(@NonNull DataSnapshot snapshot) {
                                emojiList.clear();
                                for (DataSnapshot data : snapshot.getChildren()) {
                                    emojiModel emoji = data.getValue(emojiModel.class);
                                    if (emoji != null) {
                                        emojiList.add(emoji);
                                    }
                                }
                                progressBar.setVisibility(View.GONE);
                                emojiPeopleAdapter.notifyDataSetChanged();
                            }

                            @Override
                            public void onCancelled(@NonNull DatabaseError error) {

                            }
                        });


                    }
                });
                int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                    // Dark mode is active
                    Constant.getSfFuncion(mContext);
                    String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                    ColorStateList tintList;


                    try {
                        if (themColor.equals("#ff0080")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor)); // Replace #011224 with your hex color value

                        } else if (themColor.equals("#00A3E9")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#7adf2a")) {

                            tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#ec0001")) {

                            tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#16f3ff")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#FF8A00")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#7F7F7F")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#D9B845")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#346667")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#9846D9")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else if (themColor.equals("#A81010")) {
                            tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        } else {
                            tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                            ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                            // Replace #011224 with your hex color value
                            //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        }
                    } catch (Exception ignored) {
                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                        ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList);
                        ((senderViewHolder) holder).richBox.setBackgroundTintList(tintList);
                        // Replace #011224 with your hex color value
                        //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                    }


                } else {
                    tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                    ((senderViewHolder) holder).MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value
                    // Replace #011224 with your hex color value
                    //((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));

                }
                ((senderViewHolder) holder).itemView.setBackgroundColor(Color.TRANSPARENT);

                // Reduce spacing between messages with same timestamp
                boolean hasSameTimestamp = senderReceiverDownload.hasSameTimestampAsNext(position, messageList);
                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) ((senderViewHolder) holder).itemView.getLayoutParams();
                if (layoutParams != null) {
                    if (hasSameTimestamp) {
                        // Reduce bottom margin for messages with same timestamp
                        layoutParams.bottomMargin = 2; // Reduced spacing
                    } else {
                        // Normal spacing for different timestamps
                        layoutParams.bottomMargin = 8; // Normal spacing
                    }
                    ((senderViewHolder) holder).itemView.setLayoutParams(layoutParams);
                }

                // Show progress for ALL pending messages (uploadStatus 0 or 1)
                // Check if this message is pending by looking for it in SQLite
                boolean isPendingMessage = false;
                try {
                    // Get current user UID
                    Constant.getSfFuncion(mContext);
                    String currentUid = Constant.getSF.getString(Constant.UID_KEY, "");

                    // Check if this is a sender message and if it's pending
                    if (model.getUid() != null && model.getUid().equals(currentUid)) {
                        // This is a sender message, check if it's pending
                        DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                        List<messageModel> pendingMessages = dbHelper.getPendingMessages(model.getReceiverUid());
                        for (messageModel pendingMsg : pendingMessages) {
                            if (pendingMsg.getModelId() != null && pendingMsg.getModelId().equals(model.getModelId())) {
                                isPendingMessage = true;
                                break;
                            }
                        }
                    }
                } catch (Exception e) {
                    Log.e("PendingMessages", "Error checking if message is pending: " + e.getMessage());
                }

                if (isPendingMessage) {
                    // This is a pending message, show progress
                    ((senderViewHolder) holder).viewnew.setIndeterminate(true);
                    Log.d("PendingMessages", "Showing progress for pending message: " + model.getModelId());
                } else {
                    // This is not a pending message, hide progress
                    ((senderViewHolder) holder).viewnew.setIndeterminate(false);
                }
                try {

                    Constant.getSfFuncion(mContext);
                    themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                    tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                    //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                    try {
                        if (themColor.equals("#ff0080")) {
                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));

                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //   ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //   ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#00A3E9")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //  ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //  ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#7adf2a")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //  ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //     ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#ec0001")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));

                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //    ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //       ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);
                        } else if (themColor.equals("#16f3ff")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //    ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //    ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#FF8A00")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //     ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //   ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#7F7F7F")) {


                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //    ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //    ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);
                        } else if (themColor.equals("#D9B845")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //    ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //   ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#346667")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //   ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //  ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#9846D9")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            // ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            // ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#A81010")) {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //   ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //   ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else {

                            ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));


                            ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //     ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //    ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        }
                    } catch (Exception ignored) {

                        ((senderViewHolder) holder).viewnew.setTrackColor(Color.parseColor(themColor));
                        ((senderViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                        ((senderViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                        //   ((senderViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                        ((senderViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                        //  ((senderViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);
                    }


                } catch (Exception ignored) {
                }
                // Use the hasSameTimestamp variable already declared above
                // Debug logging for timing visibility (commented out for production)
                // Log.d("TimingVisibility", "Position: " + position +
                //       ", Has same timestamp: " + hasSameTimestamp +
                //       ", Setting timing visibility: " + (hasSameTimestamp ? "GONE" : "VISIBLE"));

                // Always show timing
                ((senderViewHolder) holder).sendTime.setVisibility(View.VISIBLE);
                ((senderViewHolder) holder).sendTime.setText(model.getTime());

                try {
                    if (model.getCurrentDate().equals(Constant.getCurrentDate())) {
                        ((senderViewHolder) holder).dateTxt.setText("Today");
                    } else if (model.getCurrentDate().equals(Constant.getYesterdayDate())) {
                        ((senderViewHolder) holder).dateTxt.setText("Yesterday");
                    } else {
                        ((senderViewHolder) holder).dateTxt.setText(model.getCurrentDate());
                    }


                    if (((senderViewHolder) holder).dateTxt.getText().toString().contains(":")) {
                        ((senderViewHolder) holder).datelyt.setVisibility(View.GONE);
                    } else {
                        ((senderViewHolder) holder).datelyt.setVisibility(View.GONE);
                    }

                } catch (Exception e) {
                }
                if (model.getForwaredKey().equals(Constant.forwordKey)) {
                    ((senderViewHolder) holder).forwarded.setVisibility(View.VISIBLE);
                    ((senderViewHolder) holder).grpMsgName.setVisibility(View.GONE);
                    ((senderViewHolder) holder).forwarded.setCompoundDrawableTintList(tintList);

                    LayerDrawable layerDrawable = (LayerDrawable) ((senderViewHolder) holder).forwarded.getBackground();
                    GradientDrawable borderDrawable = (GradientDrawable) layerDrawable.findDrawableByLayerId(R.id.border);
                    borderDrawable.setStroke(5, Color.parseColor(themColor));
                    ((senderViewHolder) holder).forwarded.invalidate();


                } else if (model.getForwaredKey().equals(Constant.groupKey)) {
                    ((senderViewHolder) holder).forwarded.setVisibility(View.GONE);

                } else {
                    ((senderViewHolder) holder).forwarded.setVisibility(View.GONE);
                }

                if (model.getDataType().equals(Constant.img)) {

                    Log.d("TAG444", "com");

                    ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                    ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                    ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);


                    ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                    ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);

                    // Always show viewnew
                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                    if (model.getReplyKey().equals(Constant.ReplyKey)) {

                        // TODO: 03/09/25  NEW REPLY  CONTENT

                        ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).imgcardview.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                        ((senderViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((senderViewHolder) holder).miceReply.setVisibility(View.GONE);

                        // this is for image caption
                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

                        ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        Log.d("0909887", model.getReplyKey());

                        if (model.getReplyType().equals(Constant.Text)) {
                            ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                            ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((senderViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                            ((senderViewHolder) holder).msgreplyText.setText("Photo");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.gallery);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));


                            File customFolder2;
                            String exactPath2;

                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                exactPath2 = customFolder2.getAbsolutePath();
                            } else {
                                customFolder2 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                exactPath2 = customFolder2.getAbsolutePath();
                            }


                            if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileName())) {

                                ((senderViewHolder) holder).downlaod.setVisibility(View.GONE);
                                ((senderViewHolder) holder).progressBarImageview.setVisibility(View.GONE);
                                try {
                                    File imageFile = new File(exactPath2 + "/" + model.getFileName());

                                    String imageSource = exactPath2 + "/" + model.getFileName();
                                    ImageView targetImageView = ((senderViewHolder) holder).imgreply;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);


                                    Log.d("xrtyjtjyctjy", "onBindViewHolder33333: " + exactPath2 + "/" + model.getFileName());
                                    // Using Constant method instead of direct Picasso
                                    // Constant.loadImageIntoView(mContext, exactPath2 + "/" + model.getFileName(), requestOptions, ((senderViewHolder) holder).senderImg, parentLayout, position, true, model, null);
                                } catch (Exception e) {
                                }
                            } else {

                                // ((senderViewHolder) holder).downlaod.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).progressBarImageview.setVisibility(View.GONE);
                                try {

                                    String imageSource = model.getReplyOldData();
                                    ImageView targetImageView = ((senderViewHolder) holder).imgreply;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);

                                } catch (Exception ignored) {
                                }


                            }
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

                    } else {


                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                        ((senderViewHolder) holder).imgcardview.setVisibility(View.GONE);

                        // this is for image caption
                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);

                        if (model.getSelectionCount() != null) {
                            if (model.getSelectionCount().equals("1")) {
                                ((senderViewHolder) holder).senderImgLyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImg.setVisibility(View.VISIBLE);


                                File customFolder2;
                                String exactPath2;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                    exactPath2 = customFolder2.getAbsolutePath();
                                } else {
                                    customFolder2 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                    exactPath2 = customFolder2.getAbsolutePath();
                                }
                                if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileName())) {
                                    Log.d("TAG", "statusxascac: " + "existingimage " + exactPath2 + "/" + model.getFileName());
                                    Log.d("loadImageIntoViewTT", "getImageWidth: " + model.getImageWidth());
                                    Log.d("loadImageIntoViewTT", "getImageHeight: " + model.getImageHeight());
                                    Log.d("loadImageIntoViewTT", "getAspectRatio: " + model.getAspectRatio());

                                    File imageFile = new File(exactPath2 + "/" + model.getFileName());


                                    String imageSource = exactPath2 + "/" + model.getFileName();
                                    ImageView targetImageView = ((senderViewHolder) holder).senderImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    // ✅ Preload image to prevent black flash
                                    Glide.with(mContext).load(imageSource).preload();

                                    // ✅ Use optimized image loading to prevent flickering
                                    Log.d("ImageFlicker", "📸 Loading senderImg (local): " + imageSource + " | Quality: " + (true ? "HIGH" : "LOW") + " | Position: " + position);
                                    Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, ((senderViewHolder) holder).videoicon);
//


                                    ((senderViewHolder) holder).downlaod.setVisibility(View.GONE);
                                    ((senderViewHolder) holder).progressBarImageview.setVisibility(View.GONE);
                                } else {
                                    Log.d("TAG", "status: " + "notimage");


                                    String imageSource = model.getDocument();
                                    ImageView targetImageView = ((senderViewHolder) holder).senderImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    // ✅ Preload image to prevent black flash
                                    Glide.with(mContext).load(imageSource).preload();

                                    // ✅ Use optimized image loading to prevent flickering
                                    Log.d("ImageFlicker", "📸 Loading senderImg (remote): " + imageSource + " | Quality: " + (true ? "HIGH" : "LOW") + " | Position: " + position);
                                    Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, ((senderViewHolder) holder).videoicon);


                                    ((senderViewHolder) holder).downlaod.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).progressBarImageview.setVisibility(View.GONE);

                                }

                            } else
                            if (model.getSelectionCount().equals("2")) {

                                ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                                ((senderViewHolder) holder).overlayTextImg.setVisibility(View.GONE);
                                ((senderViewHolder) holder).img2.setVisibility(View.GONE);
                                ((senderViewHolder) holder).img4.setVisibility(View.GONE);
                                ((senderViewHolder) holder).img4Lyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img3.setVisibility(View.VISIBLE);

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImages((senderViewHolder) holder, model, requestOptions, position, true, mContext);


                                // ================= For selectionCount=2: Both images 125dp x 251.5dp =================
                                float heightInDp = 251.5f;
                                float widthInDp2 = 125f;

                                int heightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        heightInDp,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int widthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        widthInDp2,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                // ================= For img1 (Left side - left corners rounded) =================
                                ViewGroup.LayoutParams params1 = ((senderViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = heightInPx;
                                    params1.width = widthInPx;
                                    ((senderViewHolder) holder).img1.setLayoutParams(params1);
                                }

                                ShapeAppearanceModel shapeModel1 = ((senderViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img3 (Right side - right corners rounded) =================
                                ViewGroup.LayoutParams params3 = ((senderViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = heightInPx;
                                    params3.width = widthInPx;
                                    ((senderViewHolder) holder).img3.setLayoutParams(params3);
                                }

                                ShapeAppearanceModel shapeModel3 = ((senderViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .build();

                                ((senderViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                Log.d("SelectionBunch", "Set both images for selectionCount=2: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");



                            } else if (model.getSelectionCount().equals("3")) {
                                ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                                ((senderViewHolder) holder).overlayTextImg.setVisibility(View.GONE);
                                ((senderViewHolder) holder).img2.setVisibility(View.GONE);
                                ((senderViewHolder) holder).img4.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img4Lyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img3.setVisibility(View.VISIBLE);

                                // ================= For img1 (Height: 251.5dp, Width: 125dp) =================
                                float img1HeightInDp = 251.5f;
                                float img1WidthInDp = 125f;
                                int img1HeightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img1HeightInDp,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int img1WidthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img1WidthInDp,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                ViewGroup.LayoutParams params1 = ((senderViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = img1HeightInPx;
                                    params1.width = img1WidthInPx;
                                    ((senderViewHolder) holder).img1.setLayoutParams(params1);
                                    Log.d("SelectionBunch", "Set img1 dimensions: " + img1WidthInPx + "x" + img1HeightInPx + "px (" + img1WidthInDp + "x" + img1HeightInDp + "dp)");
                                }

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                ShapeAppearanceModel shapeModel1 = ((senderViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img3 (Height: 125dp, Width: 125dp) =================
                                float img3HeightInDp = 125f;
                                float img3WidthInDp = 125f;
                                int img3HeightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img3HeightInDp,
                                        ((senderViewHolder) holder).img3.getResources().getDisplayMetrics()
                                );

                                int img3WidthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img3WidthInDp,
                                        ((senderViewHolder) holder).img3.getResources().getDisplayMetrics()
                                );

                                ViewGroup.LayoutParams params3 = ((senderViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = img3HeightInPx;
                                    params3.width = img3WidthInPx;
                                    ((senderViewHolder) holder).img3.setLayoutParams(params3);
                                    Log.d("SelectionBunch", "Set img3 dimensions: " + img3WidthInPx + "x" + img3HeightInPx + "px (" + img3WidthInDp + "x" + img3HeightInDp + "dp)");
                                }

                                ShapeAppearanceModel shapeModel3 = ((senderViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                // ================= For img4 (Height: 125dp, Width: 125dp) =================
                                float img4HeightInDp = 125f;
                                float img4WidthInDp = 125f;
                                int img4HeightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img4HeightInDp,
                                        ((senderViewHolder) holder).img4.getResources().getDisplayMetrics()
                                );

                                int img4WidthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img4WidthInDp,
                                        ((senderViewHolder) holder).img4.getResources().getDisplayMetrics()
                                );

                                ViewGroup.LayoutParams params4 = ((senderViewHolder) holder).img4.getLayoutParams();
                                if (params4 != null) {
                                    params4.height = img4HeightInPx;
                                    params4.width = img4WidthInPx;
                                    ((senderViewHolder) holder).img4.setLayoutParams(params4);
                                    Log.d("SelectionBunch", "Set img4 dimensions: " + img4WidthInPx + "x" + img4HeightInPx + "px (" + img4WidthInDp + "x" + img4HeightInDp + "dp)");
                                }

                                ShapeAppearanceModel shapeModel4 = ((senderViewHolder) holder).img4.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img4.setShapeAppearanceModel(shapeModel4);

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImages((senderViewHolder) holder, model, requestOptions, position, true, mContext);

                            } else
                            if (model.getSelectionCount().equals("4")) {
                                ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);

                                ((senderViewHolder) holder).img2.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img4.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img4Lyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img3.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).overlayTextImg.setVisibility(View.GONE);

                                // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                float heightInDp = 125.5f;
                                float widthInDp4 = 125f;

                                int heightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        heightInDp,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int widthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        widthInDp4,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                // ================= For img1 (Top-left corner rounded) =================
                                ViewGroup.LayoutParams params1 = ((senderViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = heightInPx;
                                    params1.width = widthInPx;
                                    ((senderViewHolder) holder).img1.setLayoutParams(params1);
                                }

                                ShapeAppearanceModel shapeModel1 = ((senderViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img2 (Bottom-left corner rounded) =================
                                Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                Log.d("SelectionBunch", "img2 initial state - visibility: " + ((senderViewHolder) holder).img2.getVisibility() +
                                        ", width: " + ((senderViewHolder) holder).img2.getWidth() +
                                        ", height: " + ((senderViewHolder) holder).img2.getHeight());

                                ViewGroup.LayoutParams params2 = ((senderViewHolder) holder).img2.getLayoutParams();
                                if (params2 != null) {
                                    Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                    params2.height = heightInPx;
                                    params2.width = widthInPx;
                                    ((senderViewHolder) holder).img2.setLayoutParams(params2);

                                    // Force layout pass to apply the new dimensions
                                    ((senderViewHolder) holder).img2.requestLayout();
                                    ((senderViewHolder) holder).img2.invalidate();

                                    Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                    Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + ((senderViewHolder) holder).img2.getWidth() +
                                            ", height: " + ((senderViewHolder) holder).img2.getHeight());
                                } else {
                                    Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                }

                                ShapeAppearanceModel shapeModel2 = ((senderViewHolder) holder).img2.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img2.setShapeAppearanceModel(shapeModel2);

                                // ================= For img3 (Top-right corner rounded) =================
                                ViewGroup.LayoutParams params3 = ((senderViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = heightInPx;
                                    params3.width = widthInPx;
                                    ((senderViewHolder) holder).img3.setLayoutParams(params3);
                                }

                                ShapeAppearanceModel shapeModel3 = ((senderViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                // ================= For img4 (Bottom-right corner rounded) =================
                                ViewGroup.LayoutParams params4 = ((senderViewHolder) holder).img4.getLayoutParams();
                                if (params4 != null) {
                                    params4.height = heightInPx;
                                    params4.width = widthInPx;
                                    ((senderViewHolder) holder).img4.setLayoutParams(params4);
                                }

                                ShapeAppearanceModel shapeModel4 = ((senderViewHolder) holder).img4.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .build();

                                ((senderViewHolder) holder).img4.setShapeAppearanceModel(shapeModel4);

                                Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImages((senderViewHolder) holder, model, requestOptions, position, true, mContext);

                            } else {


                                ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                                ((senderViewHolder) holder).img2.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img4.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img4Lyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).img3.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).overlayTextImg.setVisibility(View.VISIBLE);


                                int a = Integer.parseInt(model.getSelectionCount());

                                ((senderViewHolder) holder).overlayTextImg.setText("+ "+String.valueOf(a-3));

                                // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                float heightInDp = 125.5f;
                                float widthInDp4 = 125f;

                                int heightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        heightInDp,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int widthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        widthInDp4,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((senderViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                // ================= For img1 (Top-left corner rounded) =================
                                ViewGroup.LayoutParams params1 = ((senderViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = heightInPx;
                                    params1.width = widthInPx;
                                    ((senderViewHolder) holder).img1.setLayoutParams(params1);
                                }

                                ShapeAppearanceModel shapeModel1 = ((senderViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img2 (Bottom-left corner rounded) =================
                                Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                Log.d("SelectionBunch", "img2 initial state - visibility: " + ((senderViewHolder) holder).img2.getVisibility() +
                                        ", width: " + ((senderViewHolder) holder).img2.getWidth() +
                                        ", height: " + ((senderViewHolder) holder).img2.getHeight());

                                ViewGroup.LayoutParams params2 = ((senderViewHolder) holder).img2.getLayoutParams();
                                if (params2 != null) {
                                    Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                    params2.height = heightInPx;
                                    params2.width = widthInPx;
                                    ((senderViewHolder) holder).img2.setLayoutParams(params2);

                                    // Force layout pass to apply the new dimensions
                                    ((senderViewHolder) holder).img2.requestLayout();
                                    ((senderViewHolder) holder).img2.invalidate();

                                    Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                    Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + ((senderViewHolder) holder).img2.getWidth() +
                                            ", height: " + ((senderViewHolder) holder).img2.getHeight());
                                } else {
                                    Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                }

                                ShapeAppearanceModel shapeModel2 = ((senderViewHolder) holder).img2.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img2.setShapeAppearanceModel(shapeModel2);

                                // ================= For img3 (Top-right corner rounded) =================
                                ViewGroup.LayoutParams params3 = ((senderViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = heightInPx;
                                    params3.width = widthInPx;
                                    ((senderViewHolder) holder).img3.setLayoutParams(params3);
                                }

                                ShapeAppearanceModel shapeModel3 = ((senderViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((senderViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                // ================= For img4 (Bottom-right corner rounded) =================
                                ViewGroup.LayoutParams params4 = ((senderViewHolder) holder).img4.getLayoutParams();
                                if (params4 != null) {
                                    params4.height = heightInPx;
                                    params4.width = widthInPx;
                                    ((senderViewHolder) holder).img4.setLayoutParams(params4);
                                }

                                ShapeAppearanceModel shapeModel4 = ((senderViewHolder) holder).img4.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .build();

                                ((senderViewHolder) holder).img4.setShapeAppearanceModel(shapeModel4);

                                Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImages((senderViewHolder) holder, model, requestOptions, position, true, mContext);
                            }
                        } else {
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.VISIBLE);

                            ((senderViewHolder) holder).senderImg.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);
                        }


                    }

                    ((senderViewHolder) holder).sendLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            // todo this is why preview hold on a exact location " v "

                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);

                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                            TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                            RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                            LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                            LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);


                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);





                            RelativeLayout senderImgBunchLyt;
                            ShapeableImageView img1, img3, img2, img4;
                            FrameLayout img4Lyt;
                            TextView overlayTextImg;
                            FloatingActionButton downlaodImgBunch;
                            TextView downloadPercentageImageSenderBunch;

                            senderImgBunchLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgBunchLyt);
                            img1 = BlurHelper.dialogLayoutColor.findViewById(R.id.img1);
                            img2 = BlurHelper.dialogLayoutColor.findViewById(R.id.img2);
                            img3 = BlurHelper.dialogLayoutColor.findViewById(R.id.img3);
                            img4 = BlurHelper.dialogLayoutColor.findViewById(R.id.img4);
                            img4Lyt = BlurHelper.dialogLayoutColor.findViewById(R.id.img4Lyt);
                            overlayTextImg = BlurHelper.dialogLayoutColor.findViewById(R.id.overlayTextImg);
                            downlaodImgBunch = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodImgBunch);
                            downloadPercentageImageSenderBunch = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageImageSenderBunch);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);

                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);

                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                            emojiLongRec.startAnimation(fadeIn);


                            int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                            if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                // Dark mode is active
                                Constant.getSfFuncion(mContext);
                                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                ColorStateList tintList;

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#00A3E9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#7adf2a")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#ec0001")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#16f3ff")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#FF8A00")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#7F7F7F")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#D9B845")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#346667")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#9846D9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#A81010")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }
                                } catch (Exception ignored) {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                    MainSenderBox.setBackgroundTintList(tintList);
                                    richBox.setBackgroundTintList(tintList);


                                }


                            } else {
                                tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value
                            }


                            // todo theme
                            try {

                                Constant.getSfFuncion(mContext);
                                themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#00A3E9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7adf2a")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#ec0001")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#16f3ff")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#FF8A00")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7F7F7F")) {


                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    } else if (themColor.equals("#D9B845")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#346667")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#9846D9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#A81010")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    }
                                } catch (Exception ignored) {

                                    viewnew.setBackgroundTintList(tintList);
                                    readMore.setTextColor(Color.parseColor(themColor));

                                }


                            } catch (Exception ignored) {
                            }
                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                            cardview.startAnimation(animationdd);
                            sendTime.setText(model.getTime());

                            // todo main logic from here

                            Log.d("TAG444", "com");
                            readMore.setVisibility(View.GONE);
                            replylyoutGlobal.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            sendMessage.setVisibility(View.GONE);

                            senderVideo.setVisibility(View.GONE);
                            sendervideoLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);

// Always show viewnew
                            viewnew.setVisibility(View.VISIBLE);

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                // TODO: 03/09/25 NEW REPLY CONTENT
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                sendMessage.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                senderImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.VISIBLE);
                                pageLyt.setVisibility(View.GONE);
                                senderImg.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                miceReply.setVisibility(View.GONE);

                                // this is for image caption
                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);
                                Log.d("0909887", model.getReplyKey());

                                if (model.getReplyType().equals(Constant.Text)) {
                                    sendMessage.setVisibility(View.GONE);
                                    senderImg.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    senderVideo.setVisibility(View.GONE);
                                    sendervideoLyt.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                                    msgreplyText.setText("Photo");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.gallery);
                                    int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));

                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                            mContext.getResources().getDisplayMetrics()));

                                    File customFolder2;
                                    String exactPath2;

                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                        exactPath2 = customFolder2.getAbsolutePath();
                                    } else {
                                        customFolder2 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                        exactPath2 = customFolder2.getAbsolutePath();
                                    }

                                    if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileName())) {
                                        downlaod.setVisibility(View.GONE);
                                        progressBarImageview.setVisibility(View.GONE);
                                        try {
                                            File imageFile = new File(exactPath2 + "/" + model.getFileName());
                                            String imageSource = exactPath2 + "/" + model.getFileName();
                                            ImageView targetImageView = imgreply;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);

                                            Log.d("xrtyjtjyctjy", "onBindViewHolder33333: " + exactPath2 + "/" + model.getFileName());
                                        } catch (Exception e) {
                                        }
                                    } else {
                                        progressBarImageview.setVisibility(View.GONE);
                                        try {
                                            String imageSource = model.getReplyOldData();
                                            ImageView targetImageView = imgreply;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        } catch (Exception ignored) {
                                        }
                                    }
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);

                                if (model.getSelectionCount() != null) {
                                    if (model.getSelectionCount().equals("1")) {
                                        senderImgLyt.setVisibility(View.VISIBLE);
                                        senderImgBunchLyt.setVisibility(View.GONE);
                                        senderImg.setVisibility(View.VISIBLE);


                                        File customFolder2;
                                        String exactPath2;
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                            exactPath2 = customFolder2.getAbsolutePath();
                                        } else {
                                            customFolder2 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                            exactPath2 = customFolder2.getAbsolutePath();
                                        }
                                        if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileName())) {
                                            Log.d("TAG", "statusxascac: " + "existingimage " + exactPath2 + "/" + model.getFileName());
                                            Log.d("loadImageIntoViewTT", "getImageWidth: " + model.getImageWidth());
                                            Log.d("loadImageIntoViewTT", "getImageHeight: " + model.getImageHeight());
                                            Log.d("loadImageIntoViewTT", "getAspectRatio: " + model.getAspectRatio());

                                            File imageFile = new File(exactPath2 + "/" + model.getFileName());


                                            String imageSource = exactPath2 + "/" + model.getFileName();
                                            ImageView targetImageView = senderImg;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            // ✅ Use new blur optimization to prevent black images and pixelation

                                            BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);


                                            Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);
//


                                            downlaod.setVisibility(View.GONE);
                                            progressBarImageview.setVisibility(View.GONE);
                                        } else {
                                            Log.d("TAG", "status: " + "notimage");


                                            String imageSource = model.getDocument();
                                            ImageView targetImageView = senderImg;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);


                                            Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);


                                            downlaod.setVisibility(View.VISIBLE);
                                            progressBarImageview.setVisibility(View.GONE);

                                        }

                                    } else
                                    if (model.getSelectionCount().equals("2")) {

                                        senderImgLyt.setVisibility(View.GONE);
                                        senderImgBunchLyt.setVisibility(View.VISIBLE);
                                        senderImg.setVisibility(View.GONE);
                                        overlayTextImg.setVisibility(View.GONE);
                                        img2.setVisibility(View.GONE);
                                        img4.setVisibility(View.GONE);
                                        img4Lyt.setVisibility(View.GONE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);


                                        // ================= For selectionCount=2: Both images 125dp x 251.5dp =================
                                        float heightInDp = 251.5f;
                                        float widthInDp2 = 125f;

                                        int heightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                heightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int widthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                widthInDp2,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        // ================= For img1 (Left side - left corners rounded) =================
                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = heightInPx;
                                            params1.width = widthInPx;
                                            img1.setLayoutParams(params1);
                                        }

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img3 (Right side - right corners rounded) =================
                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = heightInPx;
                                            params3.width = widthInPx;
                                            img3.setLayoutParams(params3);
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        Log.d("SelectionBunch", "Set both images for selectionCount=2: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");



                                    } else if (model.getSelectionCount().equals("3")) {
                                        senderImgLyt.setVisibility(View.GONE);
                                        senderImgBunchLyt.setVisibility(View.VISIBLE);
                                        senderImg.setVisibility(View.GONE);
                                        overlayTextImg.setVisibility(View.GONE);
                                        img2.setVisibility(View.GONE);
                                        img4.setVisibility(View.VISIBLE);
                                        img4Lyt.setVisibility(View.VISIBLE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);

                                        // ================= For img1 (Height: 251.5dp, Width: 125dp) =================
                                        float img1HeightInDp = 251.5f;
                                        float img1WidthInDp = 125f;
                                        int img1HeightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img1HeightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int img1WidthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img1WidthInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = img1HeightInPx;
                                            params1.width = img1WidthInPx;
                                            img1.setLayoutParams(params1);
                                            Log.d("SelectionBunch", "Set img1 dimensions: " + img1WidthInPx + "x" + img1HeightInPx + "px (" + img1WidthInDp + "x" + img1HeightInDp + "dp)");
                                        }

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img3 (Height: 125dp, Width: 125dp) =================
                                        float img3HeightInDp = 125f;
                                        float img3WidthInDp = 125f;
                                        int img3HeightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img3HeightInDp,
                                                img3.getResources().getDisplayMetrics()
                                        );

                                        int img3WidthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img3WidthInDp,
                                                img3.getResources().getDisplayMetrics()
                                        );

                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = img3HeightInPx;
                                            params3.width = img3WidthInPx;
                                            img3.setLayoutParams(params3);
                                            Log.d("SelectionBunch", "Set img3 dimensions: " + img3WidthInPx + "x" + img3HeightInPx + "px (" + img3WidthInDp + "x" + img3HeightInDp + "dp)");
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        // ================= For img4 (Height: 125dp, Width: 125dp) =================
                                        float img4HeightInDp = 125f;
                                        float img4WidthInDp = 125f;
                                        int img4HeightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img4HeightInDp,
                                                img4.getResources().getDisplayMetrics()
                                        );

                                        int img4WidthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img4WidthInDp,
                                                img4.getResources().getDisplayMetrics()
                                        );

                                        ViewGroup.LayoutParams params4 = img4.getLayoutParams();
                                        if (params4 != null) {
                                            params4.height = img4HeightInPx;
                                            params4.width = img4WidthInPx;
                                            img4.setLayoutParams(params4);
                                            Log.d("SelectionBunch", "Set img4 dimensions: " + img4WidthInPx + "x" + img4HeightInPx + "px (" + img4WidthInDp + "x" + img4HeightInDp + "dp)");
                                        }

                                        ShapeAppearanceModel shapeModel4 = img4.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img4.setShapeAppearanceModel(shapeModel4);

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);

                                    } else
                                    if (model.getSelectionCount().equals("4")) {
                                        senderImgLyt.setVisibility(View.GONE);
                                        senderImgBunchLyt.setVisibility(View.VISIBLE);
                                        senderImg.setVisibility(View.GONE);

                                        img2.setVisibility(View.VISIBLE);
                                        img4.setVisibility(View.VISIBLE);
                                        img4Lyt.setVisibility(View.VISIBLE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);
                                        overlayTextImg.setVisibility(View.GONE);

                                        // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                        float heightInDp = 125.5f;
                                        float widthInDp4 = 125f;

                                        int heightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                heightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int widthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                widthInDp4,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        // ================= For img1 (Top-left corner rounded) =================
                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = heightInPx;
                                            params1.width = widthInPx;
                                            img1.setLayoutParams(params1);
                                        }

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img2 (Bottom-left corner rounded) =================
                                        Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                        Log.d("SelectionBunch", "img2 initial state - visibility: " + img2.getVisibility() +
                                                ", width: " + img2.getWidth() +
                                                ", height: " + img2.getHeight());

                                        ViewGroup.LayoutParams params2 = img2.getLayoutParams();
                                        if (params2 != null) {
                                            Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                            params2.height = heightInPx;
                                            params2.width = widthInPx;
                                            img2.setLayoutParams(params2);

                                            // Force layout pass to apply the new dimensions
                                            img2.requestLayout();
                                            img2.invalidate();

                                            Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                            Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + img2.getWidth() +
                                                    ", height: " + img2.getHeight());
                                        } else {
                                            Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                        }

                                        ShapeAppearanceModel shapeModel2 = img2.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img2.setShapeAppearanceModel(shapeModel2);

                                        // ================= For img3 (Top-right corner rounded) =================
                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = heightInPx;
                                            params3.width = widthInPx;
                                            img3.setLayoutParams(params3);
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        // ================= For img4 (Bottom-right corner rounded) =================
                                        ViewGroup.LayoutParams params4 = img4.getLayoutParams();
                                        if (params4 != null) {
                                            params4.height = heightInPx;
                                            params4.width = widthInPx;
                                            img4.setLayoutParams(params4);
                                        }

                                        ShapeAppearanceModel shapeModel4 = img4.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .build();

                                        img4.setShapeAppearanceModel(shapeModel4);

                                        Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);

                                    } else {


                                        senderImgLyt.setVisibility(View.GONE);
                                        senderImgBunchLyt.setVisibility(View.VISIBLE);
                                        senderImg.setVisibility(View.GONE);
                                        img2.setVisibility(View.VISIBLE);
                                        img4.setVisibility(View.VISIBLE);
                                        img4Lyt.setVisibility(View.VISIBLE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);
                                        overlayTextImg.setVisibility(View.VISIBLE);


                                        int a = Integer.parseInt(model.getSelectionCount());

                                        overlayTextImg.setText("+ "+String.valueOf(a-3));

                                        // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                        float heightInDp = 125.5f;
                                        float widthInDp4 = 125f;

                                        int heightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                heightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int widthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                widthInDp4,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        // ================= For img1 (Top-left corner rounded) =================
                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = heightInPx;
                                            params1.width = widthInPx;
                                            img1.setLayoutParams(params1);
                                        }

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img2 (Bottom-left corner rounded) =================
                                        Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                        Log.d("SelectionBunch", "img2 initial state - visibility: " + img2.getVisibility() +
                                                ", width: " + img2.getWidth() +
                                                ", height: " + img2.getHeight());

                                        ViewGroup.LayoutParams params2 = img2.getLayoutParams();
                                        if (params2 != null) {
                                            Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                            params2.height = heightInPx;
                                            params2.width = widthInPx;
                                            img2.setLayoutParams(params2);

                                            // Force layout pass to apply the new dimensions
                                            img2.requestLayout();
                                            img2.invalidate();

                                            Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                            Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + img2.getWidth() +
                                                    ", height: " + img2.getHeight());
                                        } else {
                                            Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                        }

                                        ShapeAppearanceModel shapeModel2 = img2.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img2.setShapeAppearanceModel(shapeModel2);

                                        // ================= For img3 (Top-right corner rounded) =================
                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = heightInPx;
                                            params3.width = widthInPx;
                                            img3.setLayoutParams(params3);
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        // ================= For img4 (Bottom-right corner rounded) =================
                                        ViewGroup.LayoutParams params4 = img4.getLayoutParams();
                                        if (params4 != null) {
                                            params4.height = heightInPx;
                                            params4.width = widthInPx;
                                            img4.setLayoutParams(params4);
                                        }

                                        ShapeAppearanceModel shapeModel4 = img4.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .build();

                                        img4.setShapeAppearanceModel(shapeModel4);

                                        Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);
                                    }
                                } else {
                                    senderImgLyt.setVisibility(View.VISIBLE);

                                    senderImg.setVisibility(View.VISIBLE);
                                    senderImgBunchLyt.setVisibility(View.GONE);
                                }

                                // this is for image caption
                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);

                                File customFolder2;
                                String exactPath2;

                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                    exactPath2 = customFolder2.getAbsolutePath();
                                } else {
                                    customFolder2 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                    exactPath2 = customFolder2.getAbsolutePath();
                                }
                                if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileName())) {
                                    Log.d("TAG", "statusxascac: " + "existingimage " + exactPath2 + "/" + model.getFileName());
                                    Log.d("loadImageIntoViewTT", "getImageWidth: " + model.getImageWidth());
                                    Log.d("loadImageIntoViewTT", "getImageHeight: " + model.getImageHeight());
                                    Log.d("loadImageIntoViewTT", "getAspectRatio: " + model.getAspectRatio());

                                    File imageFile = new File(exactPath2 + "/" + model.getFileName());
                                    String imageSource = exactPath2 + "/" + model.getFileName();
                                    ImageView targetImageView = senderImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    // ✅ Use new blur optimization to prevent black images and pixelation
                                    BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);

                                    Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);

                                    downlaod.setVisibility(View.GONE);
                                    progressBarImageview.setVisibility(View.GONE);
                                } else {
                                    Log.d("TAG", "status: " + "notimage");
                                    String imageSource = model.getDocument();
                                    ImageView targetImageView = senderImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);

                                    Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);

                                    downlaod.setVisibility(View.VISIBLE);
                                    progressBarImageview.setVisibility(View.GONE);
                                }
                            }


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            copy.setVisibility(View.GONE);
                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    ((senderViewHolder) holder).menu2.setVisibility(View.GONE);


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();
                                    BlurHelper.dialogLayoutColor.dismiss();

                                    long currentTimeStamp = Constant.getCurrentTimestamp();
                                    long pastTimeStamp = model.getTimestamp();
                                    long currentMillis = currentTimeStamp;
                                    long pastMillis = pastTimeStamp;
                                    long diffMillis = currentMillis - pastMillis;
                                    long totalHours = diffMillis / (1000 * 60 * 60);
                                    double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                    System.out.println("Total Hours: " + totalHours);
                                    System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                    if (totalHours <= 24) {
                                        database.getReference().child(Constant.CHAT).child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {

                                                    @Override
                                                    public void onSuccess(Void unused) {

                                                        // todo here we need to delete from sqlLite database

                                                        try {
                                                            new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                        } catch (Exception e) {
                                                            throw new RuntimeException(e);
                                                        }
                                                        senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                        Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                                    }
                                                });

                                            }
                                        });
                                    } else {
                                        database.getReference().child(Constant.CHAT).child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }
                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);

                                                Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                            }
                                        });
                                    }


                                }
                            });


                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);


                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);


                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {

                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {
                                            Toast.makeText(mContext, ignored.getMessage(), Toast.LENGTH_SHORT).show();

                                        }


                                    } catch (Exception ignored) {
                                        Toast.makeText(mContext, ignored.getMessage(), Toast.LENGTH_SHORT).show();
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }


                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);

                                            int listcount = forwardNameList.size();
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                forwardnameModel forwardModel = forwardNameList.get(i);
                                                if (forwardModel == null) continue;

                                                String f_id = forwardModel.getFriend_id();
                                                String f_token = forwardModel.getF_token();
                                                if (f_id == null || f_token == null) continue;

                                                String myUID = Constant.getSF.getString(Constant.UID_KEY, "");


                                                try {
                                                    ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                    emojiModels.add(new emojiModel("", ""));

                                                    messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());


                                                    messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                    try {
                                                        new DatabaseHelper(mContext).insertMessage(model2);
                                                        Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                    } catch (Exception e) {
                                                        Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                    }


                                                    // Initialize UploadChatHelper
                                                    UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);

                                                    // Call uploadContent with modelnew
                                                    uploadHelper.uploadContent(modelnew);

                                                    // Update progress UI for last iteration
                                                    Log.d("ConditionDebug", "i: " + i + ", forwardNameList.size(): " + forwardNameList.size() + ", listcount: " + listcount);
                                                    if (i == forwardNameList.size() - 1) {
                                                        if (listcount == 1) {
                                                            Log.d("IntentDebug", "Name: " + forwardModel.getName() + ", Friend ID: " + forwardModel.getFriend_id());
                                                            Intent intent = new Intent(mContext, chattingScreen.class);
                                                            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);
                                                            intent.putExtra("nameKey", forwardModel.getName());
                                                            intent.putExtra("captionKey", "");
                                                            intent.putExtra("photoKey", "");
                                                            intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                            intent.putExtra("msgLmtKey", "");
                                                            intent.putExtra("ecKey", "ecKey");
                                                            intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                            intent.putExtra("deviceType", "");
                                                            intent.putExtra("fromInviteKey", "fromInviteKey");
                                                            intent.putExtra("forwardShort", "forwardShort");
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();


                                                        } else {
                                                            Intent intent = new Intent(mContext, MainActivityOld.class);
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();

                                                        }
                                                    }

                                                } catch (Exception e) {
                                                    Log.e("ForwardError", "Error forwarding to " + f_id + ": " + e.getMessage(), e);
                                                }
                                            }
                                        }
                                    });


                                }
                            });
                            return true;
                        }
                    });

                    ((senderViewHolder) holder).downlaod.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            senderReceiverDownload.startSenderImageDownloadWithProgress(holder, model, mContext);


                         //   saveImageToGallery(model);
                        }
                    });


                    ((senderViewHolder) holder).sendLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });
                            } else {
                                File customFolder;
                                String exactPath = null;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                    exactPath = customFolder.getAbsolutePath();
                                    Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                } else {
                                    customFolder = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                    exactPath = customFolder.getAbsolutePath();

                                }
                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {


                                    if(model.getSelectionBunch().size() > 1){
                                        // Handle multiple images - create imageList with local storage check
                                        ArrayList<String> imageList = new ArrayList<>();
                                        int currentPosition = 0;

                                        Log.d("ChatAdapter", "Processing " + model.getSelectionBunch().size() + " images for multiple display");
                                        Log.d("ChatAdapter", "Local storage path: " + exactPath);

                                        // Get all files in the directory
                                        File directory = new File(exactPath);
                                        String[] allFiles = null;
                                        if (directory.exists() && directory.isDirectory()) {
                                            allFiles = directory.list();
                                            if (allFiles != null) {
                                                Log.d("ChatAdapter", "All files in directory: " + java.util.Arrays.toString(allFiles));
                                            }
                                        }

                                        // Create a list of available local files with "img_" prefix
                                        ArrayList<String> availableLocalFiles = new ArrayList<>();
                                        if (allFiles != null) {
                                            for (String file : allFiles) {
                                                if (file.startsWith("img_")) {
                                                    availableLocalFiles.add(file);
                                                }
                                            }
                                        }
                                        Log.d("ChatAdapter", "Available local files with 'img_' prefix: " + availableLocalFiles);

                                        // For now, use network URLs to ensure correct image order
                                        // This prevents using wrong local files from different image sets
                                        Log.d("ChatAdapter", "Using network URLs to ensure correct image order and prevent wrong local file usage");

                                        for (int i = 0; i < model.getSelectionBunch().size(); i++) {
                                            selectionBunchModel bunchModel = model.getSelectionBunch().get(i);
                                            String fileName = bunchModel.getFileName();
                                            String networkUrl = bunchModel.getImgUrl();

                                            Log.d("ChatAdapter", "Image " + i + " - fileName: " + fileName + ", networkUrl: " + networkUrl);

                                            // Create bundle with both fileName and URL
                                            String bundleData = fileName + "|" + networkUrl;

                                            // Use network image to ensure correct order and prevent wrong local file usage
                                            if (networkUrl != null && !networkUrl.isEmpty()) {
                                                imageList.add(bundleData);
                                                Log.d("ChatAdapter", "✅ Added bundle data " + i + ": " + bundleData);
                                            } else {
                                                // Use document as fallback
                                                if (model.getDocument() != null && !model.getDocument().isEmpty()) {
                                                    imageList.add(model.getDocument());
                                                    Log.d("ChatAdapter", "✅ Added document fallback " + i + ": " + model.getDocument());
                                                } else {
                                                    Log.w("ChatAdapter", "❌ No valid image source found for image " + i);
                                                }
                                            }
                                        }

                                        Log.d("ChatAdapter", "Final image list size: " + imageList.size() + " (all network URLs for correct order)");

                                        if (!imageList.isEmpty()) {
                                            // Use dialog with filename-based positioning
                                            Log.d("ChatAdapter", "=== OPENING MULTIPLE IMAGE DIALOG ===");
                                            Log.d("ChatAdapter", "Target filename: " + model.getFileName());
                                            Log.d("ChatAdapter", "Image list size: " + imageList.size());
                                            Log.d("ChatAdapter", "Current position: " + currentPosition);

                                            // Log the complete image list being passed
                                            Log.d("ChatAdapter", "=== IMAGE LIST BEING PASSED TO DIALOG ===");
                                            for (int i = 0; i < imageList.size(); i++) {
                                                Log.d("ChatAdapter", "Image " + i + ": " + imageList.get(i));
                                            }

                                            MultipleImageDialogHelper.showDialogWithFilename(
                                                    chattingScreen.getSupportFragmentManager(),
                                                    imageList,
                                                    model.getFileName(), // Use filename for precise positioning
                                                    Constant.senderViewHolder
                                            );
                                        } else {
                                            Log.w("ChatAdapter", "No images found for multiple image display");
                                        }
                                    }else
                                    {

                                        Intent intent = new Intent(mContext, show_image_Screen.class);
                                        intent.putExtra("imageKey", model.getFileName());
                                        intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                    }




                                } else {
//                                    Intent intent = new Intent(mContext, show_image_Screen.class);
//                                    intent.putExtra("imageKey", model.getDocument());
//                                    intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
//                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                }


                            }
                        }
                    });


                } else
                if (model.getDataType().equals(Constant.video)) {

                    Log.d("TAG444", "com");
                    ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                    ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                    ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);

                    ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                    ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);

                    // Always show viewnew
                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);


                    // for sender only 4-july-2023
                    if (model.getReplyKey().equals(Constant.ReplyKey)) {
                        // TODO: 03/09/25  NEW REPLY  CONTENT
                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).imgcardview.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                        ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((senderViewHolder) holder).miceReply.setVisibility(View.GONE);

                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

//                        //here need to visible
//                        // important views
                        ((senderViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        Log.d("090988755", model.getReplyKey());

                        if (model.getReplyType().equals(Constant.Text)) {


                            ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);

                            ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);


                            ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);


                            ((senderViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((senderViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                            ((senderViewHolder) holder).msgreplyText.setText("Video");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.videopng);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));


                            File customFolder3;
                            File customFolderVideo;
                            String exactPath2, exactPath4;
                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                customFolder3 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                exactPath2 = customFolder3.getAbsolutePath();
                            } else {
                                customFolder3 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Thumbnail");
                                exactPath2 = customFolder3.getAbsolutePath();
                            }


                            if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileNameThumbnail())) {

                                Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());

                                File imageFile = new File(exactPath2 + "/" + model.getFileNameThumbnail());


                                String imageSource = exactPath2 + "/" + model.getFileNameThumbnail();
                                ImageView targetImageView = ((senderViewHolder) holder).imgreply;
                                ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);

                                // Set image dimensions to maintain aspect ratio
                                //   otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);

                            } else {


                                try {
                                    String imageSource = model.getReplyOldData();
                                    ImageView targetImageView = ((senderViewHolder) holder).imgreply;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);

                                    // Set image dimensions to maintain aspect ratio
                                    //   otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);

                                } catch (Exception ignored) {
                                    // Hide ImageView if an exception occurs
                                    ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                                    Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                }


                            }


                        } else {
                            // Toast.makeText(mContext, "text", Toast.LENGTH_SHORT).show();
                        }
                        ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {

                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderVideo.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.VISIBLE);

                        // this is for image caption
                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                        File customFolder3;
                        File customFolderVideo;
                        String exactPath2, exactPath4;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            customFolder3 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                            customFolderVideo = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                            exactPath2 = customFolder3.getAbsolutePath();
                            exactPath4 = customFolderVideo.getAbsolutePath();
                        } else {

                            customFolder3 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Thumbnail");
                            customFolderVideo = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Videos");
                            exactPath2 = customFolder3.getAbsolutePath();
                            exactPath4 = customFolderVideo.getAbsolutePath();

                        }


                        if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileNameThumbnail())) {
                            ((senderViewHolder) holder).downlaodVideo.setVisibility(View.GONE);
                            ((senderViewHolder) holder).progressBarVideo.setVisibility(View.GONE);


                            if (otherFunctions.doesFileExist(exactPath4 + "/" + model.getFileName())) {
                                ((senderViewHolder) holder).downlaodVideo.setVisibility(View.GONE);
                                ((senderViewHolder) holder).progressBarVideo.setVisibility(View.GONE);
                            } else {
                                ((senderViewHolder) holder).downlaodVideo.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).progressBarVideo.setVisibility(View.GONE);
                            }


                            Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());

                            File imageFile = new File(exactPath2 + "/" + model.getFileNameThumbnail());
                            try {

                                String imageSource = exactPath2 + "/" + model.getFileNameThumbnail();
                                ImageView targetImageView = ((senderViewHolder) holder).senderVideo;
                                ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                // ✅ Use optimized image loading to prevent flickering
                                Log.d("ImageFlicker", "🎥 Loading senderVideo (local): " + imageSource + " | Quality: " + (true ? "HIGH" : "LOW") + " | Position: " + position);
                                Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, ((senderViewHolder) holder).videoicon);


                            } catch (Exception ignored) {
                                // Hide ImageView if an exception occurs
                                ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                                Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                            }


                            if (otherFunctions.doesFileExist(exactPath4 + "/" + model.getFileName())) {

                                ((senderViewHolder) holder).downlaodVideo.setVisibility(View.GONE);
                                ((senderViewHolder) holder).progressBarVideo.setVisibility(View.GONE);

                            } else {

                                ((senderViewHolder) holder).downlaodVideo.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).progressBarVideo.setVisibility(View.GONE);
                            }
                        } else {


                            try {

                                String imageSource = model.getThumbnail();
                                ImageView targetImageView = ((senderViewHolder) holder).senderVideo;
                                ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                // ✅ Use optimized image loading to prevent flickering
                                Log.d("ImageFlicker", "🎥 Loading senderVideo (remote): " + imageSource + " | Quality: " + (true ? "HIGH" : "LOW") + " | Position: " + position);
                                Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, ((senderViewHolder) holder).videoicon);


                            } catch (Exception ignored) {
                                // Hide ImageView if an exception occurs
                                ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                                Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                            }


                            ((senderViewHolder) holder).downlaodVideo.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).progressBarVideo.setVisibility(View.GONE);

                        }


                    }

                    ((senderViewHolder) holder).sendLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {

                            // todo this is why preview hold on a exact location " v "

                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                            TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                            RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            ProgressBar progressBarVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarVideo);

                            AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            View blurVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.blurVideo);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);
                            FloatingActionButton downlaodVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodVideo);
                            LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                            LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                            emojiLongRec.startAnimation(fadeIn);

                            int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                            if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                // Dark mode is active
                                Constant.getSfFuncion(mContext);
                                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                ColorStateList tintList;

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#00A3E9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#7adf2a")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#ec0001")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#16f3ff")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#FF8A00")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#7F7F7F")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#D9B845")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#346667")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#9846D9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#A81010")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }
                                } catch (Exception ignored) {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                    MainSenderBox.setBackgroundTintList(tintList);
                                    richBox.setBackgroundTintList(tintList);


                                }


                            } else {
                                tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value
                            }


                            // todo theme
                            try {

                                Constant.getSfFuncion(mContext);
                                themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#00A3E9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7adf2a")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#ec0001")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#16f3ff")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#FF8A00")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7F7F7F")) {


                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    } else if (themColor.equals("#D9B845")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#346667")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#9846D9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#A81010")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    }
                                } catch (Exception ignored) {

                                    viewnew.setBackgroundTintList(tintList);
                                    readMore.setTextColor(Color.parseColor(themColor));

                                }


                            } catch (Exception ignored) {
                            }
                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                            cardview.startAnimation(animationdd);
                            sendTime.setText(model.getTime());

                            // main coding starting from here
                            Log.d("TAG444", "com");
                            replylyoutGlobal.setVisibility(View.GONE);
                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            sendMessage.setVisibility(View.GONE);

                            senderImg.setVisibility(View.GONE);
                            senderImgLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);

// Always show viewnew
                            viewnew.setVisibility(View.VISIBLE);

// for sender only 4-july-2023
                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                // TODO: 03/09/25 NEW REPLY CONTENT
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                sendMessage.setVisibility(View.GONE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                senderImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.VISIBLE);
                                senderImg.setVisibility(View.GONE);
                                senderVideo.setVisibility(View.GONE);
                                sendervideoLyt.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                miceReply.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);
                                Log.d("090988755", model.getReplyKey());

                                if (model.getReplyType().equals(Constant.Text)) {
                                    sendMessage.setVisibility(View.GONE);
                                    senderImg.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                                    msgreplyText.setText("Video");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.videopng);
                                    int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));

                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                            mContext.getResources().getDisplayMetrics()));

                                    File customFolder3;
                                    File customFolderVideo;
                                    String exactPath2, exactPath4;
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        customFolder3 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                        exactPath2 = customFolder3.getAbsolutePath();
                                    } else {
                                        customFolder3 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Thumbnail");
                                        exactPath2 = customFolder3.getAbsolutePath();
                                    }

                                    if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileNameThumbnail())) {
                                        Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());
                                        File imageFile = new File(exactPath2 + "/" + model.getFileNameThumbnail());
                                        String imageSource = exactPath2 + "/" + model.getFileNameThumbnail();
                                        ImageView targetImageView = imgreply;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                    } else {
                                        try {
                                            String imageSource = model.getReplyOldData();
                                            ImageView targetImageView = imgreply;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        } catch (Exception ignored) {
                                            senderVideo.setVisibility(View.GONE);
                                            Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                        }
                                    }
                                } else {
                                    // Toast.makeText(mContext, "text", Toast.LENGTH_SHORT).show();
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                senderVideo.setVisibility(View.VISIBLE);
                                sendervideoLyt.setVisibility(View.VISIBLE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }
                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);

                                File customFolder3;
                                File customFolderVideo;
                                String exactPath2, exactPath4;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder3 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                    customFolderVideo = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                    exactPath2 = customFolder3.getAbsolutePath();
                                    exactPath4 = customFolderVideo.getAbsolutePath();
                                } else {
                                    customFolder3 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Thumbnail");
                                    customFolderVideo = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Videos");
                                    exactPath2 = customFolder3.getAbsolutePath();
                                    exactPath4 = customFolderVideo.getAbsolutePath();
                                }

                                if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileNameThumbnail())) {
                                    downlaodVideo.setVisibility(View.GONE);
                                    progressBarVideo.setVisibility(View.GONE);

                                    if (otherFunctions.doesFileExist(exactPath4 + "/" + model.getFileName())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    } else {
                                        downlaodVideo.setVisibility(View.VISIBLE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    }

                                    Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());
                                    File imageFile = new File(exactPath2 + "/" + model.getFileNameThumbnail());
                                    try {
                                        String imageSource = exactPath2 + "/" + model.getFileNameThumbnail();
                                        ImageView targetImageView = senderVideo;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);
                                    } catch (Exception ignored) {
                                        senderVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }

                                    if (otherFunctions.doesFileExist(exactPath4 + "/" + model.getFileName())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    } else {
                                        downlaodVideo.setVisibility(View.VISIBLE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    }
                                } else {
                                    try {
                                        String imageSource = model.getThumbnail();
                                        ImageView targetImageView = senderVideo;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);
                                    } catch (Exception ignored) {
                                        senderVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }
                                    downlaodVideo.setVisibility(View.VISIBLE);
                                    progressBarVideo.setVisibility(View.GONE);
                                }
                            }


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            copy.setVisibility(View.GONE);
                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    ((senderViewHolder) holder).menu2.setVisibility(View.GONE);

                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();
                                    BlurHelper.dialogLayoutColor.dismiss();


                                    long currentTimeStamp = Constant.getCurrentTimestamp();
                                    long pastTimeStamp = model.getTimestamp();
                                    long currentMillis = currentTimeStamp;
                                    long pastMillis = pastTimeStamp;
                                    long diffMillis = currentMillis - pastMillis;
                                    long totalHours = diffMillis / (1000 * 60 * 60);
                                    double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                    System.out.println("Total Hours: " + totalHours);
                                    System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                    if (totalHours <= 24) {
                                        // older message
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                    @Override
                                                    public void onSuccess(Void unused) {
                                                        // todo here we need to delete from sqlLite database

                                                        try {
                                                            new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                        } catch (Exception e) {
                                                            throw new RuntimeException(e);
                                                        }

                                                        senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                        Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                                    }
                                                });

                                            }
                                        });
                                    } else {// Newer messhae
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {

                                                // todo here we need to delete from sqlLite database

                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }

                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                            }
                                        });
                                    }


                                }
                            });

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);
                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));

                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);


                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);


                                            int listcount = forwardNameList.size();
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                forwardnameModel forwardModel = forwardNameList.get(i);
                                                if (forwardModel == null) continue;

                                                String f_id = forwardModel.getFriend_id();
                                                String f_token = forwardModel.getF_token();
                                                if (f_id == null || f_token == null) continue;

                                                String myUID = Constant.getSF.getString(Constant.UID_KEY, "");


                                                try {
                                                    ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                    emojiModels.add(new emojiModel("", ""));

                                                    messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                    messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                    try {
                                                        new DatabaseHelper(mContext).insertMessage(model2);
                                                        Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                    } catch (Exception e) {
                                                        Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                    }

                                                    // Initialize UploadChatHelper
                                                    UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);

                                                    // Call uploadContent with modelnew
                                                    uploadHelper.uploadContent(modelnew);

                                                    // Update progress UI for last iteration
                                                    if (i == forwardNameList.size() - 1) {
                                                        if (listcount == 1) {
                                                            Intent intent = new Intent(mContext, chattingScreen.class);
                                                            intent.putExtra("nameKey", forwardModel.getName());
                                                            intent.putExtra("captionKey", "");
                                                            intent.putExtra("photoKey", "");
                                                            intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                            intent.putExtra("msgLmtKey", "");
                                                            intent.putExtra("ecKey", "ecKey");
                                                            intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                            intent.putExtra("deviceType", "");
                                                            intent.putExtra("fromInviteKey", "fromInviteKey");
                                                            intent.putExtra("forwardShort", "forwardShort");
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();


                                                        } else {
                                                            Intent intent = new Intent(mContext, MainActivityOld.class);
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();

                                                        }
                                                    }

                                                } catch (Exception e) {
                                                    Log.e("ForwardError", "Error forwarding to " + f_id + ": " + e.getMessage(), e);
                                                }
                                            }
                                        }
                                    });


                                }
                            });
                            return true;
                        }
                    });
                    ((senderViewHolder) holder).downlaodVideo.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            senderReceiverDownload.startSenderVideoDownloadWithProgress(holder, model, mContext);


                        //    saveVideoToGallery(model);

                        }
                    });

                    ((senderViewHolder) holder).sendervideoLyt.setOnClickListener(new View.OnClickListener() {
                        @OptIn(markerClass = UnstableApi.class)
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion();

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {
                                File customFolder;
                                String exactPath = null;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                    exactPath = customFolder.getAbsolutePath();
                                    Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                } else {
                                    customFolder = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Videos");
                                    exactPath = customFolder.getAbsolutePath();
                                }

                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {
                                    Intent intent = new Intent(mContext, show_video_playerScreen.class);
                                    intent.putExtra("videoUri", model.getFileName());
                                    intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                } else {
                                    // Fallback to document if file doesn't exist
                                    Intent intent = new Intent(mContext, show_video_playerScreen.class);
                                    intent.putExtra("videoUri", model.getDocument());
                                    intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                }
                            }
                        }
                    });

                    ((senderViewHolder) holder).itemView.setOnClickListener(new View.OnClickListener() {

                        @OptIn(markerClass = UnstableApi.class)
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {
                                File customFolder;
                                String exactPath = null;
                                //android 10
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                    exactPath = customFolder.getAbsolutePath();
                                    Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                } else {
                                    customFolder = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Videos");
                                    exactPath = customFolder.getAbsolutePath();
                                }

                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {
                                    Intent intent = new Intent(mContext, show_video_playerScreen.class);
                                    intent.putExtra("videoUri", model.getFileName());
                                    intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                } else {
//                                    Intent intent = new Intent(mContext, show_video_playerScreen.class);
//                                    intent.putExtra("videoUri", model.getDocument());
//                                    intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
//                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                }

                            }
                        }
                    });


                    ((senderViewHolder) holder).sendervideoLyt.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {

                            // todo this is why preview hold on a exact location " v "

                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                            TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                            RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            ProgressBar progressBarVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarVideo);

                            AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            View blurVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.blurVideo);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);
                            FloatingActionButton downlaodVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodVideo);
                            LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                            LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                            emojiLongRec.startAnimation(fadeIn);

                            int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                            if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                // Dark mode is active
                                Constant.getSfFuncion(mContext);
                                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                ColorStateList tintList;

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#00A3E9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#7adf2a")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#ec0001")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#16f3ff")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#FF8A00")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#7F7F7F")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#D9B845")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#346667")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#9846D9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#A81010")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }
                                } catch (Exception ignored) {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                    MainSenderBox.setBackgroundTintList(tintList);
                                    richBox.setBackgroundTintList(tintList);


                                }


                            } else {
                                tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value
                            }


                            // todo theme
                            try {

                                Constant.getSfFuncion(mContext);
                                themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#00A3E9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7adf2a")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#ec0001")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#16f3ff")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#FF8A00")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7F7F7F")) {


                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    } else if (themColor.equals("#D9B845")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#346667")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#9846D9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#A81010")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    }
                                } catch (Exception ignored) {

                                    viewnew.setBackgroundTintList(tintList);
                                    readMore.setTextColor(Color.parseColor(themColor));

                                }


                            } catch (Exception ignored) {
                            }
                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                            cardview.startAnimation(animationdd);
                            sendTime.setText(model.getTime());

                            // main coding starting from here
                            Log.d("TAG444", "com");
                            replylyoutGlobal.setVisibility(View.GONE);
                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            sendMessage.setVisibility(View.GONE);

                            senderImg.setVisibility(View.GONE);
                            senderImgLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);

// Always show viewnew
                            viewnew.setVisibility(View.VISIBLE);

// for sender only 4-july-2023
                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                // TODO: 03/09/25 NEW REPLY CONTENT
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                sendMessage.setVisibility(View.GONE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                senderImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.VISIBLE);
                                senderImg.setVisibility(View.GONE);
                                senderVideo.setVisibility(View.GONE);
                                sendervideoLyt.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                miceReply.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);
                                Log.d("090988755", model.getReplyKey());

                                if (model.getReplyType().equals(Constant.Text)) {
                                    sendMessage.setVisibility(View.GONE);
                                    senderImg.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                                    msgreplyText.setText("Video");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.videopng);
                                    int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));

                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                            mContext.getResources().getDisplayMetrics()));

                                    File customFolder3;
                                    File customFolderVideo;
                                    String exactPath2, exactPath4;
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        customFolder3 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                        exactPath2 = customFolder3.getAbsolutePath();
                                    } else {
                                        customFolder3 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Thumbnail");
                                        exactPath2 = customFolder3.getAbsolutePath();
                                    }

                                    if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileNameThumbnail())) {
                                        Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());
                                        File imageFile = new File(exactPath2 + "/" + model.getFileNameThumbnail());
                                        String imageSource = exactPath2 + "/" + model.getFileNameThumbnail();
                                        ImageView targetImageView = imgreply;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                    } else {
                                        try {
                                            String imageSource = model.getReplyOldData();
                                            ImageView targetImageView = imgreply;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        } catch (Exception ignored) {
                                            senderVideo.setVisibility(View.GONE);
                                            Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                        }
                                    }
                                } else {
                                    // Toast.makeText(mContext, "text", Toast.LENGTH_SHORT).show();
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                senderVideo.setVisibility(View.VISIBLE);
                                sendervideoLyt.setVisibility(View.VISIBLE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }
                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);

                                File customFolder3;
                                File customFolderVideo;
                                String exactPath2, exactPath4;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder3 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                    customFolderVideo = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                    exactPath2 = customFolder3.getAbsolutePath();
                                    exactPath4 = customFolderVideo.getAbsolutePath();
                                } else {
                                    customFolder3 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Thumbnail");
                                    customFolderVideo = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Videos");
                                    exactPath2 = customFolder3.getAbsolutePath();
                                    exactPath4 = customFolderVideo.getAbsolutePath();
                                }

                                if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileNameThumbnail())) {
                                    downlaodVideo.setVisibility(View.GONE);
                                    progressBarVideo.setVisibility(View.GONE);

                                    if (otherFunctions.doesFileExist(exactPath4 + "/" + model.getFileName())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    } else {
                                        downlaodVideo.setVisibility(View.VISIBLE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    }

                                    Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());
                                    File imageFile = new File(exactPath2 + "/" + model.getFileNameThumbnail());
                                    try {
                                        String imageSource = exactPath2 + "/" + model.getFileNameThumbnail();
                                        ImageView targetImageView = senderVideo;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);
                                    } catch (Exception ignored) {
                                        senderVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }

                                    if (otherFunctions.doesFileExist(exactPath4 + "/" + model.getFileName())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    } else {
                                        downlaodVideo.setVisibility(View.VISIBLE);
                                        progressBarVideo.setVisibility(View.GONE);
                                    }
                                } else {
                                    try {
                                        String imageSource = model.getThumbnail();
                                        ImageView targetImageView = senderVideo;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);
                                    } catch (Exception ignored) {
                                        senderVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }
                                    downlaodVideo.setVisibility(View.VISIBLE);
                                    progressBarVideo.setVisibility(View.GONE);
                                }
                            }


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            copy.setVisibility(View.GONE);
                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    ((senderViewHolder) holder).menu2.setVisibility(View.GONE);

                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();
                                    BlurHelper.dialogLayoutColor.dismiss();


                                    long currentTimeStamp = Constant.getCurrentTimestamp();
                                    long pastTimeStamp = model.getTimestamp();
                                    long currentMillis = currentTimeStamp;
                                    long pastMillis = pastTimeStamp;
                                    long diffMillis = currentMillis - pastMillis;
                                    long totalHours = diffMillis / (1000 * 60 * 60);
                                    double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                    System.out.println("Total Hours: " + totalHours);
                                    System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                    if (totalHours <= 24) {
                                        // older message
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                    @Override
                                                    public void onSuccess(Void unused) {
                                                        // todo here we need to delete from sqlLite database

                                                        try {
                                                            new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                        } catch (Exception e) {
                                                            throw new RuntimeException(e);
                                                        }

                                                        senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                        Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                                    }
                                                });

                                            }
                                        });
                                    } else {// Newer messhae
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {

                                                // todo here we need to delete from sqlLite database

                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }

                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                            }
                                        });
                                    }


                                }
                            });

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);
                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));

                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);


                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);


                                            int listcount = forwardNameList.size();
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                forwardnameModel forwardModel = forwardNameList.get(i);
                                                if (forwardModel == null) continue;

                                                String f_id = forwardModel.getFriend_id();
                                                String f_token = forwardModel.getF_token();
                                                if (f_id == null || f_token == null) continue;

                                                String myUID = Constant.getSF.getString(Constant.UID_KEY, "");


                                                try {
                                                    ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                    emojiModels.add(new emojiModel("", ""));

                                                    messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                    messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                    try {
                                                        new DatabaseHelper(mContext).insertMessage(model2);
                                                        Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                    } catch (Exception e) {
                                                        Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                    }

                                                    // Initialize UploadChatHelper
                                                    UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);

                                                    // Call uploadContent with modelnew
                                                    uploadHelper.uploadContent(modelnew);

                                                    // Update progress UI for last iteration
                                                    if (i == forwardNameList.size() - 1) {
                                                        if (listcount == 1) {
                                                            Intent intent = new Intent(mContext, chattingScreen.class);
                                                            intent.putExtra("nameKey", forwardModel.getName());
                                                            intent.putExtra("captionKey", "");
                                                            intent.putExtra("photoKey", "");
                                                            intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                            intent.putExtra("msgLmtKey", "");
                                                            intent.putExtra("ecKey", "ecKey");
                                                            intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                            intent.putExtra("deviceType", "");
                                                            intent.putExtra("fromInviteKey", "fromInviteKey");
                                                            intent.putExtra("forwardShort", "forwardShort");
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();


                                                        } else {
                                                            Intent intent = new Intent(mContext, MainActivityOld.class);
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();

                                                        }
                                                    }

                                                } catch (Exception e) {
                                                    Log.e("ForwardError", "Error forwarding to " + f_id + ": " + e.getMessage(), e);
                                                }
                                            }
                                        }
                                    });


                                }
                            });
                            return true;
                        }
                    });

//                    ((senderViewHolder) holder).sendervideoLyt.setOnLongClickListener(new View.OnLongClickListener() {
//                        @Override
//                        public boolean onLongClick(View v) {
//                            // Handle multi-selection mode first
//                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
//                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
//                                return true;
//                            }
//
//                            // Show long press dialogue for video messages with proper positioning
//                            int[] location = new int[2];
//                            v.getLocationOnScreen(location);
//                            float touchX = location[0];
//                            float touchY = location[1];
//
//                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
//                            BlurHelper.dialogLayoutColor.show();
//                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
//                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);
//
//                            // Set up dialogue content for video messages
//                            TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
//                            TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
//                            RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
//                            ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
//                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
//                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
//                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
//                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
//                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
//                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
//                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
//                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
//
//                            // Set time
//                            sendTime.setText(model.getTime());
//
//                            // Hide other message types
//                            readMore.setVisibility(View.GONE);
//                            replylyoutGlobal.setVisibility(View.GONE);
//                            richLinkViewLyt.setVisibility(View.GONE);
//                            sendMessage.setVisibility(View.GONE);
//                            docLyt.setVisibility(View.GONE);
//                            contactContainer.setVisibility(View.GONE);
//                            miceContainer.setVisibility(View.GONE);
//
//                            // Show video content
//                            sendervideoLyt.setVisibility(View.VISIBLE);
//                            senderVideo.setVisibility(View.VISIBLE);
//                            viewnew.setVisibility(View.VISIBLE);
//
//                            // Set video content
//                            if (!model.getCaption().equals("")) {
//                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
//                                captionText.setVisibility(View.VISIBLE);
//                                captionText.setText(model.getCaption());
//                            } else {
//                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
//                                captionText.setVisibility(View.GONE);
//                            }
//
//                            // Load video thumbnail and set dimensions
//                            try {
//                                File customFolder;
//                                String exactPath = null;
//                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
//                                    exactPath = customFolder.getAbsolutePath();
//                                } else {
//                                    customFolder = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Videos");
//                                    exactPath = customFolder.getAbsolutePath();
//                                }
//
//                                String imageSource;
//                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {
//                                    imageSource = exactPath + "/" + model.getFileNameThumbnail();
//                                } else {
//                                    imageSource = model.getThumbnail();
//                                }
//
//                                // Set video dimensions from database
//                                if (!model.getImageWidth().equals("") && !model.getImageHeight().equals("")) {
//                                    try {
//                                        int width = Integer.parseInt(model.getImageWidth());
//                                        int height = Integer.parseInt(model.getImageHeight());
//                                        if (width > 0 && height > 0) {
//                                            ViewGroup.LayoutParams layoutParams = senderVideo.getLayoutParams();
//                                            layoutParams.width = width;
//                                            layoutParams.height = height;
//                                            senderVideo.setLayoutParams(layoutParams);
//                                        }
//                                    } catch (NumberFormatException e) {
//                                        Log.e("VideoDimensions", "Error parsing video dimensions: " + e.getMessage());
//                                    }
//                                }
//
//                                // Load video thumbnail
//                                ViewGroup parentLayout = (ViewGroup) senderVideo.getParent();
//                                RequestOptions requestOptions = new RequestOptions()
//
//                                        .error(R.drawable.inviteimg)
//                                        .diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy.ALL);
//
//                                // Get videoicon for proper thumbnail loading
//                                ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
//
//                                BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, senderVideo, parentLayout, position, true, model, videoicon);
//                                Constant.loadImageIntoView(mContext, imageSource, requestOptions, senderVideo, parentLayout, position, true, model, videoicon);
//
//                            } catch (Exception e) {
//                                Log.e("VideoThumbnailLoad", "Exception loading video thumbnail: " + e.getMessage());
//                                senderVideo.setVisibility(View.GONE);
//                            }
//
//                            // Add animation
//                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
//                            cardview.startAnimation(animationdd);
//
//                            // Add emoji functionality
//                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
//                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
//                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
//
//                            addEmoji.setOnClickListener(new View.OnClickListener() {
//                                @Override
//                                public void onClick(View v) {
//                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                                        Constant.Vibrator(mContext);
//                                    }
//                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
//                                    Constant.bottomSheetDialog.show();
//                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
//                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);
//                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);
//                                }
//                            });
//
//                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
//                            emojiLongRec.startAnimation(fadeIn);
//
//                            // Add select functionality
//                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));
//
//                            return true;
//                        }
//                    });


                } else
                if (model.getDataType().equals(Constant.Text)) {
                    Log.d("TAG444", "com");


                    if (URLUtil.isValidUrl(model.getMessage())) {
                        ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        ((senderViewHolder) holder).linkActualUrl.setVisibility(View.GONE);
                        ((senderViewHolder) holder).link.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).linkDesc.setVisibility(View.VISIBLE);


                        // todo for color of a theme purpose
                        try {

                            Constant.getSfFuncion(mContext);
                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                            try {
                                if (themColor.equals("#ff0080")) {

                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#00A3E9")) {

                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));
                                } else if (themColor.equals("#7adf2a")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#ec0001")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#16f3ff")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#FF8A00")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#7F7F7F")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#D9B845")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));
                                } else if (themColor.equals("#346667")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#9846D9")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#A81010")) {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else {


                                    ((senderViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((senderViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));
                                }
                            } catch (Exception ignored) {

                            }


                        } catch (Exception ignored) {
                        }

                        try {
//
                            // todo after sqlite
                            try {


                                linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());


                                if (linkPreviewModel.getUrl().equals("")) {
                                    ((senderViewHolder) holder).linkActualUrl.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).linkActualUrl.setText(model.getMessage());
                                    ((senderViewHolder) holder).linkActualUrl.setPaintFlags(((senderViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                    ((senderViewHolder) holder).link.setVisibility(View.GONE);
                                    ((senderViewHolder) holder).linkTitle.setVisibility(View.GONE);
                                    ((senderViewHolder) holder).linkImg.setVisibility(View.GONE);
                                    ((senderViewHolder) holder).linkImg2.setVisibility(View.GONE);
                                    ((senderViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                    ((senderViewHolder) holder).link.setVisibility(View.GONE);


                                } else {
                                    ((senderViewHolder) holder).linkActualUrl.setVisibility(View.GONE);
                                    ((senderViewHolder) holder).link.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).linkTitle.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);


                                    if (linkPreviewModel.getDescription().equals("")) {
                                        ((senderViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                    } else {
                                        ((senderViewHolder) holder).linkDesc.setVisibility(View.VISIBLE);
                                        ((senderViewHolder) holder).linkDesc.setText(linkPreviewModel.getDescription());
                                    }


                                    if (linkPreviewModel.getImage_url().equals("")) {
                                        ((senderViewHolder) holder).linkImg.setVisibility(View.GONE);
                                    } else {
                                        ((senderViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                        try {
                                            ImageView targetImageView = ((senderViewHolder) holder).linkImg;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoView(mContext, linkPreviewModel.getImage_url(), requestOptions, targetImageView, parentLayout, position, false, model, ((senderViewHolder) holder).videoicon);
                                        } catch (Exception e) {
                                        }
                                    }


                                    if (linkPreviewModel.getFavIcon().equals("")) {
                                        ((senderViewHolder) holder).linkImg2.setImageResource(R.drawable.link_fav);
                                    } else {
                                        ((senderViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);

                                        try {
                                            Constant.loadSimpleImage(holder.itemView.getContext(), linkPreviewModel.getFavIcon(), ((senderViewHolder) holder).linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                        } catch (Exception e) {
                                        }

                                    }


                                    if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                        ((senderViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                    }


                                    ((senderViewHolder) holder).linkTitle.setText(linkPreviewModel.getTitle());

                                    ((senderViewHolder) holder).link.setText(linkPreviewModel.getUrl());
                                    ((senderViewHolder) holder).link.setPaintFlags(((senderViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);

                                }

                                Log.d("TAG", "onBindViewHolder: " + linkPreviewModel.getTitle());


                            } catch (Exception e) {
                                // Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                            }


                            RichPreview richPreview = new RichPreview(new ResponseListener() {
                                @Override
                                public void onData(MetaData metaData) {
                                    // todo here need to store data to sqllite


                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        try {
                                            new DatabaseHelper(mContext).insert_linkPreviewTable(mContext, model.getModelId(), metaData.getUrl(), metaData.getTitle(), metaData.getDescription(), metaData.getFavicon(), metaData.getImageurl());


                                        } catch (Exception e) {
                                            throw new RuntimeException(e);
                                        }
                                        if (position == messageList.size() - 1) {
                                            // todo after sqlite
                                            try {


                                                linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());


                                                if (linkPreviewModel.getUrl().equals("")) {
                                                    ((senderViewHolder) holder).linkActualUrl.setVisibility(View.VISIBLE);
                                                    ((senderViewHolder) holder).linkActualUrl.setText(model.getMessage());
                                                    ((senderViewHolder) holder).linkActualUrl.setPaintFlags(((senderViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                                    ((senderViewHolder) holder).link.setVisibility(View.GONE);
                                                    ((senderViewHolder) holder).linkTitle.setVisibility(View.GONE);
                                                    ((senderViewHolder) holder).linkImg.setVisibility(View.GONE);
                                                    ((senderViewHolder) holder).linkImg2.setVisibility(View.GONE);
                                                    ((senderViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                                    ((senderViewHolder) holder).link.setVisibility(View.GONE);


                                                } else {
                                                    ((senderViewHolder) holder).linkActualUrl.setVisibility(View.GONE);
                                                    ((senderViewHolder) holder).link.setVisibility(View.VISIBLE);
                                                    ((senderViewHolder) holder).linkTitle.setVisibility(View.VISIBLE);
                                                    ((senderViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                                    ((senderViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);


                                                    if (linkPreviewModel.getDescription().equals("")) {
                                                        ((senderViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                                    } else {
                                                        ((senderViewHolder) holder).linkDesc.setVisibility(View.VISIBLE);
                                                        ((senderViewHolder) holder).linkDesc.setText(linkPreviewModel.getDescription());
                                                    }


                                                    if (linkPreviewModel.getImage_url().equals("")) {
                                                        ((senderViewHolder) holder).linkImg.setVisibility(View.GONE);
                                                    } else {
                                                        ((senderViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                                        try {
                                                            ImageView targetImageView = ((senderViewHolder) holder).linkImg;
                                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                                            Constant.loadImageIntoView(mContext, linkPreviewModel.getImage_url(), requestOptions, targetImageView, parentLayout, position, false, model, ((senderViewHolder) holder).videoicon);
                                                        } catch (Exception e) {
                                                        }
                                                    }


                                                    if (linkPreviewModel.getFavIcon().equals("")) {
                                                        ((senderViewHolder) holder).linkImg2.setImageResource(R.drawable.link_fav);
                                                    } else {
                                                        ((senderViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);

                                                        try {
                                                            Constant.loadSimpleImage(((senderViewHolder) holder).linkImg2.getContext(), linkPreviewModel.getFavIcon(), ((senderViewHolder) holder).linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                                        } catch (Exception e) {
                                                        }

                                                    }

                                                    if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                                        ((senderViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                                    }

                                                    ((senderViewHolder) holder).linkTitle.setText(linkPreviewModel.getTitle());

                                                    ((senderViewHolder) holder).link.setText(linkPreviewModel.getUrl());
                                                    ((senderViewHolder) holder).link.setPaintFlags(((senderViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);

                                                }


                                            } catch (Exception e) {

                                            }
                                        }
                                    }

                                }

                                @Override
                                public void onError(Exception e) {

                                    Log.d("RICHLINK", "onError: " + e.getMessage());
//                                    try {
//                                        ((senderViewHolder)holder).linkActualUrl.setVisibility(View.VISIBLE);
//                                        ((senderViewHolder)holder).linkActualUrl.setText(model.getMessage());
//                                        ((senderViewHolder)holder).link.setVisibility(View.GONE);
//                                        ((senderViewHolder)holder).linkImg.setVisibility(View.GONE);
//                                        ((senderViewHolder)holder).linkImg2.setVisibility(View.GONE);
//                                        ((senderViewHolder)holder).linkDesc.setVisibility(View.GONE);
//                                    } catch (Exception ex) {
//                                        throw new RuntimeException(ex);
//                                    }
                                }

                            });


                            richPreview.getPreview(model.getMessage());


                        } catch (Exception ignored) {
                            //   Toast.makeText(mContext, ignored.getMessage(), Toast.LENGTH_SHORT).show();

                            Log.d("TAG", "vsdvdsvs: " + ignored.getMessage());
                        }

                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                    } else {
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                    }

                    ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                    ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                    ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                    ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);

                    // Always show viewnew
                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                    // todo readmore and

                    if (model.getMessage().length() >= 200) {
                        ((senderViewHolder) holder).readMore.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).sendMessage.setText(model.getMessage().substring(0, 200));
                    } else {
                        ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                        ((senderViewHolder) holder).sendMessage.setText(model.getMessage());
                    }


                    if (model.getReplyKey().equals(Constant.ReplyKey)) {
                        //here need to visible
                        // important views
                        // this is for image caption

                        // TODO: 03/09/25  NEW REPLY  CONTENT ------------------------------------------

                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).imgcardview.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((senderViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).miceReply.setVisibility(View.GONE);
                        // TODO: 03/09/25  kay kay gayab honar aahe Repl key madhe
                        // image, document, voice_recording,  video, contact


                        // TODO: 03/09/25  NEW REPLY  CONTENT ------------------------------------------


                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

                        ((senderViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                        if (model.getReplyType().equals(Constant.Text)) {

                            ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                            ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);


                            String truncatedText = otherFunctions.truncateTextToWords(model.getReplyOldData(), 15);

                            ((senderViewHolder) holder).msgreplyText.setText(truncatedText);


                            ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                            // TODO: 03/09/25  IMP FOR REPLY
                            ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((senderViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                        }

                        Drawable drawableLeft = mContext.getResources().getDrawable(R.drawable.deleteiconnewsvg);
                        int paddingLeft = 0;
                        ((senderViewHolder) holder).sendMessage.setCompoundDrawablePadding(paddingLeft);
                        drawableLeft.setBounds(0, 0, 50, 50);
                        ((senderViewHolder) holder).sendMessage.setCompoundDrawablesRelativeWithIntrinsicBounds(null, null, null, null);
                        ((senderViewHolder) holder).MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                        ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);

                        ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {

                        // TODO: 03/09/25  NEW REPLY  CONTENT
                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);

                        ((senderViewHolder) holder).imgcardview.setVisibility(View.GONE);


                        String content = model.getMessage();
                        switch (Constant.analyzeTextContent(content)) {
                            case "only_emoji":
                                System.out.println("The text contains only emojis.");
                                // Handle emoji-only logic here

                                int emojiCount = Constant.countEmojis(model.getMessage());
                                System.out.println("Emoji detected! " + model.getMessage() + " " + emojiCount);

                                if (emojiCount == 1) {
                                    //  SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),30);
                                    ((senderViewHolder) holder).sendMessage.setText(model.getMessage()); // Set formatted text
                                    ((senderViewHolder) holder).MainSenderBox.setBackground(null); // Set formatted text

                                    // Hide viewnew for single emoji or if same timestamp as next message
                                    if (hasSameTimestamp) {
                                        ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                    } else {
                                        ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE); // Single emoji always hides viewnew
                                    }


                                    ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 80);

                                    // Add tap listener to animate emoji on tap
                                    Constant.setupEmojiTapAnimation(((senderViewHolder) holder).sendMessage, model.getMessage());
                                } else if (emojiCount == 2) {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),25);
                                    ((senderViewHolder) holder).sendMessage.setText(model.getMessage()); // Set formatted text
                                    ((senderViewHolder) holder).MainSenderBox.setBackground(null); // Set formatted text
                                    // Always show viewnew
                                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 45);
                                } else if (emojiCount == 3) {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),20);
                                    ((senderViewHolder) holder).sendMessage.setText(model.getMessage()); // Set formatted text
                                    ((senderViewHolder) holder).MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                    // Always show viewnew
                                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).MainSenderBox.setBackground(null); // Set formatted text
                                } else if (emojiCount == 4) {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),18);
                                    ((senderViewHolder) holder).sendMessage.setText(model.getMessage()); // Set formatted text
                                    ((senderViewHolder) holder).MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                    // Always show viewnew
                                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                } else {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),18);
                                    ((senderViewHolder) holder).sendMessage.setText(model.getMessage()); // Set formatted text
                                    ((senderViewHolder) holder).MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                    // Always show viewnew
                                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                    ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                }


                                break;

                            case "text_and_emoji":
                                System.out.println("The text contains both text and emojis.");
                                // Handle mixed text + emoji logic here
                                ((senderViewHolder) holder).MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                // Always show viewnew
                                ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);

                                break;

                            case "only_text":
                                System.out.println("The text contains only text.");
                                // Handle text-only logic here
                                ((senderViewHolder) holder).MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                // Always show viewnew
                                ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);

                                break;

                            default:
                                System.out.println("Unexpected content.");
                                ((senderViewHolder) holder).MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                // Always show viewnew
                                ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);

                                break;
                        }


                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                    }


                    ((senderViewHolder) holder).readMore.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                            ((senderViewHolder) holder).sendMessage.setText(model.getMessage());
                        }
                    });
//                    int width = ((senderViewHolder) holder).llnew.getWidth();
//                    ViewGroup.LayoutParams layoutParams = ((senderViewHolder) holder).viewnew.getLayoutParams();
//                    layoutParams.width = width;
//                    ((senderViewHolder) holder).viewnew.setLayoutParams(layoutParams);

                    ((senderViewHolder) holder).sendLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot :" + targetModelId);
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });
                            } else {
                                if (((senderViewHolder) holder).richLinkViewLyt.getVisibility() == View.VISIBLE) {
                                    try {
                                        String url = model.getMessage(); // Replace this with your URL
                                        Intent intent = new Intent(Intent.ACTION_VIEW);
                                        intent.setData(Uri.parse(url));
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                    } catch (ActivityNotFoundException e) {
                                        // Handle exception if no activity can handle the intent
                                        e.printStackTrace();
                                    }

                                } else {
// normal text here
                                }

                            }
                        }
                    });
                    ((senderViewHolder) holder).sendLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            // todo this is why preview hold on a exact location " v "

                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                            TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                            RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                            AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);

                            LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                            LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);

                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);


                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                            emojiLongRec.startAnimation(fadeIn);


                            ///


                            int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                            if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                // Dark mode is active
                                Constant.getSfFuncion(mContext);
                                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                ColorStateList tintList;

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#00A3E9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#7adf2a")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#ec0001")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#16f3ff")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#FF8A00")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#7F7F7F")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#D9B845")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#346667")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#9846D9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#A81010")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }
                                } catch (Exception ignored) {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                    MainSenderBox.setBackgroundTintList(tintList);
                                    richBox.setBackgroundTintList(tintList);


                                }


                            } else {
                                tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value
                            }
// todo theme
                            try {

                                Constant.getSfFuncion(mContext);
                                themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#00A3E9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7adf2a")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#ec0001")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#16f3ff")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#FF8A00")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7F7F7F")) {


                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    } else if (themColor.equals("#D9B845")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#346667")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#9846D9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#A81010")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    }
                                } catch (Exception ignored) {

                                    viewnew.setBackgroundTintList(tintList);
                                    readMore.setTextColor(Color.parseColor(themColor));

                                }


                            } catch (Exception ignored) {
                            }


                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                            cardview.startAnimation(animationdd);
                            sendTime.setText(model.getTime());

                            if (URLUtil.isValidUrl(model.getMessage())) {
                                richLinkViewLyt.setVisibility(View.VISIBLE);
                                sendMessage.setVisibility(View.GONE);
                                linkActualUrl.setVisibility(View.GONE);
                                link.setVisibility(View.VISIBLE);
                                linkImg.setVisibility(View.VISIBLE);
                                linkImg2.setVisibility(View.VISIBLE);
                                linkDesc.setVisibility(View.VISIBLE);

                                // todo for color of a theme purpose
                                try {
                                    Constant.getSfFuncion(mContext);
                                    themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                    tintList = ColorStateList.valueOf(Color.parseColor(themColor));

                                    try {
                                        if (themColor.equals("#ff0080")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#00A3E9")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#7adf2a")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#ec0001")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#16f3ff")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#FF8A00")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#7F7F7F")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#D9B845")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#346667")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#9846D9")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else if (themColor.equals("#A81010")) {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        } else {
                                            link.setTextColor(Color.parseColor(themColor));
                                            linkActualUrl.setTextColor(Color.parseColor(themColor));
                                        }
                                    } catch (Exception ignored) {
                                    }
                                } catch (Exception ignored) {
                                }

                                try {
                                    // todo after sqlite
                                    try {
                                        linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());

                                        if (linkPreviewModel.getUrl().equals("")) {
                                            linkActualUrl.setVisibility(View.VISIBLE);
                                            linkActualUrl.setText(model.getMessage());
                                            linkActualUrl.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                            link.setVisibility(View.GONE);
                                            linkTitle.setVisibility(View.GONE);
                                            linkImg.setVisibility(View.GONE);
                                            linkImg2.setVisibility(View.GONE);
                                            linkDesc.setVisibility(View.GONE);
                                            link.setVisibility(View.GONE);
                                        } else {
                                            linkActualUrl.setVisibility(View.GONE);
                                            link.setVisibility(View.VISIBLE);
                                            linkTitle.setVisibility(View.VISIBLE);
                                            linkImg.setVisibility(View.VISIBLE);
                                            linkImg2.setVisibility(View.VISIBLE);

                                            if (linkPreviewModel.getDescription().equals("")) {
                                                linkDesc.setVisibility(View.GONE);
                                            } else {
                                                linkDesc.setVisibility(View.VISIBLE);
                                                linkDesc.setText(linkPreviewModel.getDescription());
                                            }

                                            if (linkPreviewModel.getImage_url().equals("")) {
                                                linkImg.setVisibility(View.GONE);
                                            } else {
                                                linkImg.setVisibility(View.VISIBLE);
                                                try {
                                                    ImageView targetImageView = linkImg;
                                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                                    Constant.loadImageIntoView(mContext, linkPreviewModel.getImage_url(), requestOptions, targetImageView, parentLayout, position, false, model, videoicon);
                                                } catch (Exception e) {
                                                }
                                            }

                                            if (linkPreviewModel.getFavIcon().equals("")) {
                                                linkImg2.setImageResource(R.drawable.link_fav);
                                            } else {
                                                linkImg2.setVisibility(View.VISIBLE);
                                                try {
                                                    Constant.loadSimpleImage(holder.itemView.getContext(), linkPreviewModel.getFavIcon(), linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                                } catch (Exception e) {
                                                }
                                            }

                                            if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                                linkImg.setVisibility(View.VISIBLE);
                                            }

                                            linkTitle.setText(linkPreviewModel.getTitle());
                                            link.setText(linkPreviewModel.getUrl());
                                            link.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                        }

                                        Log.d("TAG", "onBindViewHolder: " + linkPreviewModel.getTitle());
                                    } catch (Exception e) {
                                        // Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                    }

                                    RichPreview richPreview = new RichPreview(new ResponseListener() {
                                        @Override
                                        public void onData(MetaData metaData) {
                                            // todo here need to store data to sqllite
                                            if (otherFunctions.isInternetConnected(mContext)) {
                                                try {
                                                    new DatabaseHelper(mContext).insert_linkPreviewTable(mContext, model.getModelId(), metaData.getUrl(), metaData.getTitle(), metaData.getDescription(), metaData.getFavicon(), metaData.getImageurl());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }
                                                if (position == messageList.size() - 1) {
                                                    // todo after sqlite
                                                    try {
                                                        linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());

                                                        if (linkPreviewModel.getUrl().equals("")) {
                                                            linkActualUrl.setVisibility(View.VISIBLE);
                                                            linkActualUrl.setText(model.getMessage());
                                                            linkActualUrl.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                                            link.setVisibility(View.GONE);
                                                            linkTitle.setVisibility(View.GONE);
                                                            linkImg.setVisibility(View.GONE);
                                                            linkImg2.setVisibility(View.GONE);
                                                            linkDesc.setVisibility(View.GONE);
                                                            link.setVisibility(View.GONE);
                                                        } else {
                                                            linkActualUrl.setVisibility(View.GONE);
                                                            link.setVisibility(View.VISIBLE);
                                                            linkTitle.setVisibility(View.VISIBLE);
                                                            linkImg.setVisibility(View.VISIBLE);
                                                            linkImg2.setVisibility(View.VISIBLE);

                                                            if (linkPreviewModel.getDescription().equals("")) {
                                                                linkDesc.setVisibility(View.GONE);
                                                            } else {
                                                                linkDesc.setVisibility(View.VISIBLE);
                                                                linkDesc.setText(linkPreviewModel.getDescription());
                                                            }

                                                            if (linkPreviewModel.getImage_url().equals("")) {
                                                                linkImg.setVisibility(View.GONE);
                                                            } else {
                                                                linkImg.setVisibility(View.VISIBLE);
                                                                try {
                                                                    ImageView targetImageView = linkImg;
                                                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                                                    Constant.loadImageIntoView(mContext, linkPreviewModel.getImage_url(), requestOptions, targetImageView, parentLayout, position, false, model, videoicon);
                                                                } catch (Exception e) {
                                                                }
                                                            }

                                                            if (linkPreviewModel.getFavIcon().equals("")) {
                                                                linkImg2.setImageResource(R.drawable.link_fav);
                                                            } else {
                                                                linkImg2.setVisibility(View.VISIBLE);
                                                                try {
                                                                    Constant.loadSimpleImage(linkImg2.getContext(), linkPreviewModel.getFavIcon(), linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                                                } catch (Exception e) {
                                                                }
                                                            }

                                                            if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                                                linkImg.setVisibility(View.VISIBLE);
                                                            }

                                                            linkTitle.setText(linkPreviewModel.getTitle());
                                                            link.setText(linkPreviewModel.getUrl());
                                                            link.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                                        }
                                                    } catch (Exception e) {
                                                    }
                                                }
                                            }
                                        }

                                        @Override
                                        public void onError(Exception e) {
                                            Log.d("RICHLINK", "onError: " + e.getMessage());
                                        }
                                    });

                                    richPreview.getPreview(model.getMessage());
                                } catch (Exception ignored) {
                                    Log.d("TAG", "vsdvdsvs: " + ignored.getMessage());
                                }

                               sendMessage.setVisibility(View.GONE);
                            } else {
                                sendMessage.setVisibility(View.VISIBLE);
                                richLinkViewLyt.setVisibility(View.GONE);
                               sendMessage.setVisibility(View.VISIBLE);
                            }

                            senderImg.setVisibility(View.GONE);
                            senderImgLyt.setVisibility(View.GONE);
                            senderVideo.setVisibility(View.GONE);
                            sendervideoLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);

// Always show viewnew
                            viewnew.setVisibility(View.VISIBLE);

// todo readmore
                            if (model.getMessage().length() >= 200) {
                                readMore.setVisibility(View.VISIBLE);
                                sendMessage.setText(model.getMessage().substring(0, 200));
                            } else {
                                readMore.setVisibility(View.GONE);
                                sendMessage.setText(model.getMessage());
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                // here need to visible
                                // important views
                                // this is for image caption
                                // TODO: 03/09/25 NEW REPLY CONTENT ------------------------------------------
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                sendMessage.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                miceReply.setVisibility(View.GONE);
                                // TODO: 03/09/25 kay kay gayab honar aahe Repl key madhe
                                // image, document, voice_recording, video, contact
                                // TODO: 03/09/25 NEW REPLY CONTENT ------------------------------------------

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    senderImg.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    senderVideo.setVisibility(View.GONE);
                                    sendervideoLyt.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);

                                    String truncatedText = otherFunctions.truncateTextToWords(model.getReplyOldData(), 15);
                                    msgreplyText.setText(truncatedText);
                                    repliedData.setText(model.getReplytextData());
                                    // TODO: 03/09/25 IMP FOR REPLY
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));
                                }

                                Drawable drawableLeft = mContext.getResources().getDrawable(R.drawable.deleteiconnewsvg);
                                int paddingLeft = 0;
                                sendMessage.setCompoundDrawablePadding(paddingLeft);
                                drawableLeft.setBounds(0, 0, 50, 50);
                                sendMessage.setCompoundDrawablesRelativeWithIntrinsicBounds(null, null, null, null);
                                MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            } else {
                                // TODO: 03/09/25 NEW REPLY CONTENT
                                replylyoutGlobal.setVisibility(View.GONE);

                                imgcardview.setVisibility(View.GONE);

                                String content = model.getMessage();
                                switch (Constant.analyzeTextContent(content)) {
                                    case "only_emoji":
                                        System.out.println("The text contains only emojis.");
                                        // Handle emoji-only logic here
                                        int emojiCount = Constant.countEmojis(model.getMessage());
                                        System.out.println("Emoji detected! " + model.getMessage() + " " + emojiCount);

                                        if (emojiCount == 1) {
                                            sendMessage.setText(model.getMessage()); // Set formatted text
                                            MainSenderBox.setBackground(null); // Set formatted text
                                            // Hide viewnew for single emoji or if same timestamp as next message
                                            if (hasSameTimestamp) {
                                                viewnew.setVisibility(View.VISIBLE);
                                            } else {
                                                viewnew.setVisibility(View.VISIBLE); // Single emoji always hides viewnew
                                            }
                                            sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 80);
                                            // Add tap listener to animate emoji on tap
                                            Constant.setupEmojiTapAnimation(sendMessage, model.getMessage());
                                        } else if (emojiCount == 2) {
                                            sendMessage.setText(model.getMessage()); // Set formatted text
                                            MainSenderBox.setBackground(null); // Set formatted text
                                            // Always show viewnew
                                            viewnew.setVisibility(View.VISIBLE);
                                            sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 45);
                                        } else if (emojiCount == 3) {
                                            sendMessage.setText(model.getMessage()); // Set formatted text
                                            MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                            // Always show viewnew
                                            viewnew.setVisibility(View.VISIBLE);
                                            MainSenderBox.setBackground(null); // Set formatted text
                                        } else if (emojiCount == 4) {
                                            sendMessage.setText(model.getMessage()); // Set formatted text
                                            MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                            // Always show viewnew
                                            viewnew.setVisibility(View.VISIBLE);
                                            sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        } else {
                                            sendMessage.setText(model.getMessage()); // Set formatted text
                                            MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                            // Always show viewnew
                                            viewnew.setVisibility(View.VISIBLE);
                                            sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        }
                                        break;

                                    case "text_and_emoji":
                                        System.out.println("The text contains both text and emojis.");
                                        // Handle mixed text + emoji logic here
                                        MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                        // Always show viewnew
                                        viewnew.setVisibility(View.VISIBLE);
                                        sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        break;

                                    case "only_text":
                                        System.out.println("The text contains only text.");
                                        // Handle text-only logic here
                                        MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                        // Always show viewnew
                                        viewnew.setVisibility(View.VISIBLE);
                                        sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        break;

                                    default:
                                        System.out.println("Unexpected content.");
                                        MainSenderBox.setBackgroundResource(R.drawable.message_bg_blue); // Set formatted text
                                        // Always show viewnew
                                        viewnew.setVisibility(View.VISIBLE);
                                        sendMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        break;
                                }

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }
                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);
                            }


                            // todo below is no change make it as it is
                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            if (model.getMessage().equals("You deleted this message")) {
                                copy.setVisibility(View.GONE);
                            } else {
                                copy.setVisibility(View.VISIBLE);
                                copy.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                        ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                        clipboardManager.setPrimaryClip(clipData);
                                        Log.d("TAG", "onClick: " + model.getMessage());
                                        BlurHelper.dialogLayoutColor.dismiss();
                                    }
                                });
                            }


                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    Log.d("postiodsjnnjcasjncls", "" + holder.getAdapterPosition());


                                    ((senderViewHolder) holder).menu2.setVisibility(View.GONE);
                                    String data = model.getModelId();
                                    Log.d("data90901", model.getReceiverUid() + model.getUid());

                                    /// Need to store delete key data here

                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();

                                    BlurHelper.dialogLayoutColor.dismiss();

                                    long currentTimeStamp = Constant.getCurrentTimestamp();
                                    long pastTimeStamp = model.getTimestamp();
                                    long currentMillis = currentTimeStamp;
                                    long pastMillis = pastTimeStamp;
                                    long diffMillis = currentMillis - pastMillis;
                                    long totalHours = diffMillis / (1000 * 60 * 60);
                                    double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                    System.out.println("Total Hours: " + totalHours);
                                    System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                    if (totalHours <= 24) {
                                        /// model.getReceiverUid() + model.getUid() - (receiverRoom)
                                        database.getReference().child(Constant.CHAT).child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {

                                                    @Override
                                                    public void onSuccess(Void unused) {

                                                        // todo here we need to delete from sqlLite database

                                                        try {
                                                            new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                        } catch (Exception e) {
                                                            throw new RuntimeException(e);
                                                        }

                                                        senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                        Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                                    }
                                                });

                                            }
                                        });
                                    } else {


                                        /// model.getReceiverUid() + model.getUid() - (receiverRoom)
                                        database.getReference().child(Constant.CHAT).child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                // todo here we need to delete from sqlLite database

                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }

                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                            }
                                        });
                                    }


                                }
                            });

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);
                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    //TODO : for only network loader Themes

                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            int listcount = forwardNameList.size();
                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());

                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());
                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);


                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }


                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);
                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }

                                                    if (finalI == forwardNameList.size() - 1) {
                                                        if (listcount == 1) {
                                                            Intent intent = new Intent(mContext, chattingScreen.class);
                                                            intent.putExtra("nameKey", forwardModel.getName());
                                                            intent.putExtra("captionKey", "");
                                                            intent.putExtra("photoKey", "");
                                                            intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                            intent.putExtra("msgLmtKey", "");
                                                            intent.putExtra("ecKey", "ecKey");
                                                            intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                            intent.putExtra("deviceType", "");
                                                            intent.putExtra("fromInviteKey", "fromInviteKey");
                                                            intent.putExtra("forwardShort", "forwardShort");
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();


                                                        } else {
                                                            Intent intent = new Intent(mContext, MainActivityOld.class);
                                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                            Constant.bottomSheetDialog.dismiss();

                                                        }
                                                    }
                                                });


                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });


                            return true;
                        }
                    });


                    // here to uodate current position


                } else
                if (model.getDataType().equals(Constant.contact)) {

                    ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                    ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                    ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);

                    ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                    ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                    ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                    ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                    // Always show viewnew
                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                    ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);

                    //onclick listener for viewContact


                    if (model.getReplyKey().equals(Constant.ReplyKey)) {

                        // TODO: 03/09/25  NEW REPLY  CONTENT
                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).contactContainerReply.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).imgcardview.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                        ((senderViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).miceReply.setVisibility(View.GONE);
                        // this is for image caption
                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
//                        //here need to visible
//                        // important views
                        ((senderViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        Log.d("0909887", model.getReplyKey());

                        if (model.getReplyType().equals(Constant.Text)) {


                            ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                            ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);

                            ((senderViewHolder) holder).cName.setText(model.getName());
                            ((senderViewHolder) holder).cPhone.setText(model.getPhone());
                            ((senderViewHolder) holder).cnamenamelyt.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).firstText.setText(model.getReplyOldData());
                            ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);

                            ((senderViewHolder) holder).viewContact.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((senderViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                            ((senderViewHolder) holder).msgreplyText.setText("Contact");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.contact);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));

                            String text = model.getName();
                            String[] words = text.split(" ");
                            String firstWord = words[0];

                            ((senderViewHolder) holder).firstTextReply.setText(firstWord);


                        }
                        ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {

                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                        ((senderViewHolder) holder).contactContainer.setVisibility(View.VISIBLE);

                        // this is for image caption
                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                        ((senderViewHolder) holder).viewContact.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).cnamenamelyt.setVisibility(View.VISIBLE);

                        ((senderViewHolder) holder).cName.setText(model.getName());
                        ((senderViewHolder) holder).cPhone.setText(model.getPhone());
                        String text = model.getName();
                        String[] words = text.split(" ");
                        String firstWord = words[0];
                        ((senderViewHolder) holder).firstText.setText(firstWord);


                        final float scale = mContext.getApplicationContext().getResources().getDisplayMetrics().density;
                        int pixels = (int) (170 * scale + 0.5f);

                        ViewGroup.LayoutParams params = ((senderViewHolder) holder).viewContact.getLayoutParams();
                        params.width = LinearLayout.LayoutParams.MATCH_PARENT;
                        ((senderViewHolder) holder).viewContact.setLayoutParams(params);


                    }
                    ((senderViewHolder) holder).sendLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            ((senderViewHolder) holder).viewContact.performClick();
                        }
                    });
                    ((senderViewHolder) holder).viewContact.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {

                                //after click on viewcontact

                                Constant.bottomsheetContact(mContext, R.layout.view_contact_btmsheet_lyt);
                                Constant.bottomSheetDialogContact.show();
                                TextView createContact = Constant.bottomSheetDialogContact.findViewById(R.id.createContact);
                                TextView existingContact = Constant.bottomSheetDialogContact.findViewById(R.id.existingContact);
                                LinearLayout cancel = Constant.bottomSheetDialogContact.findViewById(R.id.cancel);

                                createContact.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Constant.bottomSheetDialogContact.dismiss();
                                        Constant.bottomsheetContact(mContext, R.layout.create_contact_layout_bottom);
                                        Constant.bottomSheetDialogContact.show();
                                        TextView cancel = Constant.bottomSheetDialogContact.findViewById(R.id.cancel);
                                        TextView save = Constant.bottomSheetDialogContact.findViewById(R.id.save);
                                        TextView mobile = Constant.bottomSheetDialogContact.findViewById(R.id.mobile);
                                        EditText firstname = Constant.bottomSheetDialogContact.findViewById(R.id.firstname);
                                        EditText lastName = Constant.bottomSheetDialogContact.findViewById(R.id.lastName);
                                        EditText phone = Constant.bottomSheetDialogContact.findViewById(R.id.phoneNumber);

                                        try {
                                            Constant.getSfFuncion(mContext);
                                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));

                                            cancel.setTextColor(Color.parseColor(themColor));
                                            save.setTextColor(Color.parseColor(themColor));
                                            mobile.setTextColor(Color.parseColor(themColor));

                                        } catch (Exception ignored) {

                                        }

                                        String[] nameParts = model.getName().split(" ", 2);

                                        // Assuming the first part is the first name and the second part is the last name
                                        String firstNameString = nameParts[0];
                                        firstname.setText(firstNameString);
                                        try {
                                            String lastNameString = nameParts[1];
                                            lastName.setText(lastNameString);
                                        } catch (Exception ignored) {
                                        }


                                        phone.setText(model.getPhone());

                                        cancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Constant.bottomSheetDialogContact.dismiss();
                                            }
                                        });

                                        save.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {

                                                // Check for permission before accessing contacts
                                                if (ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
                                                    // Permission is not granted, request it
                                                    ActivityCompat.requestPermissions(mActivity, new String[]{Manifest.permission.WRITE_CONTACTS}, 74);

                                                } else {


                                                    ArrayList<ContentProviderOperation> operations = new ArrayList<>();
                                                    operations.add(ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI).withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null).withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null).build());

                                                    operations.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0).withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, firstname.getText().toString() + " " + lastName.getText().toString()).build());

                                                    operations.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0).withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phone.getText().toString()).withValue(ContactsContract.CommonDataKinds.Phone.TYPE, ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE).build());

                                                    try {
                                                        mContext.getContentResolver().applyBatch(ContactsContract.AUTHORITY, operations);
                                                        Constant.bottomSheetDialogContact.dismiss();
                                                    } catch (RemoteException |
                                                             OperationApplicationException e) {
                                                        e.printStackTrace();
                                                    }
                                                    Toast.makeText(mContext, "Contact saved successfully", Toast.LENGTH_SHORT).show();
                                                }

                                            }
                                        });

                                    }
                                });
                                existingContact.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {


                                        Constant.bottomSheetDialogContact.dismiss();
                                        Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
                                        ((Activity) mContext).startActivityForResult(intent, 7185);

                                        phone2Contact.setText(model.getPhone());


                                    }
                                });
                                cancel.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Constant.bottomSheetDialogContact.dismiss();
                                    }
                                });


                            }
                        }
                    });
                    ((senderViewHolder) holder).sendLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            // todo this is why preview hold on a exact location " v "

                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                            TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                            TextView cName = BlurHelper.dialogLayoutColor.findViewById(R.id.cName);
                            TextView cPhone = BlurHelper.dialogLayoutColor.findViewById(R.id.cPhone);
                            TextView firstText = BlurHelper.dialogLayoutColor.findViewById(R.id.firstText);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                            RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout viewContact = BlurHelper.dialogLayoutColor.findViewById(R.id.viewContact);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            LinearLayout cnamenamelyt = BlurHelper.dialogLayoutColor.findViewById(R.id.cnamenamelyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                            emojiLongRec.startAnimation(fadeIn);


                            LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                            LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);

                            int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                            if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                // Dark mode is active
                                Constant.getSfFuncion(mContext);
                                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                ColorStateList tintList;

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#00A3E9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#7adf2a")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#ec0001")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#16f3ff")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#FF8A00")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#7F7F7F")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#D9B845")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#346667")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#9846D9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#A81010")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }
                                } catch (Exception ignored) {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                    MainSenderBox.setBackgroundTintList(tintList);
                                    richBox.setBackgroundTintList(tintList);


                                }


                            } else {
                                tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value


                            }


                            // todo theme
                            try {

                                Constant.getSfFuncion(mContext);
                                themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#00A3E9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7adf2a")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#ec0001")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#16f3ff")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#FF8A00")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7F7F7F")) {


                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    } else if (themColor.equals("#D9B845")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#346667")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#9846D9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#A81010")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    }
                                } catch (Exception ignored) {

                                    viewnew.setBackgroundTintList(tintList);
                                    readMore.setTextColor(Color.parseColor(themColor));

                                }


                            } catch (Exception ignored) {
                            }
                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                            cardview.startAnimation(animationdd);
                            sendTime.setText(model.getTime());


                            // todo main logic starting from now
                            replylyoutGlobal.setVisibility(View.GONE);
                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);

                            senderVideo.setVisibility(View.GONE);
                            sendervideoLyt.setVisibility(View.GONE);
                            sendMessage.setVisibility(View.GONE);
                            senderImg.setVisibility(View.GONE);
                            senderImgLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
// Always show viewnew
                            viewnew.setVisibility(View.VISIBLE);
                            miceContainer.setVisibility(View.GONE);

//onclick listener for viewContact

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                // TODO: 03/09/25 NEW REPLY CONTENT
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                contactContainerReply.setVisibility(View.VISIBLE);
                                sendMessage.setVisibility(View.GONE);
                                senderImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);
                                senderImg.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                contactContainer.setVisibility(View.GONE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                miceReply.setVisibility(View.GONE);
                                // this is for image caption
                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }
                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);
                                Log.d("0909887", model.getReplyKey());

                                if (model.getReplyType().equals(Constant.Text)) {
                                    contactContainer.setVisibility(View.GONE);
                                    sendMessage.setVisibility(View.GONE);
                                    senderImg.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    senderVideo.setVisibility(View.GONE);
                                    sendervideoLyt.setVisibility(View.GONE);

                                    cName.setText(model.getName());
                                    cPhone.setText(model.getPhone());
                                    cnamenamelyt.setVisibility(View.VISIBLE);
                                    firstText.setText(model.getReplyOldData());
                                    miceContainer.setVisibility(View.GONE);

                                    viewContact.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                                    msgreplyText.setText("Contact");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.contact);
                                    int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));

                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                            mContext.getResources().getDisplayMetrics()));

                                    String text = model.getName();
                                    String[] words = text.split(" ");
                                    String firstWord = words[0];
                                    firstTextReply.setText(firstWord);
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                contactContainer.setVisibility(View.VISIBLE);

                                // this is for image caption
                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }
                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);

                                viewContact.setVisibility(View.VISIBLE);
                                cnamenamelyt.setVisibility(View.VISIBLE);

                                cName.setText(model.getName());
                                cPhone.setText(model.getPhone());
                                String text = model.getName();
                                String[] words = text.split(" ");
                                String firstWord = words[0];
                                firstText.setText(firstWord);

                                final float scale = mContext.getApplicationContext().getResources().getDisplayMetrics().density;
                                int pixels = (int) (170 * scale + 0.5f);

                                ViewGroup.LayoutParams params = viewContact.getLayoutParams();
                                params.width = LinearLayout.LayoutParams.MATCH_PARENT;
                                viewContact.setLayoutParams(params);
                            }


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);

                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            copy.setVisibility(View.GONE);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);
                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);

                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);
                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            String modelId = database.getReference().push().getKey();
                                            int listcount = forwardNameList.size();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;

                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());

                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);


                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();


                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }

                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });
                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    ((senderViewHolder) holder).menu2.setVisibility(View.GONE);
                                    BlurHelper.dialogLayoutColor.dismiss();

                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();

                                    long currentTimeStamp = Constant.getCurrentTimestamp();
                                    long pastTimeStamp = model.getTimestamp();
                                    long currentMillis = currentTimeStamp;
                                    long pastMillis = pastTimeStamp;
                                    long diffMillis = currentMillis - pastMillis;
                                    long totalHours = diffMillis / (1000 * 60 * 60);
                                    double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                    System.out.println("Total Hours: " + totalHours);
                                    System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                    if (totalHours <= 24) {
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                    @Override
                                                    public void onSuccess(Void unused) {
                                                        // todo here we need to delete from sqlLite database

                                                        try {
                                                            new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                        } catch (Exception e) {
                                                            throw new RuntimeException(e);
                                                        }
                                                        senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                        Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                                    }
                                                });

                                            }
                                        });
                                    } else {
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                // todo here we need to delete from sqlLite database

                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }
                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                            }
                                        });
                                    }


                                }
                            });
                            return true;
                        }
                    });


                } else
                if (model.getDataType().equals(Constant.voiceAudio)) {
                    Log.d("3456789", "voiceAudio: " + "1");

                    // Debug voice audio message details
                    Log.d("VoiceAudioDebug", "Voice audio message detected in onBindViewHolder:");
                    Log.d("VoiceAudioDebug", "  - Document URL: " + model.getDocument());
                    Log.d("VoiceAudioDebug", "  - File Name: " + model.getFileName());
                    Log.d("VoiceAudioDebug", "  - Mice Timing: " + model.getMiceTiming());
                    Log.d("VoiceAudioDebug", "  - Model ID: " + model.getModelId());

                    ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);
                    ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                    ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "2");
                    ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "3");
                    ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "4");
                    ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "5");
                    // Always show viewnew
                    ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                    Log.d("3456789", "voiceAudio: " + "6");
                    ((senderViewHolder) holder).miceTiming.setText(model.getMiceTiming());
                    Log.d("3456789", "voiceAudio: " + "7");
                    ((senderViewHolder) holder).miceTiming.setVisibility(View.VISIBLE);
                    Log.d("3456789", "voiceAudio: " + "8");

                    Log.d("3456789", "voiceAudio: " + "9");
                    ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "10");
                    ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "11");
                    ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "12");
                    ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "13");
                    ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    Log.d("3456789", "voiceAudio: " + "14");


                    if (model.getReplyKey().equals(Constant.ReplyKey)) {


                        // TODO: 04/09/25  NEW REPLY
                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).miceReply.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).imgcardview.setVisibility(View.GONE);
                        ((senderViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                        ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.GONE);

                        ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);

                        ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.GONE);
                        Log.d("3456789", "voiceAudio: " + "6");
                        // this is for image caption
                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

                        ((senderViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                        if (model.getReplyType().equals(Constant.Text)) {
                            ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                            ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((senderViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                            ((senderViewHolder) holder).msgreplyText.setText("Mic");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.micegray);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((senderViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));


                            ((senderViewHolder) holder).micePlay.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).miceTiming.setText(model.getMiceTiming());


                        }

                        ((senderViewHolder) holder).micePlay.setVisibility(View.GONE);
                        ((senderViewHolder) holder).miceTiming.setVisibility(View.GONE);
                        ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.GONE);
                        ((senderViewHolder) holder).downlaodAudio.setVisibility(View.GONE);
                        ((senderViewHolder) holder).progressBarAudio.setVisibility(View.GONE);
                        ((senderViewHolder) holder).downloadPercentageAudioSender.setVisibility(View.GONE);
                        ((senderViewHolder) holder).pauseButtonAudioSender.setVisibility(View.GONE);
                        ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else
                    {
                        ((senderViewHolder) holder).miceContainer.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);


                        ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.VISIBLE);
                        File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
                        if (!audiosDir.exists()) audiosDir.mkdirs();
                        File targetFile = new File(audiosDir, model.getFileName());




                        Log.d("3456789", "voiceAudio: " + "7");
                        // this is for image caption
                        if (!model.getCaption().equals("")) {
                            ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).captionText.setText(model.getCaption());
                        } else {
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        MediaPlayer mediaPlayer = new MediaPlayer();
                        ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((senderViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        Log.d("3456789", "voiceAudio: " + "8");
                        if (model.getForwaredKey().equals(Constant.forwordKey)) {
                            ((senderViewHolder) holder).forwarded.setVisibility(View.VISIBLE);
                        } else {
                            ((senderViewHolder) holder).forwarded.setVisibility(View.GONE);
                        }
                        Log.d("3456789", "voiceAudio: " + "9");

                        Log.d("3456789", "voiceAudio: " + "10");
                        ((senderViewHolder) holder).miceTiming.setText(model.getMiceTiming());
                        Log.d("3456789", "voiceAudio: " + "11");
                        ((senderViewHolder) holder).micePlay.setVisibility(View.VISIBLE);
                        Log.d("3456789", "voiceAudio: " + "12");


                    }



                    File docsDir;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                        docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
                    } else {
                        docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Audios");
                    }
                    if (!docsDir.exists()) docsDir.mkdirs();
                    File localDoc = new File(docsDir, model.getFileName());
                    boolean docExists = localDoc.exists();
                    ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.VISIBLE);
                    ((senderViewHolder) holder).progressBarAudio.setVisibility(View.GONE);
                    ((senderViewHolder) holder).downloadPercentageAudioSender.setVisibility(View.GONE);

                    ((senderViewHolder) holder).downlaodAudio.setVisibility(docExists ? View.GONE : View.VISIBLE);

                    ((senderViewHolder) holder).downlaodAudio.setOnClickListener(v -> {
                        // Handle multi-selection mode first
                        if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                            senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                            return;
                        }
                        senderReceiverDownload.startSenderAudioDownloadWithProgress(holder, model, mContext);
                    });



                    ((senderViewHolder) holder).micePlay.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {
                                Log.d("micePlayDebug", "micePlay clicked!");

                                // Get audio details from the model
                                String audioUrl = model.getDocument(); // URL or local path
                                String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                String localFilePath = null;

                                // Check for local file first
                                File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
                                Log.d("AudioDebug", "Checking audios directory: " + audiosDir.getAbsolutePath());
                                Log.d("AudioDebug", "Directory exists: " + audiosDir.exists() + ", isDirectory: " + audiosDir.isDirectory());

                                if (audiosDir.exists() && audiosDir.isDirectory()) {
                                    // List all files in the directory for debugging
                                    File[] files = audiosDir.listFiles();
                                    if (files != null) {
                                        Log.d("AudioDebug", "Files in audios directory: " + files.length);
                                        for (File file : files) {
                                            Log.d("AudioDebug", "File: " + file.getName() + " (size: " + file.length() + " bytes)");
                                        }
                                    }

                                    File localFile = new File(audiosDir, model.getFileName());
                                    Log.d("AudioDebug", "Looking for file: " + model.getFileName());
                                    Log.d("AudioDebug", "Full path: " + localFile.getAbsolutePath());

                                    if (localFile.exists() && localFile.isFile() && localFile.length() > 0) {
                                        localFilePath = localFile.getAbsolutePath();
                                        // Use file:// protocol for local files to ensure proper MediaPlayer handling
                                        audioUrl = "file://" + localFilePath;
                                        Log.d("AudioDebug", "✅ Local file found and valid: " + localFilePath);
                                        Log.d("AudioDebug", "Audio URL with file://: " + audioUrl);
                                        Log.d("AudioDebug", "File size: " + localFile.length() + " bytes");
                                    } else {
                                        Log.d("AudioDebug", "❌ Local file not found or invalid: " + localFile.getAbsolutePath());
                                        Log.d("AudioDebug", "File exists: " + localFile.exists() + ", isFile: " + localFile.isFile() + ", length: " + (localFile.exists() ? localFile.length() : "N/A"));

                                        // Try alternative paths
                                        String[] alternativePaths = {"/storage/emulated/0/Android/data/com.Appzia.enclosure/files/Documents/Enclosure/Media/Audios", "/storage/emulated/0/Android/data/com.Appzia.enclosure/files/Enclosure/Media/Audios", Environment.getExternalStorageDirectory() + "/Enclosure/Media/Audios"};

                                        for (String altPath : alternativePaths) {
                                            File altDir = new File(altPath);
                                            if (altDir.exists() && altDir.isDirectory()) {
                                                File altFile = new File(altDir, model.getFileName());
                                                if (altFile.exists() && altFile.isFile() && altFile.length() > 0) {
                                                    localFilePath = altFile.getAbsolutePath();
                                                    audioUrl = "file://" + localFilePath;
                                                    Log.d("AudioDebug", "✅ Found file in alternative path: " + localFilePath);
                                                    Log.d("AudioDebug", "File size: " + altFile.length() + " bytes");
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    Log.d("AudioDebug", "❌ Audios directory not found: " + audiosDir.getAbsolutePath());
                                }

                                Log.d("AudioDebug", "Final audioUrl: " + audioUrl);
                                Log.d("AudioDebug", "Final localFilePath: " + localFilePath);

                                // Start foreground service for notification
                                Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                serviceIntent.putExtra("audioUrl", audioUrl);
                                serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                serviceIntent.putExtra("songTitle", songTitle);
                                serviceIntent.putExtra("localFilePath", localFilePath);
                                serviceIntent.putExtra("modelId", model.getModelId());
                                serviceIntent.putExtra("position", holder.getAdapterPosition());
                                ContextCompat.startForegroundService(mContext, serviceIntent);

                                // Show the bottom sheet
                                try {
                                    if (mContext instanceof AppCompatActivity) {
                                        Log.d("AudioDebug", "Showing MusicPlayerBottomSheet...");
                                        MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                        if (bottomSheet != null) {
                                            bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                            Log.d("AudioDebug", "✅ MusicPlayerBottomSheet shown successfully");
                                        } else {
                                            Log.e("AudioDebug", "❌ Failed to create MusicPlayerBottomSheet instance");
                                        }
                                    } else {
                                        Log.e("AudioDebug", "❌ mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                        Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                    }
                                } catch (Exception e) {
                                    Log.e("AudioDebug", "❌ Error showing MusicPlayerBottomSheet: " + e.getMessage(), e);
                                    Toast.makeText(mContext, "Error showing player: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                                }
                            }
                        }
                    });

                    ((senderViewHolder) holder).sendLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {
                                Log.d("micePlayDebug", "micePlay clicked!");

                                // Get audio details from the model
                                String audioUrl = model.getDocument(); // URL or local path
                                String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                String localFilePath = null;

                                Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                Log.e("3456yhjkldxwaxa", "onClick: " + model.getFileName());

                                File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");

                                if (audiosDir != null) {
                                    String altPath = new File(audiosDir, model.getFileName()).getAbsolutePath();
                                    if (otherFunctions.doesFileExist(altPath)) {
                                        localFilePath = altPath;
                                        audioUrl = altPath;
                                        Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                    }
                                }

                                // Start foreground service for notification
                                Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                serviceIntent.putExtra("audioUrl", audioUrl);
                                serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                serviceIntent.putExtra("songTitle", songTitle);
                                serviceIntent.putExtra("localFilePath", localFilePath);
                                serviceIntent.putExtra("modelId", model.getModelId());
                                serviceIntent.putExtra("position", holder.getAdapterPosition());
                                ContextCompat.startForegroundService(mContext, serviceIntent);

                                // Show the bottom sheet
                                if (mContext instanceof AppCompatActivity) {
                                    MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                    bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                } else {
                                    //   Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                    Log.e("MusicPlayer", "mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                }
                            }
                        }
                    });
                    ((senderViewHolder) holder).sendLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {
//                            if (((senderViewHolder) holder).menu2.getVisibility() == View.VISIBLE) {
//                                ((senderViewHolder) holder).menu2.setVisibility(View.GONE);
//
//
//                            } else if (((senderViewHolder) holder).menu2.getVisibility() == View.GONE) {
//                                ((senderViewHolder) holder).menu2.setVisibility(View.VISIBLE);
//
//                                notifyDataSetChanged();
//                            }


                            // todo this is why preview hold on a exact location " v "
                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                            TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView forwarded = BlurHelper.dialogLayoutColor.findViewById(R.id.forwarded);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            TextView miceTiming = BlurHelper.dialogLayoutColor.findViewById(R.id.miceTiming);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                            RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView miceUImage = BlurHelper.dialogLayoutColor.findViewById(R.id.miceUImage);
                            ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            LinearProgressIndicator miceProgressbar = BlurHelper.dialogLayoutColor.findViewById(R.id.miceProgressbar);
                            AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout progresslyt = BlurHelper.dialogLayoutColor.findViewById(R.id.progresslyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                            AppCompatImageButton micePlay = BlurHelper.dialogLayoutColor.findViewById(R.id.micePlay);

                            LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                            LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                            RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                            FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                            ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                            TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                            ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                            emojiLongRec.startAnimation(fadeIn);

                            int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                            if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                // Dark mode is active
                                Constant.getSfFuncion(mContext);
                                String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                ColorStateList tintList;

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#00A3E9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#7adf2a")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#ec0001")) {

                                        tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#16f3ff")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#FF8A00")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#7F7F7F")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#D9B845")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#346667")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else if (themColor.equals("#9846D9")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    } else if (themColor.equals("#A81010")) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);

                                    } else {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }
                                } catch (Exception ignored) {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                    MainSenderBox.setBackgroundTintList(tintList);
                                    richBox.setBackgroundTintList(tintList);


                                }


                            } else {
                                tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value


                            }


                            // todo theme
                            try {

                                Constant.getSfFuncion(mContext);
                                themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                try {
                                    if (themColor.equals("#ff0080")) {
                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#00A3E9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7adf2a")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#ec0001")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#16f3ff")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#FF8A00")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#7F7F7F")) {


                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    } else if (themColor.equals("#D9B845")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#346667")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#9846D9")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else if (themColor.equals("#A81010")) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    } else {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));


                                    }
                                } catch (Exception ignored) {

                                    viewnew.setBackgroundTintList(tintList);
                                    readMore.setTextColor(Color.parseColor(themColor));

                                }


                            } catch (Exception ignored) {
                            }
                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                            cardview.startAnimation(animationdd);
                            sendTime.setText(model.getTime());

                            // todo main work starting from here
                            Log.d("3456789", "voiceAudio: " + "1");

// Debug voice audio message details
                            Log.d("VoiceAudioDebug", "Voice audio message detected in onBindViewHolder:");
                            Log.d("VoiceAudioDebug", "  - Document URL: " + model.getDocument());
                            Log.d("VoiceAudioDebug", "  - File Name: " + model.getFileName());
                            Log.d("VoiceAudioDebug", "  - Mice Timing: " + model.getMiceTiming());
                            Log.d("VoiceAudioDebug", "  - Model ID: " + model.getModelId());

                            replylyoutGlobal.setVisibility(View.GONE);
                            readMore.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "2");
                            richLinkViewLyt.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "3");
                            senderVideo.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "4");
                            sendervideoLyt.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "5");
// Always show viewnew
                            viewnew.setVisibility(View.VISIBLE);
                            Log.d("3456789", "voiceAudio: " + "6");
                            miceTiming.setText(model.getMiceTiming());
                            Log.d("3456789", "voiceAudio: " + "7");
                            miceTiming.setVisibility(View.VISIBLE);
                            Log.d("3456789", "voiceAudio: " + "8");

                            Log.d("3456789", "voiceAudio: " + "9");
                            sendMessage.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "10");
                            senderImg.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "11");
                            senderImgLyt.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "12");
                            docLyt.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "13");
                            contactContainer.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "14");

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                // TODO: 04/09/25 NEW REPLY
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                miceReply.setVisibility(View.VISIBLE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                sendMessage.setVisibility(View.GONE);
                                senderImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                senderImg.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                docLyt.setVisibility(View.GONE);
                                miceContainer.setVisibility(View.GONE);
                                audioDownloadControls.setVisibility(View.GONE);

                                miceContainer.setVisibility(View.GONE);
                                audioDownloadControls.setVisibility(View.GONE);
                                Log.d("3456789", "voiceAudio: " + "6");
                                // this is for image caption
                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    miceContainer.setVisibility(View.GONE);
                                    sendMessage.setVisibility(View.GONE);
                                    senderImg.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    senderVideo.setVisibility(View.GONE);
                                    sendervideoLyt.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                                    msgreplyText.setText("Mic");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.micegray);
                                    int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));

                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                            mContext.getResources().getDisplayMetrics()));

                                    micePlay.setVisibility(View.VISIBLE);
                                    miceTiming.setText(model.getMiceTiming());
                                }

                                micePlay.setVisibility(View.GONE);
                                miceTiming.setVisibility(View.GONE);
                                audioDownloadControls.setVisibility(View.GONE);
                                downlaodAudio.setVisibility(View.GONE);
                                progressBarAudio.setVisibility(View.GONE);
                                downloadPercentageAudioSender.setVisibility(View.GONE);
                                pauseButtonAudioSender.setVisibility(View.GONE);
                            } else {
                                miceContainer.setVisibility(View.VISIBLE);
                                replylyoutGlobal.setVisibility(View.GONE);

                                audioDownloadControls.setVisibility(View.VISIBLE);
                                File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
                                if (!audiosDir.exists()) audiosDir.mkdirs();
                                File targetFile = new File(audiosDir, model.getFileName());

                                if (targetFile.exists()) {
                                    Log.d("3456789", "voiceAudio: " + "3");
                                    downlaodAudio.setVisibility(View.GONE);
                                    progressBarAudio.setVisibility(View.GONE);
                                    downloadPercentageAudioSender.setVisibility(View.GONE);
                                    pauseButtonAudioSender.setVisibility(View.GONE);
                                } else {
                                    Log.d("3456789", "voiceAudio: " + "4");
                                    downlaodAudio.setVisibility(View.VISIBLE);
                                    progressBarAudio.setVisibility(View.GONE);
                                    downloadPercentageAudioSender.setVisibility(View.GONE);
                                    pauseButtonAudioSender.setVisibility(View.GONE);
                                    downlaodAudio.setOnClickListener(v5 -> {
                                        senderReceiverDownload.startSenderAudioDownloadWithProgress(holder, model, mContext);
                                    });
                                }

                                Log.d("3456789", "voiceAudio: " + "7");
                                // this is for image caption
                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }
                                MediaPlayer mediaPlayer = new MediaPlayer();
                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);
                                Log.d("3456789", "voiceAudio: " + "8");
                                if (model.getForwaredKey().equals(Constant.forwordKey)) {
                                    forwarded.setVisibility(View.VISIBLE);
                                } else {
                                    forwarded.setVisibility(View.GONE);
                                }
                                Log.d("3456789", "voiceAudio: " + "9");

                                Log.d("3456789", "voiceAudio: " + "10");
                                miceTiming.setText(model.getMiceTiming());
                                Log.d("3456789", "voiceAudio: " + "11");
                                micePlay.setVisibility(View.VISIBLE);
                                Log.d("3456789", "voiceAudio: " + "12");
                            }


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);

                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            copy.setVisibility(View.GONE);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);
                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);
                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            int listcount = forwardNameList.size();
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());


                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }

                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);

                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();


                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }


                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });
                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    ((senderViewHolder) holder).menu2.setVisibility(View.GONE);
                                    BlurHelper.dialogLayoutColor.dismiss();

                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();

                                    long currentTimeStamp = Constant.getCurrentTimestamp();
                                    long pastTimeStamp = model.getTimestamp();
                                    long currentMillis = currentTimeStamp;
                                    long pastMillis = pastTimeStamp;
                                    long diffMillis = currentMillis - pastMillis;
                                    long totalHours = diffMillis / (1000 * 60 * 60);
                                    double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                    System.out.println("Total Hours: " + totalHours);
                                    System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                    if (totalHours <= 24) {
                                        // older message
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                    @Override
                                                    public void onSuccess(Void unused) {
                                                        // todo here we need to delete from sqlLite database

                                                        try {
                                                            new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                        } catch (Exception e) {
                                                            throw new RuntimeException(e);
                                                        }
                                                        senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                        Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                                    }
                                                });

                                            }
                                        });
                                    } else {
                                        database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                // todo here we need to delete from sqlLite database

                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }
                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                            }
                                        });
                                    }


                                }
                            });
                            return true;
                        }
                    });


                } else {
                    ((senderViewHolder) holder).senderImgBunchLyt.setVisibility(View.GONE);

                    List<String> musicExtensions = Arrays.asList("mp3", "wav", "flac", "aac", "ogg", "oga", "m4a", "wma", "alac", "aiff");

                    String ext = model.getExtension();
                    if (ext != null && musicExtensions.contains(ext.toLowerCase())) {
                        // It's a music file

                        ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                        ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                        ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                        // Always show viewnew
                        ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);


                        Log.d("3456789", "voiceAudio: " + "2");
                        Log.d("3456789", "voiceAudio: " + "5");
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                        if (model.getReplyKey().equals(Constant.ReplyKey)) {


                            // TODO: 04/09/25  NEW REPLY
                            ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).pageLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).musicReply.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).imgcardview.setVisibility(View.GONE);
                            ((senderViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                            ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.GONE);
                            ((senderViewHolder) holder).miceReply.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "6");
                            // this is for image caption
                            if (!model.getCaption().equals("")) {
                                ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).captionText.setText(model.getCaption());

                            } else {
                                ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                            }

                            ((senderViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                            if (model.getReplyType().equals(Constant.Text)) {
                                ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                                ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                                ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                                ((senderViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                                ((senderViewHolder) holder).msgreplyText.setText("Music");
                                Drawable drawable = mContext.getResources().getDrawable(R.drawable.musical_note);
                                int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                drawable.setBounds(0, 0, size, size);
                                drawable.setTint(Color.parseColor("#78787A"));

                                ((senderViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                                ((senderViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                        mContext.getResources().getDisplayMetrics()));

                                ((senderViewHolder) holder).micePlay.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).miceTiming.setText(model.getMiceTiming());


                            }

                            ((senderViewHolder) holder).micePlay.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).miceTiming.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.GONE);
                            ((senderViewHolder) holder).downlaodAudio.setVisibility(View.GONE);
                            ((senderViewHolder) holder).progressBarAudio.setVisibility(View.GONE);
                            ((senderViewHolder) holder).downloadPercentageAudioSender.setVisibility(View.GONE);
                            ((senderViewHolder) holder).pauseButtonAudioSender.setVisibility(View.GONE);
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        } else {
                            ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                            ((senderViewHolder) holder).miceContainer.setVisibility(View.VISIBLE);

                            ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.VISIBLE);
                            File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                            if (!audiosDir.exists()) audiosDir.mkdirs();
                            File targetFile = new File(audiosDir, model.getFileName());

                            if (targetFile.exists()) {
                                Log.d("3456789", "voiceAudio: " + "3");
                                ((senderViewHolder) holder).downlaodAudio.setVisibility(View.GONE);
                                ((senderViewHolder) holder).progressBarAudio.setVisibility(View.GONE);
                                ((senderViewHolder) holder).downloadPercentageAudioSender.setVisibility(View.GONE);
                                ((senderViewHolder) holder).pauseButtonAudioSender.setVisibility(View.GONE);
                            } else {
                                Log.d("3456789", "voiceAudio: " + "4");
                                ((senderViewHolder) holder).downlaodAudio.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).progressBarAudio.setVisibility(View.GONE);
                                ((senderViewHolder) holder).downloadPercentageAudioSender.setVisibility(View.GONE);
                                ((senderViewHolder) holder).pauseButtonAudioSender.setVisibility(View.GONE);
                                ((senderViewHolder) holder).downlaodAudio.setOnClickListener(v -> {
                                    senderReceiverDownload.startSenderAudioDownloadWithProgressXDocument(holder, model, mContext);
                                });
                            }

                            Log.d("3456789", "voiceAudio: " + "7");
                            // this is for image caption
                            if (!model.getCaption().equals("")) {
                                ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).captionText.setText(model.getCaption());
                            } else {
                                ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                            }
                            MediaPlayer mediaPlayer = new MediaPlayer();
                            ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                            Log.d("3456789", "voiceAudio: " + "8");
                            if (model.getForwaredKey().equals(Constant.forwordKey)) {
                                ((senderViewHolder) holder).forwarded.setVisibility(View.VISIBLE);
                            } else {
                                ((senderViewHolder) holder).forwarded.setVisibility(View.GONE);
                            }
                            Log.d("3456789", "voiceAudio: " + "9");

                            Log.d("3456789", "voiceAudio: " + "10");
                            ((senderViewHolder) holder).miceTiming.setText(model.getMiceTiming());
                            Log.d("3456789", "voiceAudio: " + "11");
                            ((senderViewHolder) holder).micePlay.setVisibility(View.VISIBLE);
                            Log.d("3456789", "voiceAudio: " + "12");


                        }
                        ((senderViewHolder) holder).micePlay.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                    Constant.getSfFuncion(mContext);
                                    String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                    String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                    String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                    DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                    messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });


                                    DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                    messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {

                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                } else {
                                    Log.d("micePlayDebug", "micePlay clicked!");

                                    // Get audio details from the model
                                    String audioUrl = model.getDocument(); // URL or local path
                                    String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                    String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                    String localFilePath = null;

                                    File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");

                                    if (audiosDir != null) {
                                        String altPath = new File(audiosDir, model.getFileName()).getAbsolutePath();
                                        if (otherFunctions.doesFileExist(altPath)) {
                                            localFilePath = altPath;
                                            audioUrl = altPath;
                                            Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                        }
                                    }

                                    // Start foreground service for notification
                                    Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                    serviceIntent.putExtra("audioUrl", audioUrl);
                                    serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                    serviceIntent.putExtra("songTitle", songTitle);
                                    serviceIntent.putExtra("localFilePath", localFilePath);
                                    serviceIntent.putExtra("modelId", model.getModelId());
                                    serviceIntent.putExtra("position", holder.getAdapterPosition());
                                    ContextCompat.startForegroundService(mContext, serviceIntent);

                                    // Show the bottom sheet
                                    if (mContext instanceof AppCompatActivity) {
                                        MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                        bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                    } else {
                                        //   Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                        Log.e("MusicPlayer", "mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                    }
                                }
                            }
                        });
                        ((senderViewHolder) holder).itemView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                    Constant.getSfFuncion(mContext);
                                    String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                    String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                    String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                    DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                    messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });


                                    DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                    messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {

                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                } else {
                                    Log.d("micePlayDebug", "micePlay clicked!");

                                    // Get audio details from the model
                                    String audioUrl = model.getDocument(); // URL or local path
                                    String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                    String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                    String localFilePath = null;

                                    File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");

                                    if (audiosDir != null) {
                                        String altPath = new File(audiosDir, model.getFileName()).getAbsolutePath();
                                        if (otherFunctions.doesFileExist(altPath)) {
                                            localFilePath = altPath;
                                            audioUrl = altPath;
                                            Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                        }
                                    }

                                    // Start foreground service for notification
                                    Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                    serviceIntent.putExtra("audioUrl", audioUrl);
                                    serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                    serviceIntent.putExtra("songTitle", songTitle);
                                    serviceIntent.putExtra("localFilePath", localFilePath);
                                    serviceIntent.putExtra("modelId", model.getModelId());
                                    serviceIntent.putExtra("position", holder.getAdapterPosition());
                                    ContextCompat.startForegroundService(mContext, serviceIntent);

                                    // Show the bottom sheet
                                    if (mContext instanceof AppCompatActivity) {
                                        MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                        bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                    } else {
                                        //   Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                        Log.e("MusicPlayer", "mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                    }
                                }
                            }
                        });
                        ((senderViewHolder) holder).sendLinear.setOnLongClickListener(new View.OnLongClickListener() {
                            @Override
                            public boolean onLongClick(View v) {


                                // todo this is why preview hold on a exact location " v "
                                int[] location = new int[2];
                                v.getLocationOnScreen(location);
                                float touchX = location[0];
                                float touchY = location[1];


                                BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                                BlurHelper.dialogLayoutColor.show();
                                RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                                // Use boundary-aware positioning
                                BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                                TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                                TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                                TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                                TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                                TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                                TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                                TextView forwarded = BlurHelper.dialogLayoutColor.findViewById(R.id.forwarded);
                                TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                                TextView miceTiming = BlurHelper.dialogLayoutColor.findViewById(R.id.miceTiming);
                                RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                                RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                                RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                                ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                                ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                                ImageView miceUImage = BlurHelper.dialogLayoutColor.findViewById(R.id.miceUImage);
                                ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                                ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                                LinearProgressIndicator miceProgressbar = BlurHelper.dialogLayoutColor.findViewById(R.id.miceProgressbar);
                                AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                                LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                                LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                                LinearLayout progresslyt = BlurHelper.dialogLayoutColor.findViewById(R.id.progresslyt);
                                LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                                LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                                View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                                View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                                View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                                View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                                CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                                TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                                FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                                AppCompatImageButton micePlay = BlurHelper.dialogLayoutColor.findViewById(R.id.micePlay);

                                LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                                LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);

                                LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                                LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                                CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                                LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                                TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                                LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                                CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                                CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                                ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                                TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                                ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                                TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                                RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                                FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                                ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                                TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                                ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);


                                // TODO: 30/01/25  emoji header
                                RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                                LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                                Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                                addEmoji.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            Constant.Vibrator(mContext);
                                        }

                                        Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                        Constant.bottomSheetDialog.show();
                                        RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                        ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                        Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                    }
                                });
                                Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                                emojiLongRec.startAnimation(fadeIn);

                                int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                                if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                    // Dark mode is active
                                    Constant.getSfFuncion(mContext);
                                    String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                    ColorStateList tintList;

                                    try {
                                        if (themColor.equals("#ff0080")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#00A3E9")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#7adf2a")) {

                                            tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#ec0001")) {

                                            tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#16f3ff")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#FF8A00")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#7F7F7F")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#D9B845")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#346667")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#9846D9")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#A81010")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        }
                                    } catch (Exception ignored) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }


                                } else {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                    MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value


                                }


                                // todo theme
                                try {

                                    Constant.getSfFuncion(mContext);
                                    themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                    tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                    //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                    try {
                                        if (themColor.equals("#ff0080")) {
                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#00A3E9")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#7adf2a")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#ec0001")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#16f3ff")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#FF8A00")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#7F7F7F")) {


                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));

                                        } else if (themColor.equals("#D9B845")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#346667")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#9846D9")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#A81010")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        }
                                    } catch (Exception ignored) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    }


                                } catch (Exception ignored) {
                                }
                                Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                                cardview.startAnimation(animationdd);
                                sendTime.setText(model.getTime());

                                // todo main work starting from here
                                readMore.setVisibility(View.GONE);
                                richLinkViewLyt.setVisibility(View.GONE);
                                senderVideo.setVisibility(View.GONE);
                                sendervideoLyt.setVisibility(View.GONE);
                                viewnew.setVisibility(View.VISIBLE);
                                sendMessage.setVisibility(View.GONE);
                                senderImg.setVisibility(View.GONE);
                                senderImgLyt.setVisibility(View.GONE);
                                docLyt.setVisibility(View.GONE);
                                contactContainer.setVisibility(View.GONE);

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                    replylyoutGlobal.setVisibility(View.VISIBLE);
                                    pageLyt.setVisibility(View.GONE);
                                    musicReply.setVisibility(View.VISIBLE);
                                    sendMessage.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    imgcardview.setVisibility(View.GONE);
                                    contactContainerReply.setVisibility(View.GONE);
                                    senderImg.setVisibility(View.GONE);
                                    replyTheme.setBackgroundTintList(tintList);
                                    replyYou.setTextColor(Color.parseColor(themColor));
                                    docLyt.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    audioDownloadControls.setVisibility(View.GONE);
                                    miceReply.setVisibility(View.GONE);

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.VISIBLE);
                                    viewbarlyt1.setVisibility(View.GONE);

                                    if (model.getReplyType().equals(Constant.Text)) {
                                        miceContainer.setVisibility(View.GONE);
                                        sendMessage.setVisibility(View.GONE);
                                        senderImg.setVisibility(View.GONE);
                                        senderImgLyt.setVisibility(View.GONE);
                                        docLyt.setVisibility(View.GONE);
                                        contactContainer.setVisibility(View.GONE);
                                        senderVideo.setVisibility(View.GONE);
                                        sendervideoLyt.setVisibility(View.GONE);
                                        replydatalyt.setVisibility(View.VISIBLE);
                                        repliedData.setText(model.getReplytextData());
                                        repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                        ));
                                        msgreplyText.setText("Music");
                                        Drawable drawable = mContext.getResources().getDrawable(R.drawable.musical_note);
                                        int size = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                        );
                                        drawable.setBounds(0, 0, size, size);
                                        drawable.setTint(Color.parseColor("#78787A"));
                                        msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                        msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                        ));
                                        micePlay.setVisibility(View.VISIBLE);
                                        miceTiming.setText(model.getMiceTiming());
                                    }

                                    micePlay.setVisibility(View.VISIBLE);
                                    miceTiming.setVisibility(View.VISIBLE);
                                    audioDownloadControls.setVisibility(View.GONE);
                                    downlaodAudio.setVisibility(View.GONE);
                                    progressBarAudio.setVisibility(View.GONE);
                                    downloadPercentageAudioSender.setVisibility(View.GONE);
                                    pauseButtonAudioSender.setVisibility(View.GONE);
                                } else {
                                    replylyoutGlobal.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.VISIBLE);
                                    audioDownloadControls.setVisibility(View.VISIBLE);

                                    File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                    if (!audiosDir.exists()) audiosDir.mkdirs();
                                    File targetFile = new File(audiosDir, model.getFileName());

                                    if (targetFile.exists()) {
                                        downlaodAudio.setVisibility(View.GONE);
                                        progressBarAudio.setVisibility(View.GONE);
                                        downloadPercentageAudioSender.setVisibility(View.GONE);
                                        pauseButtonAudioSender.setVisibility(View.GONE);
                                    } else {
                                        downlaodAudio.setVisibility(View.VISIBLE);
                                        progressBarAudio.setVisibility(View.GONE);
                                        downloadPercentageAudioSender.setVisibility(View.GONE);
                                        pauseButtonAudioSender.setVisibility(View.GONE);
                                    }

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.GONE);
                                    viewbarlyt1.setVisibility(View.GONE);

                                    if (model.getForwaredKey().equals(Constant.forwordKey)) {
                                        forwarded.setVisibility(View.VISIBLE);
                                    } else {
                                        forwarded.setVisibility(View.GONE);
                                    }

                                    miceTiming.setText(model.getMiceTiming());
                                    micePlay.setVisibility(View.VISIBLE);
                                }


                                LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);

                                LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                                LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                                copy.setVisibility(View.GONE);
                                forward.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {


                                        BlurHelper.dialogLayoutColor.dismiss();
                                        Constant.bottomsheetforward(mContext);
                                        Constant.bottomSheetDialog.show();

                                        Constant.getSfFuncion(mContext);
                                        ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                        View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                        AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                        dx = Constant.viewShape.findViewById(R.id.dx);
                                        richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                        ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);
                                        recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                        namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                        forwardText = Constant.viewShape.findViewById(R.id.forward);
                                        LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                        try {

                                            Constant.getSfFuncion(mContext);
                                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                            try {
                                                if (themColor.equals("#ff0080")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                                } else if (themColor.equals("#00A3E9")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                } else if (themColor.equals("#7adf2a")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                                } else if (themColor.equals("#ec0001")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                                } else if (themColor.equals("#16f3ff")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                                } else if (themColor.equals("#FF8A00")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                                } else if (themColor.equals("#7F7F7F")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                                } else if (themColor.equals("#D9B845")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                                } else if (themColor.equals("#346667")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                                } else if (themColor.equals("#9846D9")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                                } else if (themColor.equals("#A81010")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                                } else {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                }
                                            } catch (Exception ignored) {

                                            }


                                        } catch (Exception ignored) {
                                        }
                                        if (otherFunctions.isInternetConnected(mContext)) {
                                            //TODO ONLINE
                                            networkLoader.setVisibility(View.GONE);
                                            try {
                                                // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();

                                                if (get_user_active_contact_forward_list.size() > 0) {
                                                    // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                    otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                    recyclerview.setVisibility(View.VISIBLE);
                                                } else {

                                                }
                                            } catch (Exception e) {
                                                Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                            }
                                            Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                        } else {
                                            //TODO OFFLINE
                                            networkLoader.setVisibility(View.VISIBLE);
                                            try {

                                                Log.d("Network", "dissconnetced: " + "chattingRoom");
                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);

                                            } catch (Exception ignored) {
                                            }

                                        }

                                        cancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Constant.bottomSheetDialog.dismiss();
                                            }
                                        });

                                        searchview.addTextChangedListener(new TextWatcher() {
                                            @Override
                                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                            }

                                            @Override
                                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                                                senderReceiverDownload.filteredList(String.valueOf(s));
                                            }

                                            @Override
                                            public void afterTextChanged(Editable s) {

                                            }
                                        });

                                        forwardText.setOnClickListener(new View.OnClickListener() {
                                            private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                            private int completedTasks = 0;
                                            private final int totalTasks;

                                            {
                                                totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                            }

                                            @Override
                                            public void onClick(View v) {
                                                Log.d("TAG", "Forward button clicked. Starting forward process.");
                                                Constant.getSfFuncion(mContext);

                                                Date d = new Date();
                                                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                                String currentDateTimeString = sdf.format(d);
                                                Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                                if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                    Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                    Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                    return;
                                                }

                                                progressBarMainNew.setVisibility(View.VISIBLE);
                                                int listcount = forwardNameList.size();
                                                String modelId = database.getReference().push().getKey();
                                                for (int i = 0; i < forwardNameList.size(); i++) {
                                                    final int index = i;
                                                    int finalI = i;
                                                    executor.execute(() -> {
                                                        forwardnameModel forwardModel = forwardNameList.get(index);
                                                        if (forwardModel == null) {
                                                            Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String f_id = forwardModel.getFriend_id();
                                                        String f_token = forwardModel.getF_token();
                                                        Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                        if (f_id == null || f_token == null) {
                                                            Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                        Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                        if (myUID.isEmpty() || modelId == null) {
                                                            Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        try {
                                                            ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                            emojiModels.add(new emojiModel("", ""));
                                                            Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                            messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());


                                                            messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                            try {
                                                                new DatabaseHelper(mContext).insertMessage(model2);
                                                                Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                            } catch (Exception e) {
                                                                Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                            }

                                                            Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                            UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                            Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                            uploadHelper.uploadContent(modelnew);
                                                            Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);

                                                            if (finalI == forwardNameList.size() - 1) {
                                                                if (listcount == 1) {
                                                                    Intent intent = new Intent(mContext, chattingScreen.class);
                                                                    intent.putExtra("nameKey", forwardModel.getName());
                                                                    intent.putExtra("captionKey", "");
                                                                    intent.putExtra("photoKey", "");
                                                                    intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                    intent.putExtra("msgLmtKey", "");
                                                                    intent.putExtra("ecKey", "ecKey");
                                                                    intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                    intent.putExtra("deviceType", "");
                                                                    intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                    intent.putExtra("forwardShort", "forwardShort");
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();


                                                                } else {
                                                                    Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();

                                                                }
                                                            }


                                                        } catch (Exception e) {
                                                            Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                            Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                        } finally {
                                                            onTaskComplete();
                                                        }
                                                    });
                                                }
                                            }

                                            private synchronized void onTaskComplete() {
                                                completedTasks++;
                                                Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                                if (completedTasks >= totalTasks) {
                                                    Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                    new Handler(Looper.getMainLooper()).post(() -> {
                                                        progressBarMainNew.setVisibility(View.GONE);
                                                        Constant.bottomSheetDialog.dismiss();
                                                    });
                                                    executor.shutdown();
                                                }
                                            }
                                        });


                                    }
                                });
                                deleteLyt.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                        ((senderViewHolder) holder).menu2.setVisibility(View.GONE);
                                        BlurHelper.dialogLayoutColor.dismiss();

                                        /// Need to store delete key data here


                                        Constant.setSfFunction(mContext);
                                        Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                        Constant.setSF.apply();

                                        long currentTimeStamp = Constant.getCurrentTimestamp();
                                        long pastTimeStamp = model.getTimestamp();
                                        long currentMillis = currentTimeStamp;
                                        long pastMillis = pastTimeStamp;
                                        long diffMillis = currentMillis - pastMillis;
                                        long totalHours = diffMillis / (1000 * 60 * 60);
                                        double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                        System.out.println("Total Hours: " + totalHours);
                                        System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                        if (totalHours <= 24) {
                                            // older message
                                            database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                @Override
                                                public void onSuccess(Void unused) {


                                                    database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                        @Override
                                                        public void onSuccess(Void unused) {
                                                            // todo here we need to delete from sqlLite database

                                                            try {
                                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                            } catch (Exception e) {
                                                                throw new RuntimeException(e);
                                                            }
                                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                            Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                                        }
                                                    });

                                                }
                                            });
                                        } else {
                                            database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                @Override
                                                public void onSuccess(Void unused) {


                                                    // todo here we need to delete from sqlLite database

                                                    try {
                                                        new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                    } catch (Exception e) {
                                                        throw new RuntimeException(e);
                                                    }
                                                    senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                    Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                                }
                                            });
                                        }


                                    }
                                });
                                return true;
                            }
                        });


                        File docsDir;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                        } else {
                            docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                        }
                        if (!docsDir.exists()) docsDir.mkdirs();
                        File localDoc = new File(docsDir, model.getFileName());
                        boolean docExists = localDoc.exists();
                        ((senderViewHolder) holder).audioDownloadControls.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).progressBarAudio.setVisibility(View.GONE);
                        ((senderViewHolder) holder).downloadPercentageAudioSender.setVisibility(View.GONE);

                        ((senderViewHolder) holder).downlaodAudio.setVisibility(docExists ? View.GONE : View.VISIBLE);

                        ((senderViewHolder) holder).downlaodAudio.setOnClickListener(v -> {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }
                            senderReceiverDownload.startSenderDocDownloadWithProgress(holder, model, mContext);
                        });

                    } else {

                        Log.d("TAG444", "com");
                        //for docs
                        ((senderViewHolder) holder).readMore.setVisibility(View.GONE);
                        ((senderViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                        ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                        ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                        ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                        // Always show viewnew
                        ((senderViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                        ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                        File docsDir;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                        } else {
                            docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                        }
                        if (!docsDir.exists()) docsDir.mkdirs();
                        File localDoc = new File(docsDir, model.getFileName());
                        boolean docExists = localDoc.exists();
                        ((senderViewHolder) holder).docDownloadControls.setVisibility(View.VISIBLE);
                        ((senderViewHolder) holder).progressBarDoc.setVisibility(View.GONE);
                        ((senderViewHolder) holder).downloadPercentageDocSender.setVisibility(View.GONE);

                        ((senderViewHolder) holder).downlaodDoc.setVisibility(docExists ? View.GONE : View.VISIBLE);

                        ((senderViewHolder) holder).downlaodDoc.setOnClickListener(v -> {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }
                            senderReceiverDownload.startSenderDocDownloadWithProgress(holder, model, mContext);
                        });


                        if (model.getExtension().equalsIgnoreCase("pdf")) {
                            ((senderViewHolder) holder).pdfPreview.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).pdfcard.setVisibility(View.VISIBLE);

                            String localPreviewImagePath = otherFunctions.getLocalPdfPreviewImagePath(model, mContext);
                            // Get the remote URL of the actual PDF document
                            String remotePdfUrl = otherFunctions.getRemotePdfUrl(model);

                            // Load the PDF preview, handling caching logic internally
                            ImageView targetImageView = ((senderViewHolder) holder).pdfPreview;
                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                            otherFunctions.loadPdfPreview(localPreviewImagePath, remotePdfUrl, ((senderViewHolder) holder).pdfPreview, parentLayout, position, model, mContext);

                            ((senderViewHolder) holder).docFileIcon.setBackgroundTintList(ColorStateList.valueOf(Color.RED));


                        } else if (model.getExtension().equalsIgnoreCase("xls")) {
                            ((senderViewHolder) holder).pdfPreview.setVisibility(View.GONE);
                            ((senderViewHolder) holder).pdfcard.setVisibility(View.GONE);
                            String filePath = otherFunctions.getFilePath(model, mContext);
                            //  ((senderViewHolder) holder).docFileIcon.setBackgroundTintList(ColorStateList.valueOf(R.color.white));

                        } else {
                            ((senderViewHolder) holder).pdfPreview.setVisibility(View.GONE);
                            ((senderViewHolder) holder).pdfcard.setVisibility(View.GONE);
                            //  ((senderViewHolder) holder).docFileIcon.setBackgroundTintList(ColorStateList.valueOf(R.color.white));
                        }


                        if (model.getReplyKey().equals(Constant.ReplyKey)) {

                            // TODO: 03/09/25  NEW REPLY  CONTENT

                            ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).pageLyt.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                            ((senderViewHolder) holder).musicReply.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).imgcardview.setVisibility(View.GONE);
                            ((senderViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                            ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                            ((senderViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                            ((senderViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).miceReply.setVisibility(View.GONE);


                            // this is for image caption
                            if (!model.getCaption().equals("")) {
                                ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).captionText.setText(model.getCaption());

                            } else {
                                ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                            }

//                        //here need to visible
//                        // important views
                            ((senderViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                            ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                            Log.d("0909887", model.getReplyKey());

                            if (model.getReplyType().equals(Constant.Text)) {


                                ((senderViewHolder) holder).sendMessage.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImg.setVisibility(View.GONE);
                                ((senderViewHolder) holder).senderImgLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).contactContainer.setVisibility(View.GONE);
                                ((senderViewHolder) holder).miceContainer.setVisibility(View.GONE);
                                ((senderViewHolder) holder).docName.setText(model.getReplyOldData());
                                ((senderViewHolder) holder).extension.setText(model.getExtension());
                                ((senderViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).senderVideo.setVisibility(View.GONE);
                                ((senderViewHolder) holder).sendervideoLyt.setVisibility(View.GONE);
                                ((senderViewHolder) holder).docSize.setText(model.getDocSize());
                                ((senderViewHolder) holder).docSizeExtension.setText(model.getExtension());

                                ((senderViewHolder) holder).repliedData.setText(model.getReplytextData());
                                ((senderViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                                ((senderViewHolder) holder).msgreplyText.setText("Doc");
                                Drawable drawable = mContext.getResources().getDrawable(R.drawable.documentsvg);
                                int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                drawable.setBounds(0, 0, size, size);
                                drawable.setTint(Color.parseColor("#78787A"));

                                ((senderViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                                ((senderViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                        mContext.getResources().getDisplayMetrics()));

                                ((senderViewHolder) holder).pageText.setText(model.getExtension());


                            }
                            ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                        } else {

                            ((senderViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                            ((senderViewHolder) holder).docLyt.setVisibility(View.VISIBLE);

                            // this is for image caption
                            if (!model.getCaption().equals("")) {
                                ((senderViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((senderViewHolder) holder).captionText.setText(model.getCaption());

                            } else {
                                ((senderViewHolder) holder).captionText.setVisibility(View.GONE);
                            }
                            ((senderViewHolder) holder).replyDevider.setVisibility(View.GONE);
                            ((senderViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                            ((senderViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);

                            ((senderViewHolder) holder).docName.setText(model.getFileName());
                            ((senderViewHolder) holder).docSize.setText(model.getDocSize());
                            ((senderViewHolder) holder).docSizeExtension.setText(model.getExtension());
                            ((senderViewHolder) holder).extension.setText(model.getExtension());


                        }

                        ((senderViewHolder) holder).docLyt.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                // Handle multi-selection mode first
                                if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                    senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                    return;
                                }

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                    Constant.getSfFuncion(mContext);
                                    String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                    String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                    String targetModelId = model.getReplyCrtPostion();

                                    DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                    messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                    DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                    messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                } else {
                                    File customFolder;
                                    String exactPath = null;
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();
                                        Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                    } else {
                                        customFolder = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();
                                    }

                                    if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {
                                        Intent intent = new Intent(mContext, show_document_screen.class);
                                        intent.putExtra("documentKey", model.getFileName());
                                        intent.putExtra("nameKey", model.getFileName());
                                        intent.putExtra("sizeKey", model.getDocSize());
                                        intent.putExtra("extensionKey", model.getExtension());
                                        intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                    } else {
                                        // Fallback to document if file doesn't exist
                                        Intent intent = new Intent(mContext, show_document_screen.class);
                                        intent.putExtra("documentKey", model.getDocument());
                                        intent.putExtra("nameKey", model.getDataType());
                                        intent.putExtra("sizeKey", model.getDocSize());
                                        intent.putExtra("extensionKey", model.getExtension());
                                        intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                    }
                                }
                            }
                        });

                        ((senderViewHolder) holder).itemView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                    Constant.getSfFuncion(mContext);
                                    String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                    String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                    String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                    DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                    messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });


                                    DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                    messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {

                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                } else {
                                    File customFolder;
                                    String exactPath = null;
                                    //android 10
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();
                                        Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                    } else {
                                        customFolder = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();

                                    }

                                    if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {

                                        Intent intent = new Intent(mContext, show_document_screen.class);
                                        intent.putExtra("documentKey", model.getFileName());
                                        intent.putExtra("nameKey", model.getFileName());
                                        intent.putExtra("sizeKey", model.getDocSize());
                                        intent.putExtra("extensionKey", model.getExtension());
                                        intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                    } else {
//                                    Intent intent = new Intent(mContext, show_document_screen.class);
//                                    intent.putExtra("documentKey", model.getDocument());
//                                    intent.putExtra("nameKey", model.getDataType());
//                                    intent.putExtra("sizeKey", model.getDocSize());
//                                    intent.putExtra("extensionKey", model.getExtension());
//                                    intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
//                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                    }
                                }
                            }
                        });

                        ((senderViewHolder) holder).docLyt.setOnLongClickListener(new View.OnLongClickListener() {
                            @Override
                            public boolean onLongClick(View v) {
                                // Handle multi-selection mode first
                                if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                    senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                    return true;
                                }

                                // Show long press dialogue for document messages with proper positioning
                                int[] location = new int[2];
                                v.getLocationOnScreen(location);
                                float touchX = location[0];
                                float touchY = location[1];

                                BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                                BlurHelper.dialogLayoutColor.show();
                                RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                                BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                                // Set up dialogue content for document messages
                                TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                                TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                                LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                                TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                                TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                                TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                                TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                                RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                                ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                                LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                                LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                                RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                                LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                                View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                                CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                                TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);

                                // Set time
                                sendTime.setText(model.getTime());

                                // Hide other message types
                                readMore.setVisibility(View.GONE);
                                replylyoutGlobal.setVisibility(View.GONE);
                                richLinkViewLyt.setVisibility(View.GONE);
                                sendMessage.setVisibility(View.GONE);
                                sendervideoLyt.setVisibility(View.GONE);
                                senderVideo.setVisibility(View.GONE);
                                contactContainer.setVisibility(View.GONE);
                                miceContainer.setVisibility(View.GONE);

                                // Show document content
                                docLyt.setVisibility(View.VISIBLE);
                                viewnew.setVisibility(View.VISIBLE);

                                // Set document content
                                docName.setText(model.getFileName());
                                docSize.setText(model.getDocSize());
                                docSizeExtension.setText(model.getExtension());
                                extension.setText(model.getExtension());

                                // Set caption if available
                                if (!model.getCaption().equals("")) {
                                    TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                                    captionText.setVisibility(View.GONE);
                                }

                                // Add animation
                                Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                                cardview.startAnimation(animationdd);

                                // Add emoji functionality
                                RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                                LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                                Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);

                                addEmoji.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            Constant.Vibrator(mContext);
                                        }
                                        Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                        Constant.bottomSheetDialog.show();
                                        RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                        ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);
                                        Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);
                                    }
                                });

                                Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                                emojiLongRec.startAnimation(fadeIn);

                                // Add select functionality
                                senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                                return true;
                            }
                        });

                        ((senderViewHolder) holder).sendLinear.setOnLongClickListener(new View.OnLongClickListener() {
                            @Override
                            public boolean onLongClick(View v) {

//                            if (((senderViewHolder) holder).menu2.getVisibility() == View.VISIBLE) {
//                                ((senderViewHolder) holder).menu2.setVisibility(View.GONE);
//
//
//                            } else if (((senderViewHolder) holder).menu2.getVisibility() == View.GONE) {
//                                ((senderViewHolder) holder).menu2.setVisibility(View.VISIBLE);
//
//                                notifyDataSetChanged();
//                            }
// todo this is why preview hold on a exact location " v "

                                int[] location = new int[2];
                                v.getLocationOnScreen(location);
                                float touchX = location[0];
                                float touchY = location[1];


                                BlurHelper.showDialogWithBlurBackground(mContext, R.layout.sender_long_press_dialogue);
                                BlurHelper.dialogLayoutColor.show();
                                RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                                // Use boundary-aware positioning
                                BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                                TextView sendMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.sendMessage);
                                TextView sendTime = BlurHelper.dialogLayoutColor.findViewById(R.id.sendTime);
                                TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                                TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                                TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                                TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                                TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                                TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                                TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                                RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                                RelativeLayout senderImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImgLyt);
                                RelativeLayout sendervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.sendervideoLyt);
                                ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                                ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                                ImageView senderVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.senderVideo);
                                ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                                AppCompatImageView senderImg = BlurHelper.dialogLayoutColor.findViewById(R.id.senderImg);
                                LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                                LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                                LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                                LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                                View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                                View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                                View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                                View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                                CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                                TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                                FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                                LinearLayout richBox = BlurHelper.dialogLayoutColor.findViewById(R.id.richBox);
                                LinearLayout MainSenderBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainSenderBox);

                                LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                                LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                                CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                                LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                                TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                                LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                                CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                                CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                                ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                                TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                                ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                                TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                                RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                                FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                                ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                                TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                                ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);
                                RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                                ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                                TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                                FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                                ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                                CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                                LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                                TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                                TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                                TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);


                                // TODO: 30/01/25  emoji header
                                RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                                LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                                Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                                addEmoji.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            Constant.Vibrator(mContext);
                                        }

                                        Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                        Constant.bottomSheetDialog.show();
                                        RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                        ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                        Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                    }
                                });


                                Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                                emojiLongRec.startAnimation(fadeIn);

                                int nightModeFlags = mContext.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;
                                if (nightModeFlags == Configuration.UI_MODE_NIGHT_YES) {
                                    // Dark mode is active
                                    Constant.getSfFuncion(mContext);
                                    String themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                    ColorStateList tintList;

                                    try {
                                        if (themColor.equals("#ff0080")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#4D0026"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#00A3E9")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));

                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#7adf2a")) {

                                            tintList = ColorStateList.valueOf(Color.parseColor("#25430D"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#ec0001")) {

                                            tintList = ColorStateList.valueOf(Color.parseColor("#470000"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#16f3ff")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#05495D"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#FF8A00")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#663700"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#7F7F7F")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#2B3137"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#D9B845")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#413815"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#346667")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#1F3D3E"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else if (themColor.equals("#9846D9")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#2d1541"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        } else if (themColor.equals("#A81010")) {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#430706"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);

                                        } else {
                                            tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                            MainSenderBox.setBackgroundTintList(tintList);
                                            richBox.setBackgroundTintList(tintList);


                                        }
                                    } catch (Exception ignored) {
                                        tintList = ColorStateList.valueOf(Color.parseColor("#01253B"));
                                        MainSenderBox.setBackgroundTintList(tintList);
                                        richBox.setBackgroundTintList(tintList);


                                    }


                                } else {
                                    tintList = ColorStateList.valueOf(Color.parseColor("#011224"));
                                    MainSenderBox.setBackgroundTintList(tintList); // Replace #011224 with your hex color value


                                }

                                // todo theme
                                try {

                                    Constant.getSfFuncion(mContext);
                                    themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                    tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                    //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                                    try {
                                        if (themColor.equals("#ff0080")) {
                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#00A3E9")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#7adf2a")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#ec0001")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#16f3ff")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#FF8A00")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#7F7F7F")) {


                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));

                                        } else if (themColor.equals("#D9B845")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#346667")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#9846D9")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else if (themColor.equals("#A81010")) {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        } else {

                                            viewnew.setBackgroundTintList(tintList);
                                            readMore.setTextColor(Color.parseColor(themColor));


                                        }
                                    } catch (Exception ignored) {

                                        viewnew.setBackgroundTintList(tintList);
                                        readMore.setTextColor(Color.parseColor(themColor));

                                    }


                                } catch (Exception ignored) {
                                }
                                Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                                cardview.startAnimation(animationdd);
                                sendTime.setText(model.getTime());


                                // todo main work is start from here

                                readMore.setVisibility(View.GONE);
                                richLinkViewLyt.setVisibility(View.GONE);
                                senderVideo.setVisibility(View.GONE);
                                sendervideoLyt.setVisibility(View.GONE);
                                sendMessage.setVisibility(View.GONE);
                                senderImg.setVisibility(View.GONE);
                                senderImgLyt.setVisibility(View.GONE);
                                viewnew.setVisibility(View.VISIBLE);
                                contactContainer.setVisibility(View.GONE);
                                miceContainer.setVisibility(View.GONE);

                                File docsDir;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                } else {
                                    docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                                }
                                if (!docsDir.exists()) docsDir.mkdirs();
                                File localDoc = new File(docsDir, model.getFileName());
                                boolean docExists = localDoc.exists();
                                docDownloadControls.setVisibility(View.VISIBLE);
                                progressBarDoc.setVisibility(View.GONE);
                                downloadPercentageDocSender.setVisibility(View.GONE);
                                downlaodDoc.setVisibility(View.GONE);


                                if (model.getExtension().equalsIgnoreCase("pdf")) {
                                    pdfPreview.setVisibility(View.VISIBLE);
                                    pdfcard.setVisibility(View.VISIBLE);
                                    String localPreviewImagePath = otherFunctions.getLocalPdfPreviewImagePath(model, mContext);
                                    String remotePdfUrl = otherFunctions.getRemotePdfUrl(model);
                                    ViewGroup parentLayout = (ViewGroup) pdfPreview.getParent();
                                    otherFunctions.loadPdfPreview(localPreviewImagePath, remotePdfUrl, pdfPreview, parentLayout, position, model, mContext);
                                    docFileIcon.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
                                } else if (model.getExtension().equalsIgnoreCase("xls")) {
                                    pdfPreview.setVisibility(View.GONE);
                                    pdfcard.setVisibility(View.GONE);
                                } else {
                                    pdfPreview.setVisibility(View.GONE);
                                    pdfcard.setVisibility(View.GONE);
                                }

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                    replylyoutGlobal.setVisibility(View.VISIBLE);
                                    pageLyt.setVisibility(View.VISIBLE);
                                    sendMessage.setVisibility(View.GONE);
                                    musicReply.setVisibility(View.GONE);
                                    senderImgLyt.setVisibility(View.GONE);
                                    imgcardview.setVisibility(View.GONE);
                                    contactContainerReply.setVisibility(View.GONE);
                                    senderImg.setVisibility(View.GONE);
                                    replyTheme.setBackgroundTintList(tintList);
                                    replyYou.setTextColor(Color.parseColor(themColor));
                                    docLyt.setVisibility(View.GONE);
                                    miceReply.setVisibility(View.GONE);

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.VISIBLE);
                                    viewbarlyt1.setVisibility(View.GONE);

                                    if (model.getReplyType().equals(Constant.Text)) {
                                        sendMessage.setVisibility(View.GONE);
                                        senderImg.setVisibility(View.GONE);
                                        senderImgLyt.setVisibility(View.GONE);
                                        contactContainer.setVisibility(View.GONE);
                                        miceContainer.setVisibility(View.GONE);
                                        docName.setText(model.getReplyOldData());
                                        extension.setText(model.getExtension());
                                        replydatalyt.setVisibility(View.VISIBLE);
                                        senderVideo.setVisibility(View.GONE);
                                        sendervideoLyt.setVisibility(View.GONE);
                                        docSize.setText(model.getDocSize());
                                        docSizeExtension.setText(model.getExtension());
                                        repliedData.setText(model.getReplytextData());
                                        repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                        ));
                                        msgreplyText.setText("Doc");
                                        Drawable drawable = mContext.getResources().getDrawable(R.drawable.documentsvg);
                                        int size = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                        );
                                        drawable.setBounds(0, 0, size, size);
                                        drawable.setTint(Color.parseColor("#78787A"));
                                        msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                        msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                        ));
                                        pageText.setText(model.getExtension());
                                    }
                                } else {
                                    replylyoutGlobal.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.VISIBLE);

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.GONE);
                                    viewbarlyt1.setVisibility(View.GONE);
                                    docName.setText(model.getDataType());
                                    docSize.setText(model.getDocSize());
                                    docSizeExtension.setText(model.getExtension());
                                    extension.setText(model.getExtension());
                                }


                                LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);

                                LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);
                                LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                                copy.setVisibility(View.GONE);
                                forward.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {


                                        BlurHelper.dialogLayoutColor.dismiss();
                                        Constant.bottomsheetforward(mContext);
                                        Constant.bottomSheetDialog.show();

                                        Constant.getSfFuncion(mContext);
                                        ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                        View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                        AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                        dx = Constant.viewShape.findViewById(R.id.dx);
                                        richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                        ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);
                                        recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                        namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                        forwardText = Constant.viewShape.findViewById(R.id.forward);
                                        LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                        try {

                                            Constant.getSfFuncion(mContext);
                                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                            try {
                                                if (themColor.equals("#ff0080")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                                } else if (themColor.equals("#00A3E9")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                } else if (themColor.equals("#7adf2a")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                                } else if (themColor.equals("#ec0001")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                                } else if (themColor.equals("#16f3ff")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                                } else if (themColor.equals("#FF8A00")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                                } else if (themColor.equals("#7F7F7F")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                                } else if (themColor.equals("#D9B845")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                                } else if (themColor.equals("#346667")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                                } else if (themColor.equals("#9846D9")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                                } else if (themColor.equals("#A81010")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                                } else {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                }
                                            } catch (Exception ignored) {

                                            }


                                        } catch (Exception ignored) {
                                        }
                                        if (otherFunctions.isInternetConnected(mContext)) {
                                            //TODO ONLINE
                                            networkLoader.setVisibility(View.GONE);
                                            try {
                                                // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();

                                                if (get_user_active_contact_forward_list.size() > 0) {
                                                    // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                    otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                    recyclerview.setVisibility(View.VISIBLE);
                                                } else {

                                                }
                                            } catch (Exception e) {
                                                Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                            }
                                            Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                        } else {
                                            //TODO OFFLINE
                                            networkLoader.setVisibility(View.VISIBLE);
                                            try {

                                                Log.d("Network", "dissconnetced: " + "chattingRoom");
                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);

                                            } catch (Exception ignored) {
                                            }

                                        }

                                        cancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Constant.bottomSheetDialog.dismiss();
                                            }
                                        });

                                        searchview.addTextChangedListener(new TextWatcher() {
                                            @Override
                                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                            }

                                            @Override
                                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                                                senderReceiverDownload.filteredList(String.valueOf(s));
                                            }

                                            @Override
                                            public void afterTextChanged(Editable s) {

                                            }
                                        });

                                        forwardText.setOnClickListener(new View.OnClickListener() {
                                            private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                            private int completedTasks = 0;
                                            private final int totalTasks;

                                            {
                                                totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                            }

                                            @Override
                                            public void onClick(View v) {
                                                Log.d("TAG", "Forward button clicked. Starting forward process.");
                                                Constant.getSfFuncion(mContext);

                                                Date d = new Date();
                                                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                                String currentDateTimeString = sdf.format(d);
                                                Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                                if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                    Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                    Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                    return;
                                                }

                                                progressBarMainNew.setVisibility(View.VISIBLE);
                                                int listcount = forwardNameList.size();
                                                String modelId = database.getReference().push().getKey();
                                                for (int i = 0; i < forwardNameList.size(); i++) {
                                                    final int index = i;
                                                    int finalI = i;
                                                    executor.execute(() -> {
                                                        forwardnameModel forwardModel = forwardNameList.get(index);
                                                        if (forwardModel == null) {
                                                            Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String f_id = forwardModel.getFriend_id();
                                                        String f_token = forwardModel.getF_token();
                                                        Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                        if (f_id == null || f_token == null) {
                                                            Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                        Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                        if (myUID.isEmpty() || modelId == null) {
                                                            Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        try {
                                                            ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                            emojiModels.add(new emojiModel("", ""));
                                                            Log.d("TAG", "Emoji models initialized: " + emojiModels.size());

                                                            messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                            messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                            try {
                                                                new DatabaseHelper(mContext).insertMessage(model2);
                                                                Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                            } catch (Exception e) {
                                                                Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                            }
                                                            Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                            UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                            Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                            uploadHelper.uploadContent(modelnew);
                                                            Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);

                                                            if (finalI == forwardNameList.size() - 1) {
                                                                if (listcount == 1) {
                                                                    Intent intent = new Intent(mContext, chattingScreen.class);
                                                                    intent.putExtra("nameKey", forwardModel.getName());
                                                                    intent.putExtra("captionKey", "");
                                                                    intent.putExtra("photoKey", "");
                                                                    intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                    intent.putExtra("msgLmtKey", "");
                                                                    intent.putExtra("ecKey", "ecKey");
                                                                    intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                    intent.putExtra("deviceType", "");
                                                                    intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                    intent.putExtra("forwardShort", "forwardShort");
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();


                                                                } else {
                                                                    Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();

                                                                }
                                                            }

                                                        } catch (Exception e) {
                                                            Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                            Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                        } finally {
                                                            onTaskComplete();
                                                        }
                                                    });
                                                }
                                            }

                                            private synchronized void onTaskComplete() {
                                                completedTasks++;
                                                Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                                if (completedTasks >= totalTasks) {
                                                    Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                    new Handler(Looper.getMainLooper()).post(() -> {
                                                        progressBarMainNew.setVisibility(View.GONE);
                                                        Constant.bottomSheetDialog.dismiss();
                                                    });
                                                    executor.shutdown();
                                                }
                                            }
                                        });


                                    }
                                });
                                deleteLyt.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                        ((senderViewHolder) holder).menu2.setVisibility(View.GONE);
                                        BlurHelper.dialogLayoutColor.dismiss();
                                        /// Need to store delete key data here


                                        Constant.setSfFunction(mContext);
                                        Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                        Constant.setSF.apply();

                                        long currentTimeStamp = Constant.getCurrentTimestamp();
                                        long pastTimeStamp = model.getTimestamp();
                                        long currentMillis = currentTimeStamp;
                                        long pastMillis = pastTimeStamp;
                                        long diffMillis = currentMillis - pastMillis;
                                        long totalHours = diffMillis / (1000 * 60 * 60);
                                        double totalHoursDecimal = (double) diffMillis / (1000 * 60 * 60);
                                        System.out.println("Total Hours: " + totalHours);
                                        System.out.println("Total Hours (decimal): " + totalHoursDecimal);
                                        if (totalHours <= 24) {
                                            // older message
                                            database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                @Override
                                                public void onSuccess(Void unused) {


                                                    database.getReference().child(Constant.CHAT).child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                        @Override
                                                        public void onSuccess(Void unused) {
                                                            // todo here we need to delete from sqlLite database

                                                            try {
                                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                            } catch (Exception e) {
                                                                throw new RuntimeException(e);
                                                            }

                                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                            /// Need to store delete key data here


                                                            Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                                        }
                                                    });
                                                }
                                            });
                                        } else {
                                            database.getReference().child("chats").child(model.getReceiverUid() + model.getUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                                @Override
                                                public void onSuccess(Void unused) {

                                                    // todo here we need to delete from sqlLite database

                                                    try {
                                                        new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                    } catch (Exception e) {
                                                        throw new RuntimeException(e);
                                                    }

                                                    senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                    /// Need to store delete key data here


                                                    Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());


                                                }
                                            });
                                        }


                                    }
                                });
                                return true;
                            }
                        });

                    }

                }
            } else {

             



                // Only apply blur if user is blocked - optimized for scrolling performance
                boolean isUserBlocked = blockUser.getText().toString().equals("true");
                if (isUserBlocked) {
                    // Apply blur effect only when user is blocked (preserve block functionality)
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                        RenderEffect blurEffect = RenderEffect.createBlurEffect(40f, 40f, Shader.TileMode.CLAMP);
                        ((receiverViewHolder) holder).itemView.setRenderEffect(blurEffect);
                    }

                    // Disable interaction for blocked users
                    ((receiverViewHolder) holder).itemView.setClickable(false);
                    ((receiverViewHolder) holder).itemView.setFocusable(false);
                    ((receiverViewHolder) holder).itemView.setEnabled(false);
                    ((receiverViewHolder) holder).itemView.setOnTouchListener((v, event) -> true); // Consume all touch events
                } else {
                    // Remove blur effect for non-blocked users (optimized for scrolling)
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                        ((receiverViewHolder) holder).itemView.setRenderEffect(null); // remove blur
                    }

                    // Enable interaction for non-blocked users
                    ((receiverViewHolder) holder).itemView.setClickable(true);
                    ((receiverViewHolder) holder).itemView.setFocusable(true);
                    ((receiverViewHolder) holder).itemView.setEnabled(true);
                    ((receiverViewHolder) holder).itemView.setOnTouchListener(null); // Restore default
                }


                if (blockUser.getText().toString().equals("false")) {
                    //Toast.makeText(mContext, "false", Toast.LENGTH_SHORT).show();
                    if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {


                        Constant.getSfFuncion(mContext);
                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));

                        ((receiverViewHolder) holder).cardview.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).originalAdd.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
//                            Constant.bottomsheetContact(mContext, R.layout.view_contact_btmsheet_lyt);
//                        //    Constant.bottomSheetDialogContact.show();
//                            TextView createContact = Constant.bottomSheetDialogContact.findViewById(R.id.createContact);
//                            TextView existingContact = Constant.bottomSheetDialogContact.findViewById(R.id.existingContact);
//                            LinearLayout cancel = Constant.bottomSheetDialogContact.findViewById(R.id.cancel);
//                            Constant.bottomSheetDialogContact.dismiss();
                                Constant.bottomsheetContact(mContext, R.layout.create_contact_layout_bottom);
                                Constant.bottomSheetDialogContact.show();
                                TextView cancel = Constant.bottomSheetDialogContact.findViewById(R.id.cancel);
                                TextView save = Constant.bottomSheetDialogContact.findViewById(R.id.save);
                                TextView mobile = Constant.bottomSheetDialogContact.findViewById(R.id.mobile);
                                EditText firstname = Constant.bottomSheetDialogContact.findViewById(R.id.firstname);
                                EditText lastName = Constant.bottomSheetDialogContact.findViewById(R.id.lastName);
                                EditText phone = Constant.bottomSheetDialogContact.findViewById(R.id.phoneNumber);

                                try {
                                    Constant.getSfFuncion(mContext);
                                    themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                    tintList = ColorStateList.valueOf(Color.parseColor(themColor));

                                    cancel.setTextColor(Color.parseColor(themColor));
                                    save.setTextColor(Color.parseColor(themColor));
                                    mobile.setTextColor(Color.parseColor(themColor));

                                } catch (Exception ignored) {

                                }

                                String[] nameParts = model.getName().split(" ", 2);

                                // Assuming the first part is the first name and the second part is the last name
                                String firstNameString = nameParts[0];
                                firstname.setText(originalName.getText().toString());
                                try {
                                    String lastNameString = nameParts[1];
                                    lastName.setText(lastNameString);
                                } catch (Exception ignored) {
                                }


                                phone.setText(TextViewname.getText().toString());

                                cancel.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Constant.bottomSheetDialogContact.dismiss();
                                    }
                                });

                                save.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                        // Check for permission before accessing contacts
                                        if (ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
                                            // Permission is not granted, request it
                                            ActivityCompat.requestPermissions(mActivity, new String[]{Manifest.permission.WRITE_CONTACTS}, 74);
                                        } else {


                                            ArrayList<ContentProviderOperation> operations = new ArrayList<>();
                                            operations.add(ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI).withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null).withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null).build());

                                            operations.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0).withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, firstname.getText().toString() + " " + lastName.getText().toString()).build());

                                            operations.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0).withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phone.getText().toString()).withValue(ContactsContract.CommonDataKinds.Phone.TYPE, ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE).build());

                                            try {
                                                mContext.getContentResolver().applyBatch(ContactsContract.AUTHORITY, operations);
                                                Constant.bottomSheetDialogContact.dismiss();
                                            } catch (RemoteException |
                                                     OperationApplicationException e) {
                                                e.printStackTrace();
                                            }


                                            // TODO: 05/08/25 Here i want to add a data into api

                                            String uid = Constant.getSF.getString(Constant.UID_KEY, "");
                                            String myOwnNumber = Constant.getSF.getString(Constant.PHONE_NUMBERKEY, "");
                                            String contactName = firstname.getText().toString() + lastName.getText().toString();
                                            String contactNumber = phone.getText().toString();
                                            Webservice.insert_or_update_contact(mContext, uid, myOwnNumber, contactName, contactNumber, chattingScreen, TextViewname);

                                        }

                                    }
                                });

//                            existingContact.setOnClickListener(new View.OnClickListener() {
//                                @Override
//                                public void onClick(View v) {
//
//
//                                    Constant.bottomSheetDialogContact.dismiss();
//                                    Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
//                                    ((Activity) mContext).startActivityForResult(intent, 7185);
//
//                                    phone2Contact.setText(model.getPhone());
//
//
//                                }
//                            });
//                            cancel.setOnClickListener(new View.OnClickListener() {
//                                @Override
//                                public void onClick(View v) {
//                                    Constant.bottomSheetDialogContact.dismiss();
//                                }
//                            });
                            }
                        });

                        ((receiverViewHolder) holder).cardview.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                            }
                        });
                        ((receiverViewHolder) holder).originalNumber.setText(TextViewname.getText().toString());
                        ((receiverViewHolder) holder).originalName.setText("~ " + originalName.getText().toString());
                        Log.d("TAG", "originalName: " + "~ " + originalName.getText().toString());
                        ((receiverViewHolder) holder).originalDelete.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                Constant.dialogueLayoutForAll(mContext, R.layout.delete_ac_dialogue);
                                TextView TextView = Constant.dialogLayoutColor.findViewById(R.id.TextView);
                                TextView.setText("Block this user.\nBlock it's message.");
                                AppCompatButton cancel = Constant.dialogLayoutColor.findViewById(R.id.cancel);
                                cancel.setVisibility(View.VISIBLE);
                                Constant.dialogLayoutColor.show();
                                Dialog dialog = Constant.dialogLayoutColor;
                                Constant.dialogLayoutColor.setCanceledOnTouchOutside(true);

                                cancel.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Constant.dialogLayoutColor.dismiss();
                                    }
                                });
                                AppCompatButton sure = Constant.dialogLayoutColor.findViewById(R.id.sure);
                                sure.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Constant.getSfFuncion(mContext);
                                        String uid = Constant.getSF.getString(Constant.UID_KEY, "");
                                        Webservice.insertBlockUser(mContext, uid, receiverUid, dialog, chattingScreen, blockUser, blockContainer, messageboxContainer);
                                    }
                                });
                            }
                        });


                    } else {
                        ((receiverViewHolder) holder).cardview.setVisibility(View.GONE);
                    }
                } else {
                    ((receiverViewHolder) holder).cardview.setVisibility(View.GONE);
                    //Toast.makeText(mContext, "true", Toast.LENGTH_SHORT).show();
                }


                // TODO: 31/01/25  EMOJI
                if (!model.getEmojiCount().equals("")) {
                    ArrayList<emojiModel> decryptedemoji = model.getEmojiModel();

                    // Remove duplicates based on the emoji and name fields
                    HashSet<emojiModel> uniqueEmojis = new HashSet<>(decryptedemoji);

                    // Convert the HashSet back to ArrayList to retain the order
                    ArrayList<emojiModel> uniqueEmojiList = new ArrayList<>(uniqueEmojis);

                    StringBuilder emojiText = new StringBuilder();  // Use StringBuilder to accumulate emoji texts

                    // Loop through all unique emoji models and append their emoji to the StringBuilder
                    for (int i = 0; i < uniqueEmojiList.size(); i++) {
                        Log.d("TAG", "emoji: " + uniqueEmojiList.get(i).getEmoji());

                        // Append the emoji to the StringBuilder
                        emojiText.append(uniqueEmojiList.get(i).getEmoji()).append(" ");  // Add space between emojis
                    }

                    // If emoji count is 2, append the count at the end of emojis
                    if (model.getEmojiCount().equals("2")) {
                        String fullText = emojiText.toString().trim() + " 2 ";  // Add space before "2"
                        SpannableString spannableString = new SpannableString(fullText);

                        // Apply RelativeSizeSpan to the "2"
                        int start = fullText.length() - 1;  // Start of "2"
                        int end = fullText.length();  // End of "2"
                        spannableString.setSpan(new RelativeSizeSpan(0.9f), start, end, Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  // 0.9f to make it smaller

                        // Set the styled text with emojis and the small "2"
                        ((receiverViewHolder) holder).emojiText.setText(spannableString);
                    } else {
                        // Set the text without the "2"
                        ((receiverViewHolder) holder).emojiText.setText(emojiText.toString().trim());
                    }

                    // Make emojiTextCard visible
                    ((receiverViewHolder) holder).emojiTextCard.setVisibility(View.VISIBLE);
                } else {
                    // Hide the emojiTextCard if emojiCount is empty
                    ((receiverViewHolder) holder).emojiTextCard.setVisibility(View.GONE);
                }

                ((receiverViewHolder) holder).emojiTextCard.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        Constant.Vibrator(mContext);
                        Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                        Constant.bottomSheetDialog.show();
                        RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                        ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);


                        Constant.getSfFuncion(mContext);

                        String receiverRoom = model.getUid() + model.getReceiverUid();

                        ArrayList<emojiModel> emojiList = new ArrayList<>();
                        emojiPeopleAdapter emojiPeopleAdapter = new emojiPeopleAdapter(mContext, emojiList, receiverUid);

                        recyclerView.setLayoutManager(new LinearLayoutManager(mContext));
                        recyclerView.setAdapter(emojiPeopleAdapter);

                        DatabaseReference emojiRef = database.getReference().child(Constant.CHAT).child(receiverRoom).child(model.getModelId()).child("emojiModel");

                        emojiRef.addValueEventListener(new ValueEventListener() {
                            @Override
                            public void onDataChange(@NonNull DataSnapshot snapshot) {
                                emojiList.clear();
                                for (DataSnapshot data : snapshot.getChildren()) {
                                    emojiModel emoji = data.getValue(emojiModel.class);
                                    if (emoji != null) {
                                        emojiList.add(emoji);
                                    }
                                }
                                progressBar.setVisibility(View.GONE);
                                emojiPeopleAdapter.notifyDataSetChanged();
                            }

                            @Override
                            public void onCancelled(@NonNull DatabaseError error) {

                            }
                        });


                    }
                });


                //receiver below
                //for receiver side

                ((receiverViewHolder) holder).itemView.setBackgroundColor(Color.TRANSPARENT);

                // Reduce spacing between messages with same timestamp
                boolean hasSameTimestamp = senderReceiverDownload.hasSameTimestampAsNext(position, messageList);
                ViewGroup.MarginLayoutParams layoutParams = (ViewGroup.MarginLayoutParams) ((receiverViewHolder) holder).itemView.getLayoutParams();
                if (layoutParams != null) {
                    if (hasSameTimestamp) {
                        // Reduce bottom margin for messages with same timestamp
                        layoutParams.bottomMargin = 2; // Reduced spacing
                    } else {
                        // Normal spacing for different timestamps
                        layoutParams.bottomMargin = 8; // Normal spacing
                    }
                    ((receiverViewHolder) holder).itemView.setLayoutParams(layoutParams);
                }

                try {

                    Constant.getSfFuncion(mContext);
                    themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                    tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                    //   binding.menuPoint.setBackgroundColor(Color.parseColor(themColor));

                    try {
                        if (themColor.equals("#ff0080")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            //  ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));

                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            // ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#00A3E9")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            //    ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //   ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#7adf2a")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            // ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);


                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#ec0001")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            //   ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);


                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //     ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);
                        } else if (themColor.equals("#16f3ff")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            //    ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);


                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //    ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#FF8A00")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            //  ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            // ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#7F7F7F")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            // ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);


                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            // ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);
                        } else if (themColor.equals("#D9B845")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            //  ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);


                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            // ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#346667")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            // ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#9846D9")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            //  ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            // ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else if (themColor.equals("#A81010")) {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            // ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            // ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        } else {


                            ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                            ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                            //   ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                            ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                            //  ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);

                        }
                    } catch (Exception ignored) {


                        ((receiverViewHolder) holder).progressBarImageview.setIndeterminateTintList(tintList);
                        ((receiverViewHolder) holder).readMore.setTextColor(Color.parseColor(themColor));
                        //  ((receiverViewHolder) holder).downlaod.setBackgroundTintList(tintList);

                        ((receiverViewHolder) holder).progressBarVideo.setIndeterminateTintList(tintList);
                        //   ((receiverViewHolder) holder).downlaodVideo.setBackgroundTintList(tintList);
                    }


                } catch (Exception ignored) {
                }


                // Use the hasSameTimestamp variable already declared above
                // Debug logging for receiver timing visibility (commented out for production)
                // Log.d("ReceiverTimingVisibility", "Position: " + position +
                //       ", Has same timestamp: " + hasSameTimestamp +
                //       ", Setting receiver timing visibility: " + (hasSameTimestamp ? "GONE" : "VISIBLE"));

                // Always show timing
                ((receiverViewHolder) holder).recTime.setVisibility(View.VISIBLE);
                ((receiverViewHolder) holder).recTime.setText(model.getTime());

                try {
                    if (model.getCurrentDate().equals(Constant.getCurrentDate())) {
                        ((receiverViewHolder) holder).dateTxt.setText("Today");
                    } else if (model.getCurrentDate().equals(Constant.getYesterdayDate())) {
                        ((receiverViewHolder) holder).dateTxt.setText("Yesterday");
                    } else {
                        ((receiverViewHolder) holder).dateTxt.setText(model.getCurrentDate());
                    }


                    if (((receiverViewHolder) holder).dateTxt.getText().toString().contains(":")) {
                        ((receiverViewHolder) holder).datelyt.setVisibility(View.GONE);
                    } else {
                        ((receiverViewHolder) holder).datelyt.setVisibility(View.GONE);
                    }

                } catch (Exception e) {
                }

                if (model.getForwaredKey().equals(Constant.forwordKey)) {
                    ((receiverViewHolder) holder).forwarded.setVisibility(View.VISIBLE);
                    ((receiverViewHolder) holder).grpMsgName.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).forwarded.setCompoundDrawableTintList(tintList);

                    LayerDrawable layerDrawable = (LayerDrawable) ((receiverViewHolder) holder).forwarded.getBackground();
                    GradientDrawable borderDrawable = (GradientDrawable) layerDrawable.findDrawableByLayerId(R.id.border);
                    borderDrawable.setStroke(5, Color.parseColor(themColor));
                    ((receiverViewHolder) holder).forwarded.invalidate();

                } else if (model.getForwaredKey().equals(Constant.groupKey)) {
//                    ((receiverViewHolder) holder).grpMsgName.setText(model.getGroupName());
//                    ((receiverViewHolder) holder).grpMsgName.setVisibility(View.VISIBLE);
//                    ((receiverViewHolder) holder).forwarded.setVisibility(View.GONE);
//
//                    if (((receiverViewHolder) holder).grpMsgName.getText().toString().length() > 25) {
//                        String truncatedText = ((receiverViewHolder) holder).grpMsgName.getText().toString().substring(0, 25) + "..."; // Add dots at the end
//                        ((receiverViewHolder) holder).grpMsgName.setText(truncatedText);
//                    } else {
//                        ((receiverViewHolder) holder).grpMsgName.setText(((receiverViewHolder) holder).grpMsgName.getText().toString());
//                    }
                    ((receiverViewHolder) holder).forwarded.setVisibility(View.GONE);
                } else {
//                    ((receiverViewHolder) holder).forwarded.setVisibility(View.GONE);
//                    ((receiverViewHolder) holder).grpMsgName.setVisibility(View.GONE);
                    //add ... line after group name is more than 20 char
                    ((receiverViewHolder) holder).forwarded.setVisibility(View.GONE);
                }


                if (model.getDataType().equals(Constant.img)) {

                    Log.d("TAG444", "com");
                    ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);

                    ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);

                    // Hide viewnew for all receiver messages


                    // for sender only 4-july-2023
                    if (model.getReplyKey().equals(Constant.ReplyKey)) {
                        // TODO: 03/09/25  NEW REPLY  CONTENT
                        ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).imgcardview.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((receiverViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((receiverViewHolder) holder).miceReply.setVisibility(View.GONE);

                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
//                        //here need to visible
//                        // important views
                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        Log.d("0909887", model.getReplyKey());

                        if (model.getReplyType().equals(Constant.Text)) {


                            ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);


                            ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);


                            ((receiverViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((receiverViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                            ((receiverViewHolder) holder).msgreplyText.setText("Photo");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.gallery);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));


                            File customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                            String exactPath = customFolder.getAbsolutePath();


                            if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {
                                Log.d("TAG", "statusReceiver: " + "existing");

                                File imageFile = new File(exactPath + "/" + model.getFileName());
                                try {


                                    String imageSource = exactPath + "/" + model.getFileName();
                                    ImageView targetImageView = ((receiverViewHolder) holder).imgreply;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    // ✅ Use new blur optimization to prevent black images and pixelation
                                    Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);


                                } catch (Exception ignored) {
                                    // Hide ImageView if an exception occurs
                                    ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                                    Log.d("ImageLoad", "Exception during image load: " + ignored.getMessage());
                                }
                                ((receiverViewHolder) holder).downlaod.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).progressBarImageview.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).blur.setVisibility(View.GONE);
                                // notifyDataSetChanged();
                            } else {
                                Log.d("TAG", "statusReceiver: " + "not exist");
                                //  ((receiverViewHolder) holder).downlaod.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).progressBarImageview.setVisibility(View.GONE);
                                String imageSource = model.getReplyOldData();
                                ImageView targetImageView = ((receiverViewHolder) holder).imgreply;
                                ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                // ✅ Use new blur optimization to prevent black images and pixelation
                                Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);


                                // notifyDataSetChanged();

                            }


                        }
                        ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {

                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).imgcardview.setVisibility(View.GONE);


                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);

                        if (model.getSelectionCount() != null) {
                            if (model.getSelectionCount().equals("1")) {
                                ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recImg.setVisibility(View.VISIBLE);


                                File customFolder2;
                                String exactPath2;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                    exactPath2 = customFolder2.getAbsolutePath();
                                } else {
                                    customFolder2 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                    exactPath2 = customFolder2.getAbsolutePath();
                                }
                                if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileName())) {
                                    Log.d("TAG", "statusxascac: " + "existingimage " + exactPath2 + "/" + model.getFileName());
                                    Log.d("loadImageIntoViewTT", "getImageWidth: " + model.getImageWidth());
                                    Log.d("loadImageIntoViewTT", "getImageHeight: " + model.getImageHeight());
                                    Log.d("loadImageIntoViewTT", "getAspectRatio: " + model.getAspectRatio());

                                    File imageFile = new File(exactPath2 + "/" + model.getFileName());


                                    String imageSource = exactPath2 + "/" + model.getFileName();
                                    ImageView targetImageView = ((receiverViewHolder) holder).recImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    // ✅ Use new blur optimization to prevent black images and pixelation

                                    BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, ((receiverViewHolder) holder).videoicon);


                                    Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, ((receiverViewHolder) holder).videoicon);
//


                                    ((receiverViewHolder) holder).downlaod.setVisibility(View.GONE);
                                    ((receiverViewHolder) holder).progressBarImageview.setVisibility(View.GONE);
                                } else {
                                    Log.d("TAG", "status: " + "notimage");


                                    String imageSource = model.getDocument();
                                    ImageView targetImageView = ((receiverViewHolder) holder).recImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, ((receiverViewHolder) holder).videoicon);


                                    Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, ((receiverViewHolder) holder).videoicon);


                                    ((receiverViewHolder) holder).downlaod.setVisibility(View.VISIBLE);
                                    ((receiverViewHolder) holder).progressBarImageview.setVisibility(View.GONE);

                                }

                            } else if (model.getSelectionCount().equals("2")) {

                                ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).overlayTextImg.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).img2.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).img4.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).img4Lyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img3.setVisibility(View.VISIBLE);

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImagesReceiver((receiverViewHolder) holder, model, requestOptions, position, true, mContext);


                                // ================= For selectionCount=2: Both images 125dp x 251.5dp =================
                                float heightInDp = 251.5f;
                                float widthInDp2 = 125f;

                                int heightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        heightInDp,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int widthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        widthInDp2,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                // ================= For img1 (Left side - left corners rounded) =================
                                ViewGroup.LayoutParams params1 = ((receiverViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = heightInPx;
                                    params1.width = widthInPx;
                                    ((receiverViewHolder) holder).img1.setLayoutParams(params1);
                                }

                                ShapeAppearanceModel shapeModel1 = ((receiverViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img3 (Right side - right corners rounded) =================
                                ViewGroup.LayoutParams params3 = ((receiverViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = heightInPx;
                                    params3.width = widthInPx;
                                    ((receiverViewHolder) holder).img3.setLayoutParams(params3);
                                }

                                ShapeAppearanceModel shapeModel3 = ((receiverViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .build();

                                ((receiverViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                Log.d("SelectionBunch", "Set both images for selectionCount=2: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");



                            } else if (model.getSelectionCount().equals("3")) {
                                ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).overlayTextImg.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).img2.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).img4.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img4Lyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img3.setVisibility(View.VISIBLE);

                                // ================= For img1 (Height: 251.5dp, Width: 125dp) =================
                                float img1HeightInDp = 251.5f;
                                float img1WidthInDp = 125f;
                                int img1HeightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img1HeightInDp,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int img1WidthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img1WidthInDp,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                ViewGroup.LayoutParams params1 = ((receiverViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = img1HeightInPx;
                                    params1.width = img1WidthInPx;
                                    ((receiverViewHolder) holder).img1.setLayoutParams(params1);
                                    Log.d("SelectionBunch", "Set img1 dimensions: " + img1WidthInPx + "x" + img1HeightInPx + "px (" + img1WidthInDp + "x" + img1HeightInDp + "dp)");
                                }

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                ShapeAppearanceModel shapeModel1 = ((receiverViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img3 (Height: 125dp, Width: 125dp) =================
                                float img3HeightInDp = 125f;
                                float img3WidthInDp = 125f;
                                int img3HeightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img3HeightInDp,
                                        ((receiverViewHolder) holder).img3.getResources().getDisplayMetrics()
                                );

                                int img3WidthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img3WidthInDp,
                                        ((receiverViewHolder) holder).img3.getResources().getDisplayMetrics()
                                );

                                ViewGroup.LayoutParams params3 = ((receiverViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = img3HeightInPx;
                                    params3.width = img3WidthInPx;
                                    ((receiverViewHolder) holder).img3.setLayoutParams(params3);
                                    Log.d("SelectionBunch", "Set img3 dimensions: " + img3WidthInPx + "x" + img3HeightInPx + "px (" + img3WidthInDp + "x" + img3HeightInDp + "dp)");
                                }

                                ShapeAppearanceModel shapeModel3 = ((receiverViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                // ================= For img4 (Height: 125dp, Width: 125dp) =================
                                float img4HeightInDp = 125f;
                                float img4WidthInDp = 125f;
                                int img4HeightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img4HeightInDp,
                                        ((receiverViewHolder) holder).img4.getResources().getDisplayMetrics()
                                );

                                int img4WidthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        img4WidthInDp,
                                        ((receiverViewHolder) holder).img4.getResources().getDisplayMetrics()
                                );

                                ViewGroup.LayoutParams params4 = ((receiverViewHolder) holder).img4.getLayoutParams();
                                if (params4 != null) {
                                    params4.height = img4HeightInPx;
                                    params4.width = img4WidthInPx;
                                    ((receiverViewHolder) holder).img4.setLayoutParams(params4);
                                    Log.d("SelectionBunch", "Set img4 dimensions: " + img4WidthInPx + "x" + img4HeightInPx + "px (" + img4WidthInDp + "x" + img4HeightInDp + "dp)");
                                }

                                ShapeAppearanceModel shapeModel4 = ((receiverViewHolder) holder).img4.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img4.setShapeAppearanceModel(shapeModel4);

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImagesReceiver((receiverViewHolder) holder, model, requestOptions, position, true, mContext);

                            } else
                            if (model.getSelectionCount().equals("4")) {
                                ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);

                                ((receiverViewHolder) holder).img2.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img4.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img4Lyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img3.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).overlayTextImg.setVisibility(View.GONE);

                                // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                float heightInDp = 125.5f;
                                float widthInDp4 = 125f;

                                int heightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        heightInDp,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int widthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        widthInDp4,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                // ================= For img1 (Top-left corner rounded) =================
                                ViewGroup.LayoutParams params1 = ((receiverViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = heightInPx;
                                    params1.width = widthInPx;
                                    ((receiverViewHolder) holder).img1.setLayoutParams(params1);
                                }

                                ShapeAppearanceModel shapeModel1 = ((receiverViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img2 (Bottom-left corner rounded) =================
                                Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                Log.d("SelectionBunch", "img2 initial state - visibility: " + ((receiverViewHolder) holder).img2.getVisibility() +
                                        ", width: " + ((receiverViewHolder) holder).img2.getWidth() +
                                        ", height: " + ((receiverViewHolder) holder).img2.getHeight());

                                ViewGroup.LayoutParams params2 = ((receiverViewHolder) holder).img2.getLayoutParams();
                                if (params2 != null) {
                                    Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                    params2.height = heightInPx;
                                    params2.width = widthInPx;
                                    ((receiverViewHolder) holder).img2.setLayoutParams(params2);

                                    // Force layout pass to apply the new dimensions
                                    ((receiverViewHolder) holder).img2.requestLayout();
                                    ((receiverViewHolder) holder).img2.invalidate();

                                    Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                    Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + ((receiverViewHolder) holder).img2.getWidth() +
                                            ", height: " + ((receiverViewHolder) holder).img2.getHeight());
                                } else {
                                    Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                }

                                ShapeAppearanceModel shapeModel2 = ((receiverViewHolder) holder).img2.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img2.setShapeAppearanceModel(shapeModel2);

                                // ================= For img3 (Top-right corner rounded) =================
                                ViewGroup.LayoutParams params3 = ((receiverViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = heightInPx;
                                    params3.width = widthInPx;
                                    ((receiverViewHolder) holder).img3.setLayoutParams(params3);
                                }

                                ShapeAppearanceModel shapeModel3 = ((receiverViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                // ================= For img4 (Bottom-right corner rounded) =================
                                ViewGroup.LayoutParams params4 = ((receiverViewHolder) holder).img4.getLayoutParams();
                                if (params4 != null) {
                                    params4.height = heightInPx;
                                    params4.width = widthInPx;
                                    ((receiverViewHolder) holder).img4.setLayoutParams(params4);
                                }

                                ShapeAppearanceModel shapeModel4 = ((receiverViewHolder) holder).img4.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .build();

                                ((receiverViewHolder) holder).img4.setShapeAppearanceModel(shapeModel4);

                                Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImagesReceiver((receiverViewHolder) holder, model, requestOptions, position, true, mContext);

                            } else {


                                ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).img2.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img4.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img4Lyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img1.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).img3.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).overlayTextImg.setVisibility(View.VISIBLE);


                                int a = Integer.parseInt(model.getSelectionCount());

                                ((receiverViewHolder) holder).overlayTextImg.setText("+ "+String.valueOf(a-3));

                                // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                float heightInDp = 125.5f;
                                float widthInDp4 = 125f;

                                int heightInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        heightInDp,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                int widthInPx = (int) TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        widthInDp4,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                float cornerRadius = TypedValue.applyDimension(
                                        TypedValue.COMPLEX_UNIT_DIP,
                                        20,
                                        ((receiverViewHolder) holder).img1.getResources().getDisplayMetrics()
                                );

                                // ================= For img1 (Top-left corner rounded) =================
                                ViewGroup.LayoutParams params1 = ((receiverViewHolder) holder).img1.getLayoutParams();
                                if (params1 != null) {
                                    params1.height = heightInPx;
                                    params1.width = widthInPx;
                                    ((receiverViewHolder) holder).img1.setLayoutParams(params1);
                                }

                                ShapeAppearanceModel shapeModel1 = ((receiverViewHolder) holder).img1.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img1.setShapeAppearanceModel(shapeModel1);

                                // ================= For img2 (Bottom-left corner rounded) =================
                                Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                Log.d("SelectionBunch", "img2 initial state - visibility: " + ((receiverViewHolder) holder).img2.getVisibility() +
                                        ", width: " + ((receiverViewHolder) holder).img2.getWidth() +
                                        ", height: " + ((receiverViewHolder) holder).img2.getHeight());

                                ViewGroup.LayoutParams params2 = ((receiverViewHolder) holder).img2.getLayoutParams();
                                if (params2 != null) {
                                    Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                    params2.height = heightInPx;
                                    params2.width = widthInPx;
                                    ((receiverViewHolder) holder).img2.setLayoutParams(params2);

                                    // Force layout pass to apply the new dimensions
                                    ((receiverViewHolder) holder).img2.requestLayout();
                                    ((receiverViewHolder) holder).img2.invalidate();

                                    Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                    Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + ((receiverViewHolder) holder).img2.getWidth() +
                                            ", height: " + ((receiverViewHolder) holder).img2.getHeight());
                                } else {
                                    Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                }

                                ShapeAppearanceModel shapeModel2 = ((receiverViewHolder) holder).img2.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img2.setShapeAppearanceModel(shapeModel2);

                                // ================= For img3 (Top-right corner rounded) =================
                                ViewGroup.LayoutParams params3 = ((receiverViewHolder) holder).img3.getLayoutParams();
                                if (params3 != null) {
                                    params3.height = heightInPx;
                                    params3.width = widthInPx;
                                    ((receiverViewHolder) holder).img3.setLayoutParams(params3);
                                }

                                ShapeAppearanceModel shapeModel3 = ((receiverViewHolder) holder).img3.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                        .build();

                                ((receiverViewHolder) holder).img3.setShapeAppearanceModel(shapeModel3);

                                // ================= For img4 (Bottom-right corner rounded) =================
                                ViewGroup.LayoutParams params4 = ((receiverViewHolder) holder).img4.getLayoutParams();
                                if (params4 != null) {
                                    params4.height = heightInPx;
                                    params4.width = widthInPx;
                                    ((receiverViewHolder) holder).img4.setLayoutParams(params4);
                                }

                                ShapeAppearanceModel shapeModel4 = ((receiverViewHolder) holder).img4.getShapeAppearanceModel()
                                        .toBuilder()
                                        .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                        .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                        .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                        .build();

                                ((receiverViewHolder) holder).img4.setShapeAppearanceModel(shapeModel4);

                                Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                        + ", selectionCount=" + model.getSelectionCount()
                                        + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                otherFunctions.bindSelectionBunchImagesReceiver((receiverViewHolder) holder, model, requestOptions, position, true, mContext);
                            }
                        } else {
                            ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.VISIBLE);

                            ((receiverViewHolder) holder).recImg.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                        }




                    }

                    ((receiverViewHolder) holder).recLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {


                                if (model.getReplyKey().equals(Constant.ReplyKey)) {

                                    messageRecView.scrollToPosition(Integer.parseInt(model.getReplyCrtPostion()));


                                } else {

                                    if (((receiverViewHolder) holder).downlaod.getVisibility() == View.VISIBLE) {

                                        ((receiverViewHolder) holder).downlaod.performClick();

                                    } else if (((receiverViewHolder) holder).downlaod.getVisibility() == View.GONE) {

                                        if (((receiverViewHolder) holder).progressBarImageview.getVisibility() == View.GONE) {
//

                                            File customFolder;
                                            String exactPath = null;
                                            //android 10
                                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                                customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                                exactPath = customFolder.getAbsolutePath();
                                                Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                            } else {
                                                customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                                exactPath = customFolder.getAbsolutePath();

                                            }

                                            if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {


                                                if(model.getSelectionBunch().size() > 1){
                                                    // Handle multiple images - create imageList with local storage check
                                                    ArrayList<String> imageList = new ArrayList<>();
                                                    int currentPosition = 0;

                                                    Log.d("ChatAdapter", "Processing " + model.getSelectionBunch().size() + " images for multiple display");
                                                    Log.d("ChatAdapter", "Local storage path: " + exactPath);

                                                    // Get all files in the directory
                                                    File directory = new File(exactPath);
                                                    String[] allFiles = null;
                                                    if (directory.exists() && directory.isDirectory()) {
                                                        allFiles = directory.list();
                                                        if (allFiles != null) {
                                                            Log.d("ChatAdapter", "All files in directory: " + java.util.Arrays.toString(allFiles));
                                                        }
                                                    }

                                                    // Create a list of available local files with "img_" prefix
                                                    ArrayList<String> availableLocalFiles = new ArrayList<>();
                                                    if (allFiles != null) {
                                                        for (String file : allFiles) {
                                                            if (file.startsWith("img_")) {
                                                                availableLocalFiles.add(file);
                                                            }
                                                        }
                                                    }
                                                    Log.d("ChatAdapter", "Available local files with 'img_' prefix: " + availableLocalFiles);

                                                    // For now, use network URLs to ensure correct image order
                                                    // This prevents using wrong local files from different image sets
                                                    Log.d("ChatAdapter", "Using network URLs to ensure correct image order and prevent wrong local file usage");

                                                    for (int i = 0; i < model.getSelectionBunch().size(); i++) {
                                                        selectionBunchModel bunchModel = model.getSelectionBunch().get(i);
                                                        String fileName = bunchModel.getFileName();
                                                        String networkUrl = bunchModel.getImgUrl();

                                                        Log.d("ChatAdapter", "Image " + i + " - fileName: " + fileName + ", networkUrl: " + networkUrl);

                                                        // Create bundle with both fileName and URL
                                                        String bundleData = fileName + "|" + networkUrl;

                                                        // Use network image to ensure correct order and prevent wrong local file usage
                                                        if (networkUrl != null && !networkUrl.isEmpty()) {
                                                            imageList.add(bundleData);
                                                            Log.d("ChatAdapter", "✅ Added bundle data " + i + ": " + bundleData);
                                                        } else {
                                                            // Use document as fallback
                                                            if (model.getDocument() != null && !model.getDocument().isEmpty()) {
                                                                imageList.add(model.getDocument());
                                                                Log.d("ChatAdapter", "✅ Added document fallback " + i + ": " + model.getDocument());
                                                            } else {
                                                                Log.w("ChatAdapter", "❌ No valid image source found for image " + i);
                                                            }
                                                        }
                                                    }

                                                    Log.d("ChatAdapter", "Final image list size: " + imageList.size() + " (all network URLs for correct order)");

                                                    if (!imageList.isEmpty()) {
                                                        // Use dialog with filename-based positioning
                                                        Log.d("ChatAdapter", "=== OPENING MULTIPLE IMAGE DIALOG (2nd occurrence) ===");
                                                        Log.d("ChatAdapter", "Target filename: " + model.getFileName());
                                                        Log.d("ChatAdapter", "Image list size: " + imageList.size());
                                                        Log.d("ChatAdapter", "Current position: " + currentPosition);

                                                        MultipleImageDialogHelper.showDialogWithFilename(
                                                                chattingScreen.getSupportFragmentManager(),
                                                                imageList,
                                                                model.getFileName(), // Use filename for precise positioning
                                                                Constant.senderViewHolder
                                                        );
                                                    } else {
                                                        Log.w("ChatAdapter", "No images found for multiple image display");
                                                    }
                                                }else
                                                {

                                                    Intent intent = new Intent(mContext, show_image_Screen.class);
                                                    intent.putExtra("imageKey", model.getFileName());
                                                    intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                }

                                            } else {


                                            }


                                        }
                                    }


                                }
                            }
                        }
                    });

                    ((receiverViewHolder) holder).downlaod.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                            senderReceiverDownload.startReceiverImageDownloadWithProgressFirebase(holder, model, mContext);


                        }
                    });


                    ((receiverViewHolder) holder).recLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                            TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                            TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                            RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                            RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                            FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                            ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                            TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                            ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);
                            RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                            ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                            TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                            FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                            ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                            CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                            LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                            TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                            TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                            TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);


                            RelativeLayout recImgBunchLyt;
                            ShapeableImageView img1, img3, img2, img4;
                            FrameLayout img4Lyt;
                            TextView overlayTextImg;
                            FloatingActionButton downlaodImgBunch;
                            TextView downloadPercentageImageSenderBunch;


                            recImgBunchLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.recImgBunchLyt);
                            img1 = BlurHelper.dialogLayoutColor.findViewById(R.id.img1);
                            img2 = BlurHelper.dialogLayoutColor.findViewById(R.id.img2);
                            img3 = BlurHelper.dialogLayoutColor.findViewById(R.id.img3);
                            img4 = BlurHelper.dialogLayoutColor.findViewById(R.id.img4);
                            img4Lyt = BlurHelper.dialogLayoutColor.findViewById(R.id.img4Lyt);
                            overlayTextImg = BlurHelper.dialogLayoutColor.findViewById(R.id.overlayTextImg);
                            downlaodImgBunch = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodImgBunch);
                            downloadPercentageImageSenderBunch = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageImageSenderBunch);

                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                            emojiLongRec.startAnimation(fadeIn);


                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                            cardview.startAnimation(animationdd);
                            recTime.setText(model.getTime());


                            // main codeing from here
                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            recMessage.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            recVideo.setVisibility(View.GONE);
                            receivervideoLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);
                            viewnew.setVisibility(View.VISIBLE);

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                recMessage.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                recImg.setVisibility(View.GONE);
                                receiverImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.VISIBLE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                miceReply.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    recMessage.setVisibility(View.GONE);
                                    recVideo.setVisibility(View.GONE);
                                    receivervideoLyt.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                    ));
                                    msgreplyText.setText("Photo");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.gallery);
                                    int size = (int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                    );
                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));
                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                    ));

                                    File customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                    String exactPath = customFolder.getAbsolutePath();

                                    if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {
                                        String imageSource = exactPath + "/" + model.getFileName();
                                        ImageView targetImageView = imgreply;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        downlaod.setVisibility(View.GONE);
                                        progressBarImageview.setVisibility(View.GONE);
                                        blur.setVisibility(View.GONE);
                                    } else {
                                        progressBarImageview.setVisibility(View.GONE);
                                        String imageSource = model.getReplyOldData();
                                        ImageView targetImageView = imgreply;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                    }
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);

                                if (model.getSelectionCount() != null) {
                                    if (model.getSelectionCount().equals("1")) {
                                        receiverImgLyt.setVisibility(View.VISIBLE);
                                        recImgBunchLyt.setVisibility(View.GONE);
                                        recImg.setVisibility(View.VISIBLE);


                                        File customFolder2;
                                        String exactPath2;
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                            exactPath2 = customFolder2.getAbsolutePath();
                                        } else {
                                            customFolder2 = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Images");
                                            exactPath2 = customFolder2.getAbsolutePath();
                                        }
                                        if (otherFunctions.doesFileExist(exactPath2 + "/" + model.getFileName())) {
                                            Log.d("TAG", "statusxascac: " + "existingimage " + exactPath2 + "/" + model.getFileName());
                                            Log.d("loadImageIntoViewTT", "getImageWidth: " + model.getImageWidth());
                                            Log.d("loadImageIntoViewTT", "getImageHeight: " + model.getImageHeight());
                                            Log.d("loadImageIntoViewTT", "getAspectRatio: " + model.getAspectRatio());

                                            File imageFile = new File(exactPath2 + "/" + model.getFileName());


                                            String imageSource = exactPath2 + "/" + model.getFileName();
                                            ImageView targetImageView = recImg;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            // ✅ Use new blur optimization to prevent black images and pixelation

                                            BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);


                                            Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);
//


                                            downlaod.setVisibility(View.GONE);
                                            progressBarImageview.setVisibility(View.GONE);
                                        } else {
                                            Log.d("TAG", "status: " + "notimage");


                                            String imageSource = model.getDocument();
                                            ImageView targetImageView = recImg;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);


                                            Constant.loadImageIntoView(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model, videoicon);


                                            downlaod.setVisibility(View.VISIBLE);
                                            progressBarImageview.setVisibility(View.GONE);

                                        }

                                    } else if (model.getSelectionCount().equals("2")) {

                                        receiverImgLyt.setVisibility(View.GONE);
                                        recImgBunchLyt.setVisibility(View.VISIBLE);
                                        recImg.setVisibility(View.GONE);
                                        overlayTextImg.setVisibility(View.GONE);
                                        img2.setVisibility(View.GONE);
                                        img4.setVisibility(View.GONE);
                                        img4Lyt.setVisibility(View.GONE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);


                                        // ================= For selectionCount=2: Both images 125dp x 251.5dp =================
                                        float heightInDp = 251.5f;
                                        float widthInDp2 = 125f;

                                        int heightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                heightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int widthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                widthInDp2,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        // ================= For img1 (Left side - left corners rounded) =================
                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = heightInPx;
                                            params1.width = widthInPx;
                                            img1.setLayoutParams(params1);
                                        }

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img3 (Right side - right corners rounded) =================
                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = heightInPx;
                                            params3.width = widthInPx;
                                            img3.setLayoutParams(params3);
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        Log.d("SelectionBunch", "Set both images for selectionCount=2: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");



                                    } else if (model.getSelectionCount().equals("3")) {
                                        receiverImgLyt.setVisibility(View.GONE);
                                        recImgBunchLyt.setVisibility(View.VISIBLE);
                                        recImg.setVisibility(View.GONE);
                                        overlayTextImg.setVisibility(View.GONE);
                                        img2.setVisibility(View.GONE);
                                        img4.setVisibility(View.VISIBLE);
                                        img4Lyt.setVisibility(View.VISIBLE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);

                                        // ================= For img1 (Height: 251.5dp, Width: 125dp) =================
                                        float img1HeightInDp = 251.5f;
                                        float img1WidthInDp = 125f;
                                        int img1HeightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img1HeightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int img1WidthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img1WidthInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = img1HeightInPx;
                                            params1.width = img1WidthInPx;
                                            img1.setLayoutParams(params1);
                                            Log.d("SelectionBunch", "Set img1 dimensions: " + img1WidthInPx + "x" + img1HeightInPx + "px (" + img1WidthInDp + "x" + img1HeightInDp + "dp)");
                                        }

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img3 (Height: 125dp, Width: 125dp) =================
                                        float img3HeightInDp = 125f;
                                        float img3WidthInDp = 125f;
                                        int img3HeightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img3HeightInDp,
                                                img3.getResources().getDisplayMetrics()
                                        );

                                        int img3WidthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img3WidthInDp,
                                                img3.getResources().getDisplayMetrics()
                                        );

                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = img3HeightInPx;
                                            params3.width = img3WidthInPx;
                                            img3.setLayoutParams(params3);
                                            Log.d("SelectionBunch", "Set img3 dimensions: " + img3WidthInPx + "x" + img3HeightInPx + "px (" + img3WidthInDp + "x" + img3HeightInDp + "dp)");
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        // ================= For img4 (Height: 125dp, Width: 125dp) =================
                                        float img4HeightInDp = 125f;
                                        float img4WidthInDp = 125f;
                                        int img4HeightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img4HeightInDp,
                                                img4.getResources().getDisplayMetrics()
                                        );

                                        int img4WidthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                img4WidthInDp,
                                                img4.getResources().getDisplayMetrics()
                                        );

                                        ViewGroup.LayoutParams params4 = img4.getLayoutParams();
                                        if (params4 != null) {
                                            params4.height = img4HeightInPx;
                                            params4.width = img4WidthInPx;
                                            img4.setLayoutParams(params4);
                                            Log.d("SelectionBunch", "Set img4 dimensions: " + img4WidthInPx + "x" + img4HeightInPx + "px (" + img4WidthInDp + "x" + img4HeightInDp + "dp)");
                                        }

                                        ShapeAppearanceModel shapeModel4 = img4.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img4.setShapeAppearanceModel(shapeModel4);

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);

                                    } else
                                    if (model.getSelectionCount().equals("4")) {
                                        receiverImgLyt.setVisibility(View.GONE);
                                        recImgBunchLyt.setVisibility(View.VISIBLE);
                                        recImg.setVisibility(View.GONE);

                                        img2.setVisibility(View.VISIBLE);
                                        img4.setVisibility(View.VISIBLE);
                                        img4Lyt.setVisibility(View.VISIBLE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);
                                        overlayTextImg.setVisibility(View.GONE);

                                        // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                        float heightInDp = 125.5f;
                                        float widthInDp4 = 125f;

                                        int heightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                heightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int widthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                widthInDp4,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        // ================= For img1 (Top-left corner rounded) =================
                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = heightInPx;
                                            params1.width = widthInPx;
                                            img1.setLayoutParams(params1);
                                        }

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img2 (Bottom-left corner rounded) =================
                                        Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                        Log.d("SelectionBunch", "img2 initial state - visibility: " + img2.getVisibility() +
                                                ", width: " + img2.getWidth() +
                                                ", height: " + img2.getHeight());

                                        ViewGroup.LayoutParams params2 = img2.getLayoutParams();
                                        if (params2 != null) {
                                            Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                            params2.height = heightInPx;
                                            params2.width = widthInPx;
                                            img2.setLayoutParams(params2);

                                            // Force layout pass to apply the new dimensions
                                            img2.requestLayout();
                                            img2.invalidate();

                                            Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                            Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + img2.getWidth() +
                                                    ", height: " + img2.getHeight());
                                        } else {
                                            Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                        }

                                        ShapeAppearanceModel shapeModel2 = img2.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img2.setShapeAppearanceModel(shapeModel2);

                                        // ================= For img3 (Top-right corner rounded) =================
                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = heightInPx;
                                            params3.width = widthInPx;
                                            img3.setLayoutParams(params3);
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        // ================= For img4 (Bottom-right corner rounded) =================
                                        ViewGroup.LayoutParams params4 = img4.getLayoutParams();
                                        if (params4 != null) {
                                            params4.height = heightInPx;
                                            params4.width = widthInPx;
                                            img4.setLayoutParams(params4);
                                        }

                                        ShapeAppearanceModel shapeModel4 = img4.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .build();

                                        img4.setShapeAppearanceModel(shapeModel4);

                                        Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);

                                    } else {


                                        receiverImgLyt.setVisibility(View.GONE);
                                        recImgBunchLyt.setVisibility(View.VISIBLE);
                                        recImg.setVisibility(View.GONE);
                                        img2.setVisibility(View.VISIBLE);
                                        img4.setVisibility(View.VISIBLE);
                                        img4Lyt.setVisibility(View.VISIBLE);
                                        img1.setVisibility(View.VISIBLE);
                                        img3.setVisibility(View.VISIBLE);
                                        overlayTextImg.setVisibility(View.VISIBLE);


                                        int a = Integer.parseInt(model.getSelectionCount());

                                        overlayTextImg.setText("+ "+String.valueOf(a-3));

                                        // ================= For selectionCount=4: All images 125dp x 125.5dp =================
                                        float heightInDp = 125.5f;
                                        float widthInDp4 = 125f;

                                        int heightInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                heightInDp,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        int widthInPx = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                widthInDp4,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        float cornerRadius = TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP,
                                                20,
                                                img1.getResources().getDisplayMetrics()
                                        );

                                        // ================= For img1 (Top-left corner rounded) =================
                                        ViewGroup.LayoutParams params1 = img1.getLayoutParams();
                                        if (params1 != null) {
                                            params1.height = heightInPx;
                                            params1.width = widthInPx;
                                            img1.setLayoutParams(params1);
                                        }

                                        ShapeAppearanceModel shapeModel1 = img1.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img1.setShapeAppearanceModel(shapeModel1);

                                        // ================= For img2 (Bottom-left corner rounded) =================
                                        Log.d("SelectionBunch", "=== IMG2 SETUP START for selectionCount=4 ===");
                                        Log.d("SelectionBunch", "img2 initial state - visibility: " + img2.getVisibility() +
                                                ", width: " + img2.getWidth() +
                                                ", height: " + img2.getHeight());

                                        ViewGroup.LayoutParams params2 = img2.getLayoutParams();
                                        if (params2 != null) {
                                            Log.d("SelectionBunch", "img2 original layoutParams: " + params2.width + "x" + params2.height);
                                            params2.height = heightInPx;
                                            params2.width = widthInPx;
                                            img2.setLayoutParams(params2);

                                            // Force layout pass to apply the new dimensions
                                            img2.requestLayout();
                                            img2.invalidate();

                                            Log.d("SelectionBunch", "Set img2 dimensions for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125.5dp)");
                                            Log.d("SelectionBunch", "img2 after setLayoutParams - width: " + img2.getWidth() +
                                                    ", height: " + img2.getHeight());
                                        } else {
                                            Log.e("SelectionBunch", "img2 layoutParams is NULL!");
                                        }

                                        ShapeAppearanceModel shapeModel2 = img2.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img2.setShapeAppearanceModel(shapeModel2);

                                        // ================= For img3 (Top-right corner rounded) =================
                                        ViewGroup.LayoutParams params3 = img3.getLayoutParams();
                                        if (params3 != null) {
                                            params3.height = heightInPx;
                                            params3.width = widthInPx;
                                            img3.setLayoutParams(params3);
                                        }

                                        ShapeAppearanceModel shapeModel3 = img3.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, 0f)
                                                .build();

                                        img3.setShapeAppearanceModel(shapeModel3);

                                        // ================= For img4 (Bottom-right corner rounded) =================
                                        ViewGroup.LayoutParams params4 = img4.getLayoutParams();
                                        if (params4 != null) {
                                            params4.height = heightInPx;
                                            params4.width = widthInPx;
                                            img4.setLayoutParams(params4);
                                        }

                                        ShapeAppearanceModel shapeModel4 = img4.getShapeAppearanceModel()
                                                .toBuilder()
                                                .setTopLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomLeftCorner(CornerFamily.ROUNDED, 0f)
                                                .setTopRightCorner(CornerFamily.ROUNDED, 0f)
                                                .setBottomRightCorner(CornerFamily.ROUNDED, cornerRadius)
                                                .build();

                                        img4.setShapeAppearanceModel(shapeModel4);

                                        Log.d("SelectionBunch", "Set all images for selectionCount=4: " + widthInPx + "x" + heightInPx + "px (125dp x 125dp)");

                                        Log.d("SelectionBunch", "Binding selectionBunch for messageId=" + model.getModelId()
                                                + ", selectionCount=" + model.getSelectionCount()
                                                + ", bunchSize=" + (model.getSelectionBunch() != null ? model.getSelectionBunch().size() : 0));

                                        otherFunctions.bindSelectionBunchImagesSenderLong( model, requestOptions, position, true,img1,img2,img3,img4,img4Lyt,videoicon,overlayTextImg, mContext);
                                    }
                                } else {
                                    receiverImgLyt.setVisibility(View.VISIBLE);

                                    recImg.setVisibility(View.VISIBLE);
                                    recImgBunchLyt.setVisibility(View.GONE);
                                }


                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);

                                File customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Images");
                                String exactPath = customFolder.getAbsolutePath();

                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {
                                    String imageSource = exactPath + "/" + model.getFileName();
                                    ImageView targetImageView = recImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                    otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);
                                    downlaod.setVisibility(View.GONE);
                                    progressBarImageview.setVisibility(View.GONE);
                                    blur.setVisibility(View.GONE);
                                } else {
                                    downlaod.setVisibility(View.VISIBLE);
                                    progressBarImageview.setVisibility(View.GONE);
                                    String imageSource = model.getDocument();
                                    ImageView targetImageView = recImg;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                    otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);
                                }
                            }


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);

                            if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                deleteLyt.setVisibility(View.GONE);
                            } else {
                                deleteLyt.setVisibility(View.VISIBLE);
                            }
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            if (model.getDataType().equals(Constant.Text)) {


                                if (model.getMessage().equals("You deleted this message")) {
                                    copy.setVisibility(View.GONE);
                                } else {
                                    copy.setVisibility(View.VISIBLE);
                                    copy.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                            ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                            clipboardManager.setPrimaryClip(clipData);
                                            Log.d("TAG", "onClick: " + model.getMessage());
                                            BlurHelper.dialogLayoutColor.dismiss();
                                        }
                                    });
                                }
                            } else {
                                copy.setVisibility(View.GONE);
                            }


                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);
                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);


                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);

                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            String modelId = database.getReference().push().getKey();
                                            int listcount = forwardNameList.size();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }

                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);


                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();


                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }

                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });

                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    BlurHelper.dialogLayoutColor.dismiss();

                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();

                                    ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                    Log.d("data000", model.getReceiverUid());
                                    Log.d("data000", model.getModelId());
                                    database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                        @Override
                                        public void onSuccess(Void unused) {

                                            // todo here we need to delete from sqlLite database

                                            try {
                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                            } catch (Exception e) {
                                                throw new RuntimeException(e);
                                            }
                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                            /// Need to store delete key data here


                                            Webservice.delete_chatingindivisualReceiver(mContext, model.getModelId(), model.getUid() + model.getReceiverUid(), model.getUid(), model.getReceiverUid());
                                        }
                                    });
                                }
                            });


                            return true;
                        }
                    });

                } else
                if (model.getDataType().equals(Constant.video)) {


                    Log.d("TAG444", "com");
                    ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);

                    ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);

                    // Hide viewnew for all receiver messages


                    // for sender only 4-july-2023
                    if (model.getReplyKey().equals(Constant.ReplyKey)) {

                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).imgcardview.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((receiverViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((receiverViewHolder) holder).miceReply.setVisibility(View.GONE);


                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
//                        //here need to visible
//                        // important views
                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        Log.d("0909887", model.getReplyKey());

                        if (model.getReplyType().equals(Constant.Text)) {


                            ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);

                            ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);


                            ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);


                            ((receiverViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((receiverViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));

                            ((receiverViewHolder) holder).msgreplyText.setText("Video");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.videopng);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));


                            File customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");


                            String exactPath = customFolder.getAbsolutePath();


                            if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {

                                Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());

                                ((receiverViewHolder) holder).downlaodVideo.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).progressBarVideo.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).blurVideo.setVisibility(View.GONE);

                                File imageFile = new File(exactPath + "/" + model.getFileNameThumbnail());
                                try {
                                    String imageSource = exactPath + "/" + model.getFileNameThumbnail();
                                    ImageView targetImageView = ((receiverViewHolder) holder).imgreply;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    // ✅ Use new blur optimization to prevent black images and pixelation
                                    Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);


                                } catch (Exception ignored) {
                                    // Hide ImageView if an exception occurs
                                    ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                                    Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                }


                            } else {
                                Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail() + " not exist ");

                                try {
                                    String imageSource = model.getReplyOldData();
                                    ImageView targetImageView = ((receiverViewHolder) holder).imgreply;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);

                                    // Set image dimensions to maintain aspect ratio
                                    //   otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);

                                } catch (Exception ignored) {
                                    // Hide ImageView if an exception occurs
                                    ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                                    Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                }


                            }


                        }
                        ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recVideo.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.VISIBLE);

                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);

                        File customFolder;


                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            // Android 10 (API 29) and above → Scoped Storage
                            // Use app-specific external storage
                            customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");

                        } else {
                            // Android 9 (API 28) and below → Legacy access allowed
                            customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");

                        }

                        File customFolderVideo = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                        String exactPath = customFolder.getAbsolutePath();
                        String exactPathVideo = customFolderVideo.getAbsolutePath();


                        if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {

                            Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail());

                            ((receiverViewHolder) holder).downlaodVideo.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).progressBarVideo.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).blurVideo.setVisibility(View.GONE);

                            File imageFile = new File(exactPath + "/" + model.getFileNameThumbnail());
                            try {

                                String imageSource = exactPath + "/" + model.getFileNameThumbnail();
                                ImageView targetImageView = ((receiverViewHolder) holder).recVideo;
                                ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                // ✅ Use new blur optimization to prevent black images and pixelation
                                BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, ((receiverViewHolder) holder).videoicon);
                                otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);


                            } catch (Exception ignored) {
                                // Hide ImageView if an exception occurs
                                ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                                Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                            }

                            // for checking file is in folder or not
                            if (otherFunctions.doesFileExist(exactPathVideo + "/" + model.getFileName())) {

                                ((receiverViewHolder) holder).downlaodVideo.setVisibility(View.GONE);
                            } else {
                                ((receiverViewHolder) holder).downlaodVideo.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).progressBarVideo.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).blurVideo.setVisibility(View.GONE);
                            }


                        } else {
                            Log.d("TAG", "getFileNameThumbnail: " + model.getFileNameThumbnail() + " not exist ");

                            ((receiverViewHolder) holder).downlaodVideo.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).progressBarVideo.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).blurVideo.setVisibility(View.GONE);


                            try {

                                String imageSource = model.getThumbnail();
                                ImageView targetImageView = ((receiverViewHolder) holder).recVideo;
                                ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                // ✅ Use new blur optimization to prevent black images and pixelation
                                BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, ((receiverViewHolder) holder).videoicon);
                                otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);


                            } catch (Exception ignored) {
                                // Hide ImageView if an exception occurs
                                ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                                Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                            }


                        }


                    }

                    ((receiverViewHolder) holder).downlaodVideo.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            senderReceiverDownload.startVideoDownloadWithProgress(holder, model, mContext);


                        }
                    });
                    ((receiverViewHolder) holder).recLinear.setOnClickListener(new View.OnClickListener() {

                        @OptIn(markerClass = UnstableApi.class)
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }
                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {

                                if (((receiverViewHolder) holder).downlaodVideo.getVisibility() == View.VISIBLE) {

                                    ((receiverViewHolder) holder).downlaodVideo.performClick();

                                } else if (((receiverViewHolder) holder).downlaodVideo.getVisibility() == View.GONE) {


                                    if (((receiverViewHolder) holder).progressBarVideo.getVisibility() == View.GONE) {


                                        File customFolder;
                                        String exactPath = null;
                                        //android 10
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                            exactPath = customFolder.getAbsolutePath();
                                            Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                        } else {
                                            customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                            exactPath = customFolder.getAbsolutePath();

                                        }

                                        if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {

                                            Intent intent = new Intent(mContext, show_video_playerScreen.class);
                                            intent.putExtra("videoUri", model.getFileName());
                                            intent.putExtra("viewHolderTypeKey", Constant.receiverViewHolder);
                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                        } else {
                                            Intent intent = new Intent(mContext, show_video_playerScreen.class);
                                            intent.putExtra("videoUri", model.getDocument());
                                            intent.putExtra("viewHolderTypeKey", Constant.receiverViewHolder);
                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                        }


                                    }
                                }
//                                Intent intent = new Intent(mContext, show_image_Screen.class);
//                                intent.putExtra("imageKey", model.getDocument());
//                                mContext.startActivity(intent);
                            }
                        }
                    });
                    ((receiverViewHolder) holder).receivervideoLyt.setOnClickListener(new View.OnClickListener() {
                        @OptIn(markerClass = UnstableApi.class)
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {

                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });
                            } else {

                                if (((receiverViewHolder) holder).downlaodVideo.getVisibility() == View.VISIBLE) {

                                    ((receiverViewHolder) holder).downlaodVideo.performClick();

                                } else if (((receiverViewHolder) holder).downlaodVideo.getVisibility() == View.GONE) {


                                    if (((receiverViewHolder) holder).progressBarVideo.getVisibility() == View.GONE) {


                                        File customFolder;
                                        String exactPath = null;
                                        //android 10
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                            exactPath = customFolder.getAbsolutePath();
                                            Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                        } else {
                                            customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                            exactPath = customFolder.getAbsolutePath();

                                        }

                                        if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {

                                            Intent intent = new Intent(mContext, show_video_playerScreen.class);
                                            intent.putExtra("videoUri", model.getFileName());
                                            intent.putExtra("viewHolderTypeKey", Constant.receiverViewHolder);
                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                        } else {
                                            Intent intent = new Intent(mContext, show_video_playerScreen.class);
                                            intent.putExtra("videoUri", model.getDocument());
                                            intent.putExtra("viewHolderTypeKey", Constant.receiverViewHolder);
                                            SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                        }

                                    }
                                }
//                                Intent intent = new Intent(mContext, show_image_Screen.class);
//                                intent.putExtra("imageKey", model.getDocument());
//                                mContext.startActivity(intent);
                            }
                        }
                    });

                    ((receiverViewHolder) holder).receivervideoLyt.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return true;
                            }

                            // Show long press dialogue for receiver video messages with proper positioning
                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];

                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            // Set up dialogue content for receiver video messages
                            TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                            TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                            RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);

                            // Set time
                            recTime.setText(model.getTime());

                            // Hide other message types
                            readMore.setVisibility(View.GONE);
                            replylyoutGlobal.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            recMessage.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);

                            // Show video content
                            receivervideoLyt.setVisibility(View.VISIBLE);
                            videoicon.setVisibility(View.VISIBLE);
                            viewnew.setVisibility(View.VISIBLE);

                            // Set video content
                            if (!model.getCaption().equals("")) {
                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                                captionText.setVisibility(View.VISIBLE);
                                captionText.setText(model.getCaption());
                            } else {
                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                                captionText.setVisibility(View.GONE);
                            }

                            // Load video thumbnail and set dimensions
                            try {
                                File customFolder;
                                String exactPath = null;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                    exactPath = customFolder.getAbsolutePath();
                                } else {
                                    customFolder = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Videos");
                                    exactPath = customFolder.getAbsolutePath();
                                }

                                String imageSource;
                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {
                                    imageSource = exactPath + "/" + model.getFileNameThumbnail();
                                } else {
                                    imageSource = model.getThumbnail();
                                }

                                // Set video dimensions from database
                                if (!model.getImageWidth().equals("") && !model.getImageHeight().equals("")) {
                                    try {
                                        int width = Integer.parseInt(model.getImageWidth());
                                        int height = Integer.parseInt(model.getImageHeight());
                                        if (width > 0 && height > 0) {
                                            ViewGroup.LayoutParams layoutParams = videoicon.getLayoutParams();
                                            layoutParams.width = width;
                                            layoutParams.height = height;
                                            videoicon.setLayoutParams(layoutParams);
                                        }
                                    } catch (NumberFormatException e) {
                                        Log.e("VideoDimensions", "Error parsing video dimensions: " + e.getMessage());
                                    }
                                }

                                // Load video thumbnail
                                ViewGroup parentLayout = (ViewGroup) videoicon.getParent();
                                RequestOptions requestOptions = new RequestOptions()

                                        .error(R.drawable.inviteimg)
                                        .diskCacheStrategy(com.bumptech.glide.load.engine.DiskCacheStrategy.ALL);

                                BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, videoicon, parentLayout, position, model, videoicon);
                                Constant.loadImageIntoView(mContext, imageSource, requestOptions, videoicon, parentLayout, position, true, model, videoicon);

                            } catch (Exception e) {
                                Log.e("VideoThumbnailLoad", "Exception loading video thumbnail: " + e.getMessage());
                                videoicon.setVisibility(View.VISIBLE);
                            }

                            // Add animation
                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_animation);
                            cardview.startAnimation(animationdd);

                            // Add emoji functionality
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);

                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }
                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);
                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);
                                }
                            });

                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down);
                            emojiLongRec.startAnimation(fadeIn);

                            return true;
                        }
                    });

                    ((receiverViewHolder) holder).recLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                            TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                            TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                            RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            ProgressBar progressBarVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarVideo);
                            AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View blurVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.blurVideo);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);
                            FloatingActionButton downlaodVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodVideo);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                            RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                            FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                            ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                            TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                            ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);
                            RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                            ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                            TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                            FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                            ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                            CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                            LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                            TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                            TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                            TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                            emojiLongRec.startAnimation(fadeIn);


                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                            cardview.startAnimation(animationdd);
                            recTime.setText(model.getTime());


                            // main codeing starting from here

                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            recMessage.setVisibility(View.GONE);
                            recImg.setVisibility(View.GONE);
                            receiverImgLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);
                            viewnew.setVisibility(View.VISIBLE);


                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                imgcardview.setVisibility(View.VISIBLE);
                                recMessage.setVisibility(View.GONE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                receiverImgLyt.setVisibility(View.GONE);
                                recImg.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                recVideo.setVisibility(View.GONE);
                                receivervideoLyt.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                miceReply.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    recMessage.setVisibility(View.GONE);
                                    recImg.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                    ));
                                    msgreplyText.setText("Video");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.videopng);
                                    int size = (int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                    );
                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));
                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                    ));

                                    File customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                    String exactPath = customFolder.getAbsolutePath();

                                    if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                        progressBarVideo.setVisibility(View.GONE);
                                        blurVideo.setVisibility(View.GONE);
                                        String imageSource = exactPath + "/" + model.getFileNameThumbnail();
                                        ImageView targetImageView = imgreply;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        try {
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        } catch (Exception ignored) {
                                            recVideo.setVisibility(View.GONE);
                                            Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                        }
                                    } else {
                                        try {
                                            String imageSource = model.getReplyOldData();
                                            ImageView targetImageView = imgreply;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        } catch (Exception ignored) {
                                            recVideo.setVisibility(View.GONE);
                                            Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                        }
                                    }
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                recVideo.setVisibility(View.VISIBLE);
                                receivervideoLyt.setVisibility(View.VISIBLE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);

                                File customFolder;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                } else {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                }
                                File customFolderVideo = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                String exactPath = customFolder.getAbsolutePath();
                                String exactPathVideo = customFolderVideo.getAbsolutePath();

                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {
                                    downlaodVideo.setVisibility(View.GONE);
                                    progressBarVideo.setVisibility(View.GONE);
                                    blurVideo.setVisibility(View.GONE);
                                    String imageSource = exactPath + "/" + model.getFileNameThumbnail();
                                    ImageView targetImageView = recVideo;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    try {
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);
                                    } catch (Exception ignored) {
                                        recVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }

                                    if (otherFunctions.doesFileExist(exactPathVideo + "/" + model.getFileName())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                    } else {
                                        downlaodVideo.setVisibility(View.GONE);

                                        progressBarVideo.setVisibility(View.GONE);
                                        blurVideo.setVisibility(View.GONE);
                                    }
                                } else {
                                    downlaodVideo.setVisibility(View.GONE);

                                    progressBarVideo.setVisibility(View.GONE);
                                    blurVideo.setVisibility(View.GONE);
                                    try {
                                        String imageSource = model.getThumbnail();
                                        ImageView targetImageView = recVideo;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);
                                    } catch (Exception ignored) {
                                        recVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }
                                }
                            }
                            // -----------------------------Ends_Here--------------------------------------


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                deleteLyt.setVisibility(View.GONE);
                            } else {
                                deleteLyt.setVisibility(View.VISIBLE);
                            }
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            if (model.getDataType().equals(Constant.Text)) {


                                if (model.getMessage().equals("You deleted this message")) {
                                    copy.setVisibility(View.GONE);
                                } else {
                                    copy.setVisibility(View.VISIBLE);
                                    copy.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                            ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                            clipboardManager.setPrimaryClip(clipData);
                                            Log.d("TAG", "onClick: " + model.getMessage());
                                            BlurHelper.dialogLayoutColor.dismiss();
                                        }
                                    });
                                }
                            } else {
                                copy.setVisibility(View.GONE);
                            }


                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);


                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);

                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            String modelId = database.getReference().push().getKey();
                                            int listcount = forwardNameList.size();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }


                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);


                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();


                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }


                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });

                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    BlurHelper.dialogLayoutColor.dismiss();

                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();

                                    ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                    Log.d("data000", model.getReceiverUid());
                                    Log.d("data000", model.getModelId());
                                    database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                        @Override
                                        public void onSuccess(Void unused) {

                                            // todo here we need to delete from sqlLite database

                                            try {
                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                            } catch (Exception e) {
                                                throw new RuntimeException(e);
                                            }
                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                            Webservice.delete_chatingindivisualReceiver(mContext, model.getModelId(), model.getUid() + model.getReceiverUid(), model.getUid(), model.getReceiverUid());
                                        }
                                    });
                                }
                            });


                            return true;
                        }
                    });
                    ((receiverViewHolder) holder).receivervideoLyt.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) relativeLayout.getLayoutParams();
                            View contentView = BlurHelper.dialogLayoutColor.findViewById(android.R.id.content);

                            contentView.measure(View.MeasureSpec.UNSPECIFIED, View.MeasureSpec.UNSPECIFIED);
                            int dialogWidth = contentView.getMeasuredWidth();
                            int dialogHeight = contentView.getMeasuredHeight();
                            int maxLayoutWidth = dialogWidth - relativeLayout.getWidth(); // Assuming the width of RelativeLayout is already measured
                            int maxLayoutHeight = dialogHeight - relativeLayout.getHeight();
                            layoutParams.leftMargin = (int) touchX;
                            layoutParams.topMargin = (int) touchY - 150;
                            relativeLayout.setLayoutParams(layoutParams);

                            TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                            TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                            TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                            RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            ProgressBar progressBarVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarVideo);
                            AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View blurVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.blurVideo);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);
                            FloatingActionButton downlaodVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodVideo);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                            RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                            FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                            ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                            TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                            ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);
                            RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                            ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                            TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                            FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                            ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                            CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                            LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                            TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                            TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                            TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                            emojiLongRec.startAnimation(fadeIn);


                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                            cardview.startAnimation(animationdd);
                            recTime.setText(model.getTime());


                            // main codeing starting from here

                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            recMessage.setVisibility(View.GONE);
                            recImg.setVisibility(View.GONE);
                            receiverImgLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);
                            viewnew.setVisibility(View.VISIBLE);

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                imgcardview.setVisibility(View.VISIBLE);
                                recMessage.setVisibility(View.GONE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                receiverImgLyt.setVisibility(View.GONE);
                                recImg.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                recVideo.setVisibility(View.GONE);
                                receivervideoLyt.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                miceReply.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    recMessage.setVisibility(View.GONE);
                                    recImg.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                    ));
                                    msgreplyText.setText("Video");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.videopng);
                                    int size = (int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                    );
                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));
                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                    ));

                                    File customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                    String exactPath = customFolder.getAbsolutePath();

                                    if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                        progressBarVideo.setVisibility(View.GONE);
                                        blurVideo.setVisibility(View.GONE);
                                        String imageSource = exactPath + "/" + model.getFileNameThumbnail();
                                        ImageView targetImageView = imgreply;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        try {
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        } catch (Exception ignored) {
                                            recVideo.setVisibility(View.GONE);
                                            Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                        }
                                    } else {
                                        try {
                                            String imageSource = model.getReplyOldData();
                                            ImageView targetImageView = imgreply;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoViewReplyImg(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, true, model);
                                        } catch (Exception ignored) {
                                            recVideo.setVisibility(View.GONE);
                                            Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                        }
                                    }
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                recVideo.setVisibility(View.VISIBLE);
                                receivervideoLyt.setVisibility(View.VISIBLE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);

                                File customFolder;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                } else {
                                    customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_PICTURES), "Enclosure/Media/Thumbnail");
                                }
                                File customFolderVideo = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Videos");
                                String exactPath = customFolder.getAbsolutePath();
                                String exactPathVideo = customFolderVideo.getAbsolutePath();

                                if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileNameThumbnail())) {
                                    downlaodVideo.setVisibility(View.GONE);
                                    progressBarVideo.setVisibility(View.GONE);
                                    blurVideo.setVisibility(View.GONE);
                                    String imageSource = exactPath + "/" + model.getFileNameThumbnail();
                                    ImageView targetImageView = recVideo;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    try {
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);
                                    } catch (Exception ignored) {
                                        recVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }

                                    if (otherFunctions.doesFileExist(exactPathVideo + "/" + model.getFileName())) {
                                        downlaodVideo.setVisibility(View.GONE);
                                    } else {
                                        downlaodVideo.setVisibility(View.GONE);

                                        progressBarVideo.setVisibility(View.GONE);
                                        blurVideo.setVisibility(View.GONE);
                                    }
                                } else {
                                    downlaodVideo.setVisibility(View.GONE);

                                    progressBarVideo.setVisibility(View.GONE);
                                    blurVideo.setVisibility(View.GONE);
                                    try {
                                        String imageSource = model.getThumbnail();
                                        ImageView targetImageView = recVideo;
                                        ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                        BlurImageOptimizer.loadImageWithSafeBlur(mContext, imageSource, requestOptions, targetImageView, parentLayout, position, model, videoicon);
                                        otherFunctions.setImageViewDimensions(targetImageView, model.getImageWidth(), model.getImageHeight(), mContext);
                                    } catch (Exception ignored) {
                                        recVideo.setVisibility(View.GONE);
                                        Log.d("VideoThumbnailLoad", "Exception during thumbnail load: " + ignored.getMessage());
                                    }
                                }
                            }
                            // -----------------------------Ends_Here--------------------------------------


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                deleteLyt.setVisibility(View.GONE);
                            } else {
                                deleteLyt.setVisibility(View.VISIBLE);
                            }
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            if (model.getDataType().equals(Constant.Text)) {


                                if (model.getMessage().equals("You deleted this message")) {
                                    copy.setVisibility(View.GONE);
                                } else {
                                    copy.setVisibility(View.VISIBLE);
                                    copy.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                            ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                            clipboardManager.setPrimaryClip(clipData);
                                            Log.d("TAG", "onClick: " + model.getMessage());
                                            BlurHelper.dialogLayoutColor.dismiss();
                                        }
                                    });
                                }
                            } else {
                                copy.setVisibility(View.GONE);
                            }


                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);


                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);

                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            int listcount = forwardNameList.size();
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }


                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);


                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();


                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }


                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });

                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    BlurHelper.dialogLayoutColor.dismiss();
                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();
                                    //   BlurHelper.dialogLayoutColor
                                    ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                    Log.d("data000", model.getReceiverUid());
                                    Log.d("data000", model.getModelId());
                                    database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                        @Override
                                        public void onSuccess(Void unused) {
                                            try {
                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                            } catch (Exception e) {
                                                throw new RuntimeException(e);
                                            }
                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                            Webservice.delete_chatingindivisual(mContext, model.getModelId(), model.getUid(), model.getReceiverUid());
                                        }
                                    });
                                }
                            });


                            return true;
                        }
                    });


                } else
                if (model.getDataType().equals(Constant.Text)) {


                    Log.d("TAG444", "com");
                    if (URLUtil.isValidUrl(model.getMessage())) {


                        ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).linkActualUrl.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).link.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).linkDesc.setVisibility(View.VISIBLE);


                        // todo for color of a theme purpose
                        try {

                            Constant.getSfFuncion(mContext);
                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                            try {
                                if (themColor.equals("#ff0080")) {

                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#00A3E9")) {

                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));
                                } else if (themColor.equals("#7adf2a")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#ec0001")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#16f3ff")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#FF8A00")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#7F7F7F")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#D9B845")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));
                                } else if (themColor.equals("#346667")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#9846D9")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else if (themColor.equals("#A81010")) {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));

                                } else {


                                    ((receiverViewHolder) holder).link.setTextColor(Color.parseColor(themColor));
                                    ((receiverViewHolder) holder).linkActualUrl.setTextColor(Color.parseColor(themColor));
                                }
                            } catch (Exception ignored) {

                            }


                        } catch (Exception ignored) {
                        }


                        try {
//
                            // todo after sqlite
                            try {


                                linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());


                                if (linkPreviewModel.getUrl().equals("")) {
                                    ((receiverViewHolder) holder).linkActualUrl.setVisibility(View.VISIBLE);
                                    ((receiverViewHolder) holder).linkActualUrl.setText(model.getMessage());
                                    ((receiverViewHolder) holder).linkActualUrl.setPaintFlags(((receiverViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                    ((receiverViewHolder) holder).link.setVisibility(View.GONE);
                                    ((receiverViewHolder) holder).linkTitle.setVisibility(View.GONE);
                                    ((receiverViewHolder) holder).linkImg.setVisibility(View.GONE);
                                    ((receiverViewHolder) holder).linkImg2.setVisibility(View.GONE);
                                    ((receiverViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                    ((receiverViewHolder) holder).link.setVisibility(View.GONE);


                                } else {
                                    ((receiverViewHolder) holder).linkActualUrl.setVisibility(View.GONE);
                                    ((receiverViewHolder) holder).link.setVisibility(View.VISIBLE);
                                    ((receiverViewHolder) holder).linkTitle.setVisibility(View.VISIBLE);
                                    ((receiverViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                    ((receiverViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);


                                    if (linkPreviewModel.getDescription().equals("")) {
                                        ((receiverViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                    } else {
                                        ((receiverViewHolder) holder).linkDesc.setVisibility(View.VISIBLE);
                                        ((receiverViewHolder) holder).linkDesc.setText(linkPreviewModel.getDescription());
                                    }


                                    if (linkPreviewModel.getImage_url().equals("")) {
                                        ((receiverViewHolder) holder).linkImg.setVisibility(View.GONE);
                                    } else {
                                        ((receiverViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                        try {
                                            ImageView targetImageView = ((receiverViewHolder) holder).linkImg;
                                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                            Constant.loadImageIntoView(mContext, linkPreviewModel.getImage_url(), requestOptions, targetImageView, parentLayout, position, false, model, ((receiverViewHolder) holder).videoicon);
                                        } catch (Exception e) {
                                        }
                                    }


                                    if (linkPreviewModel.getFavIcon().equals("")) {
                                        ((receiverViewHolder) holder).linkImg2.setImageResource(R.drawable.link_fav);
                                    } else {
                                        ((receiverViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);

                                        try {
                                            Constant.loadSimpleImage(((receiverViewHolder) holder).linkImg2.getContext(), linkPreviewModel.getFavIcon(), ((receiverViewHolder) holder).linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                        } catch (Exception e) {
                                        }

                                    }


                                    if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                        ((receiverViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                    }


                                    ((receiverViewHolder) holder).linkTitle.setText(linkPreviewModel.getTitle());

                                    ((receiverViewHolder) holder).link.setText(linkPreviewModel.getUrl());
                                    ((receiverViewHolder) holder).link.setPaintFlags(((receiverViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);

                                }

                                Log.d("TAG", "onBindViewHolder: " + linkPreviewModel.getTitle());


                            } catch (Exception e) {
                                // Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                            }


                            RichPreview richPreview = new RichPreview(new ResponseListener() {
                                @Override
                                public void onData(MetaData metaData) {
                                    // todo here need to store data to sqllite


                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        try {
                                            new DatabaseHelper(mContext).insert_linkPreviewTable(mContext, model.getModelId(), metaData.getUrl(), metaData.getTitle(), metaData.getDescription(), metaData.getFavicon(), metaData.getImageurl());


                                        } catch (Exception e) {
                                            throw new RuntimeException(e);
                                        }

                                        if (position == messageList.size() - 1) {
                                            // todo after sqlite
                                            try {


                                                linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());


                                                if (linkPreviewModel.getUrl().equals("")) {
                                                    ((receiverViewHolder) holder).linkActualUrl.setVisibility(View.VISIBLE);
                                                    ((receiverViewHolder) holder).linkActualUrl.setText(model.getMessage());
                                                    ((receiverViewHolder) holder).linkActualUrl.setPaintFlags(((receiverViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                                    ((receiverViewHolder) holder).link.setVisibility(View.GONE);
                                                    ((receiverViewHolder) holder).linkTitle.setVisibility(View.GONE);
                                                    ((receiverViewHolder) holder).linkImg.setVisibility(View.GONE);
                                                    ((receiverViewHolder) holder).linkImg2.setVisibility(View.GONE);
                                                    ((receiverViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                                    ((receiverViewHolder) holder).link.setVisibility(View.GONE);


                                                } else {
                                                    ((receiverViewHolder) holder).linkActualUrl.setVisibility(View.GONE);
                                                    ((receiverViewHolder) holder).link.setVisibility(View.VISIBLE);
                                                    ((receiverViewHolder) holder).linkTitle.setVisibility(View.VISIBLE);
                                                    ((receiverViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                                    ((receiverViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);


                                                    if (linkPreviewModel.getDescription().equals("")) {
                                                        ((receiverViewHolder) holder).linkDesc.setVisibility(View.GONE);
                                                    } else {
                                                        ((receiverViewHolder) holder).linkDesc.setVisibility(View.VISIBLE);
                                                        ((receiverViewHolder) holder).linkDesc.setText(linkPreviewModel.getDescription());
                                                    }


                                                    if (linkPreviewModel.getImage_url().equals("")) {
                                                        ((receiverViewHolder) holder).linkImg.setVisibility(View.GONE);
                                                    } else {
                                                        ((receiverViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                                        try {
                                                            // Using Constant method instead of direct Glide
                                                            Constant.loadSimpleImage(((receiverViewHolder) holder).linkImg.getContext(), linkPreviewModel.getImage_url(), ((receiverViewHolder) holder).linkImg, R.drawable.link_svg, R.drawable.link_svg);
                                                        } catch (Exception e) {
                                                        }
                                                    }


                                                    if (linkPreviewModel.getFavIcon().equals("")) {
                                                        ((receiverViewHolder) holder).linkImg2.setImageResource(R.drawable.link_fav);
                                                    } else {
                                                        ((receiverViewHolder) holder).linkImg2.setVisibility(View.VISIBLE);

                                                        try {
                                                            Constant.loadSimpleImage(((receiverViewHolder) holder).linkImg2.getContext(), linkPreviewModel.getFavIcon(), ((receiverViewHolder) holder).linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                                        } catch (Exception e) {
                                                        }

                                                    }

                                                    if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                                        ((receiverViewHolder) holder).linkImg.setVisibility(View.VISIBLE);
                                                    }

                                                    ((receiverViewHolder) holder).linkTitle.setText(linkPreviewModel.getTitle());

                                                    ((receiverViewHolder) holder).link.setText(linkPreviewModel.getUrl());
                                                    ((receiverViewHolder) holder).link.setPaintFlags(((receiverViewHolder) holder).link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);

                                                }


                                            } catch (Exception e) {

                                            }
                                        }
                                    }


                                }

                                @Override
                                public void onError(Exception e) {

                                    Log.d("RICHLINK", "onError: " + e.getMessage());
//                                    try {
//                                        ((senderViewHolder)holder).linkActualUrl.setVisibility(View.VISIBLE);
//                                        ((senderViewHolder)holder).linkActualUrl.setText(model.getMessage());
//                                        ((senderViewHolder)holder).link.setVisibility(View.GONE);
//                                        ((senderViewHolder)holder).linkImg.setVisibility(View.GONE);
//                                        ((senderViewHolder)holder).linkImg2.setVisibility(View.GONE);
//                                        ((senderViewHolder)holder).linkDesc.setVisibility(View.GONE);
//                                    } catch (Exception ex) {
//                                        throw new RuntimeException(ex);
//                                    }
                                }

                            });


                            richPreview.getPreview(model.getMessage());


                        } catch (Exception ignored) {
                            //   Toast.makeText(mContext, ignored.getMessage(), Toast.LENGTH_SHORT).show();

                            Log.d("TAG", "vsdvdsvs: " + ignored.getMessage());
                        }

                    } else {
                         ((receiverViewHolder) holder).recMessage.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                    }

                    ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);

                    ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);

                    if (model.getMessage().length() >= 200) {
                        ((receiverViewHolder) holder).readMore.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).recMessage.setText(model.getMessage().substring(0, 200));
                    } else {
                        ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recMessage.setText(model.getMessage());
                    }


                    // for sender only 4-july-2023
                    if (model.getReplyKey().equals(Constant.ReplyKey)) {

                        // TODO: 04/09/25   NEW REPLY HERE
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).imgcardview.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((receiverViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((receiverViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).miceReply.setVisibility(View.GONE);


                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                        if (model.getReplyType().equals(Constant.Text)) {

                            ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);

                            String truncatedText = otherFunctions.truncateTextToWords(model.getReplyOldData(), 15);
                            ((receiverViewHolder) holder).msgreplyText.setText(truncatedText);


                            ((receiverViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((receiverViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                        }

                        Drawable drawableLeft = mContext.getResources().getDrawable(R.drawable.deleteiconnewsvg);
                        int paddingLeft = 0;
                        ((receiverViewHolder) holder).recMessage.setCompoundDrawablePadding(paddingLeft);
                        drawableLeft.setBounds(0, 0, 50, 50);
                        ((receiverViewHolder) holder).recMessage.setCompoundDrawablesRelativeWithIntrinsicBounds(null, null, null, null);
                        ((receiverViewHolder) holder).MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray); // Set formatted text
                        ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                        ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);


                        String content = model.getMessage();

                        switch (Constant.analyzeTextContent(content)) {
                            case "only_emoji":
                                System.out.println("The text contains only emojis.");
                                // Handle emoji-only logic here

                                int emojiCount = Constant.countEmojis(model.getMessage());
                                System.out.println("Emoji detected! " + model.getMessage() + " " + emojiCount);

                                if (emojiCount == 1) {
                                    //  SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),30);
                                    ((receiverViewHolder) holder).recMessage.setText(model.getMessage()); // Set formatted text
                                    ((receiverViewHolder) holder).MainReceiverBox.setBackground(null); // Set formatted text

                                    // Show progress indicator (animate if last item is sending)
                                    // Always show viewnew
                                    ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                    ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 80);

                                    // Add tap listener to animate emoji on tap
                                    Constant.setupEmojiTapAnimation(((receiverViewHolder) holder).recMessage, model.getMessage());
                                } else if (emojiCount == 2) {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),25);
                                    ((receiverViewHolder) holder).recMessage.setText(model.getMessage()); // Set formatted text
                                    ((receiverViewHolder) holder).MainReceiverBox.setBackground(null); // Set formatted text
                                    // Show progress indicator (animate if last item is sending)
                                    // Always show viewnew
                                    ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                    ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 45);
                                } else if (emojiCount == 3) {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),20);
                                    ((receiverViewHolder) holder).recMessage.setText(model.getMessage()); // Set formatted text
                                    ((receiverViewHolder) holder).MainReceiverBox.setBackground(null); // Set formatted text
                                    // Show progress indicator (animate if last item is sending)
                                    // Always show viewnew
                                    ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                    ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 35);
                                } else if (emojiCount == 4) {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),18);
                                    ((receiverViewHolder) holder).recMessage.setText(model.getMessage()); // Set formatted text
                                    ((receiverViewHolder) holder).MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray); // Set formatted text
                                    // Show progress indicator (animate if last item is sending)
                                    // Always show viewnew
                                    ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                    ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                } else {
//                                    SpannableString formattedText = Constant.formatTextWithEmoji(model.getMessage(),18);
                                    ((receiverViewHolder) holder).recMessage.setText(model.getMessage()); // Set formatted text
                                    ((receiverViewHolder) holder).MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray); // Set formatted text
                                    // Show progress indicator (animate if last item is sending)
                                    // Always show viewnew
                                    ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                    ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                }


                                break;

                            case "text_and_emoji":
                                System.out.println("The text contains both text and emojis.");
                                // Handle mixed text + emoji logic here
                                ((receiverViewHolder) holder).MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray); // Set formatted text
                                // Show progress indicator (animate if last item is sending)
                                // Always show viewnew
                                ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);

                                break;

                            case "only_text":
                                System.out.println("The text contains only text.");
                                // Handle text-only logic here
                                ((receiverViewHolder) holder).MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray); // Set formatted text
                                // Show progress indicator (animate if last item is sending)
                                // Always show viewnew
                                ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);

                                break;

                            default:
                                System.out.println("Unexpected content.");
                                ((receiverViewHolder) holder).MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray); // Set formatted text
                                // Show progress indicator (animate if last item is sending)
                                // Always show viewnew
                                ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);

                                ((receiverViewHolder) holder).recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);

                                break;
                        }

                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                    }

                    ((receiverViewHolder) holder).readMore.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View view) {
                            ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recMessage.setText(model.getMessage());
                        }
                    });
                    ((receiverViewHolder) holder).recLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {
                                if (((receiverViewHolder) holder).richLinkViewLyt.getVisibility() == View.VISIBLE) {
                                    try {
                                        String url = model.getMessage(); // Replace this with your URL
                                        Intent intent = new Intent(Intent.ACTION_VIEW);
                                        intent.setData(Uri.parse(url));
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                    } catch (ActivityNotFoundException e) {
                                        // Handle exception if no activity can handle the intent
                                        e.printStackTrace();
                                    }

                                } else {
// normal text here
                                }
                            }
                        }
                    });


                    ((receiverViewHolder) holder).recLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                            TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                            TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                            RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                            RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                            FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                            ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                            TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                            ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);
                            RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                            ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                            TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                            FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                            ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                            CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                            LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                            TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                            TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                            TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);
                            LinearLayout MainReceiverBox = BlurHelper.dialogLayoutColor.findViewById(R.id.MainReceiverBox);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                            emojiLongRec.startAnimation(fadeIn);


                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                            cardview.startAnimation(animationdd);
                            recTime.setText(model.getTime());


                            // main codeing starting from here


                            if (URLUtil.isValidUrl(model.getMessage())) {
                                richLinkViewLyt.setVisibility(View.VISIBLE);
                                recMessage.setVisibility(View.GONE);
                                linkActualUrl.setVisibility(View.GONE);
                                link.setVisibility(View.VISIBLE);
                                linkImg.setVisibility(View.VISIBLE);
                                linkImg2.setVisibility(View.VISIBLE);
                                linkDesc.setVisibility(View.VISIBLE);

                                try {
                                    Constant.getSfFuncion(mContext);
                                    themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                    tintList = ColorStateList.valueOf(Color.parseColor(themColor));

                                    link.setTextColor(Color.parseColor(themColor));
                                    linkActualUrl.setTextColor(Color.parseColor(themColor));
                                } catch (Exception ignored) {
                                }

                                try {
                                    linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());

                                    if (linkPreviewModel.getUrl().equals("")) {
                                        linkActualUrl.setVisibility(View.VISIBLE);
                                        linkActualUrl.setText(model.getMessage());
                                        linkActualUrl.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                        link.setVisibility(View.GONE);
                                        linkTitle.setVisibility(View.GONE);
                                        linkImg.setVisibility(View.GONE);
                                        linkImg2.setVisibility(View.GONE);
                                        linkDesc.setVisibility(View.GONE);
                                        link.setVisibility(View.GONE);
                                    } else {
                                        linkActualUrl.setVisibility(View.GONE);
                                        link.setVisibility(View.VISIBLE);
                                        linkTitle.setVisibility(View.VISIBLE);
                                        linkImg.setVisibility(View.VISIBLE);
                                        linkImg2.setVisibility(View.VISIBLE);

                                        if (linkPreviewModel.getDescription().equals("")) {
                                            linkDesc.setVisibility(View.GONE);
                                        } else {
                                            linkDesc.setVisibility(View.VISIBLE);
                                            linkDesc.setText(linkPreviewModel.getDescription());
                                        }

                                        if (linkPreviewModel.getImage_url().equals("")) {
                                            linkImg.setVisibility(View.GONE);
                                        } else {
                                            linkImg.setVisibility(View.VISIBLE);
                                            try {
                                                ImageView targetImageView = linkImg;
                                                ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                                Constant.loadImageIntoView(mContext, linkPreviewModel.getImage_url(), requestOptions, targetImageView, parentLayout, position, false, model, videoicon);
                                            } catch (Exception e) {
                                            }
                                        }

                                        if (linkPreviewModel.getFavIcon().equals("")) {
                                            linkImg2.setImageResource(R.drawable.link_fav);
                                        } else {
                                            linkImg2.setVisibility(View.VISIBLE);
                                            try {
                                                Constant.loadSimpleImage(linkImg2.getContext(), linkPreviewModel.getFavIcon(), linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                            } catch (Exception e) {
                                            }
                                        }

                                        if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                            linkImg.setVisibility(View.VISIBLE);
                                        }

                                        linkTitle.setText(linkPreviewModel.getTitle());
                                        link.setText(linkPreviewModel.getUrl());
                                        link.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                    }

//                                    link.setOnClickListener(v2 -> {
//                                        openUrl(mContext, linkPreviewModel.getUrl());
//                                    });
//                                    linkActualUrl.setOnClickListener(v6 -> {
//                                        openUrl(mContext, model.getMessage());
//                                    });
                                } catch (Exception e) {
                                }

                                if (otherFunctions.isInternetConnected(mContext)) {
                                    RichPreview richPreview = new RichPreview(new ResponseListener() {
                                        @Override
                                        public void onData(MetaData metaData) {
                                            try {
                                                new DatabaseHelper(mContext).insert_linkPreviewTable(mContext, model.getModelId(), metaData.getUrl(), metaData.getTitle(), metaData.getDescription(), metaData.getFavicon(), metaData.getImageurl());

                                                if (position == messageList.size() - 1) {
                                                    linkPreviewModel linkPreviewModel = new DatabaseHelper(mContext).getAllLinkPreviewModel(model.getModelId());

                                                    if (linkPreviewModel.getUrl().equals("")) {
                                                        linkActualUrl.setVisibility(View.VISIBLE);
                                                        linkActualUrl.setText(model.getMessage());
                                                        linkActualUrl.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                                        link.setVisibility(View.GONE);
                                                        linkTitle.setVisibility(View.GONE);
                                                        linkImg.setVisibility(View.GONE);
                                                        linkImg2.setVisibility(View.GONE);
                                                        linkDesc.setVisibility(View.GONE);
                                                        link.setVisibility(View.GONE);
                                                    } else {
                                                        linkActualUrl.setVisibility(View.GONE);
                                                        link.setVisibility(View.VISIBLE);
                                                        linkTitle.setVisibility(View.VISIBLE);
                                                        linkImg.setVisibility(View.VISIBLE);
                                                        linkImg2.setVisibility(View.VISIBLE);

                                                        if (linkPreviewModel.getDescription().equals("")) {
                                                            linkDesc.setVisibility(View.GONE);
                                                        } else {
                                                            linkDesc.setVisibility(View.VISIBLE);
                                                            linkDesc.setText(linkPreviewModel.getDescription());
                                                        }

                                                        if (linkPreviewModel.getImage_url().equals("")) {
                                                            linkImg.setVisibility(View.GONE);
                                                        } else {
                                                            linkImg.setVisibility(View.VISIBLE);
                                                            try {
                                                                Constant.loadSimpleImage(linkImg.getContext(), linkPreviewModel.getImage_url(), linkImg, R.drawable.link_svg, R.drawable.link_svg);
                                                            } catch (Exception e) {
                                                            }
                                                        }

                                                        if (linkPreviewModel.getFavIcon().equals("")) {
                                                            linkImg2.setImageResource(R.drawable.link_fav);
                                                        } else {
                                                            linkImg2.setVisibility(View.VISIBLE);
                                                            try {
                                                                Constant.loadSimpleImage(linkImg2.getContext(), linkPreviewModel.getFavIcon(), linkImg2, R.drawable.link_fav, R.drawable.link_fav);
                                                            } catch (Exception e) {
                                                            }
                                                        }

                                                        if (linkPreviewModel.getFavIcon().equals("") && linkPreviewModel.getDescription().equals("") && linkPreviewModel.getImage_url().equals("")) {
                                                            linkImg.setVisibility(View.VISIBLE);
                                                        }

                                                        linkTitle.setText(linkPreviewModel.getTitle());
                                                        link.setText(linkPreviewModel.getUrl());
                                                        link.setPaintFlags(link.getPaintFlags() | Paint.UNDERLINE_TEXT_FLAG);
                                                    }

//                                                    link.setOnClickListener(v -> {
//                                                        openUrl(mContext, linkPreviewModel.getUrl());
//                                                    });
//                                                    linkActualUrl.setOnClickListener(v -> {
//                                                        openUrl(mContext, model.getMessage());
//                                                    });
                                                }
                                            } catch (Exception e) {
                                            }
                                        }

                                        @Override
                                        public void onError(Exception e) {
                                            Log.d("RICHLINK", "onError: " + e.getMessage());
                                        }
                                    });
                                    richPreview.getPreview(model.getMessage());
                                }
                                recMessage.setVisibility(View.VISIBLE);
                            } else {
                                richLinkViewLyt.setVisibility(View.GONE);
                          recMessage.setVisibility(View.VISIBLE);
                            }

                            recImg.setVisibility(View.GONE);
                            receiverImgLyt.setVisibility(View.GONE);
                            recVideo.setVisibility(View.GONE);
                            receivervideoLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            miceContainer.setVisibility(View.GONE);

                            if (model.getMessage().length() >= 200) {
                                readMore.setVisibility(View.VISIBLE);
                                recMessage.setText(model.getMessage().substring(0, 200));
                            } else {
                                readMore.setVisibility(View.GONE);
                                recMessage.setText(model.getMessage());
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                recMessage.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                miceReply.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    recMessage.setVisibility(View.GONE);
                                    recVideo.setVisibility(View.GONE);
                                    receivervideoLyt.setVisibility(View.GONE);
                                    recImg.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    String truncatedText = otherFunctions.truncateTextToWords(model.getReplyOldData(), 15);
                                    msgreplyText.setText(truncatedText);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                    ));
                                }

                                Drawable drawableLeft = mContext.getResources().getDrawable(R.drawable.deleteiconnewsvg);
                                int paddingLeft = 0;
                                recMessage.setCompoundDrawablePadding(paddingLeft);
                                drawableLeft.setBounds(0, 0, 50, 50);
                                recMessage.setCompoundDrawablesRelativeWithIntrinsicBounds(null, null, null, null);
                                MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray);
                                recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                            } else {


                                String content = model.getMessage();
                                switch (Constant.analyzeTextContent(content)) {
                                    case "only_emoji":
                                        recMessage.setText(model.getMessage());
                                        MainReceiverBox.setBackground(null);
                                        if (viewnew.getVisibility() == View.VISIBLE) {
                                            viewnew.setVisibility(View.VISIBLE);
                                        }
                                        recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 80);
                                        Constant.setupEmojiTapAnimation(recMessage, model.getMessage());
                                        break;

                                    case "text_and_emoji":
                                        MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray);
                                        viewnew.setVisibility(View.VISIBLE);
                                        recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        break;

                                    case "only_text":
                                        MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray);
                                        viewnew.setVisibility(View.VISIBLE);
                                        recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        break;

                                    default:
                                        MainReceiverBox.setBackgroundResource(R.drawable.message_bg_gray);
                                        viewnew.setVisibility(View.VISIBLE);
                                        recMessage.setTextSize(TypedValue.COMPLEX_UNIT_SP, 16);
                                        break;
                                }

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);
                            }
                            // -----------------------------Ends_Here--------------------------------------


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                deleteLyt.setVisibility(View.GONE);
                            } else {
                                deleteLyt.setVisibility(View.VISIBLE);
                            }
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            if (model.getDataType().equals(Constant.Text)) {


                                if (model.getMessage().equals("You deleted this message")) {
                                    copy.setVisibility(View.GONE);
                                } else {
                                    copy.setVisibility(View.VISIBLE);
                                    copy.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                            ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                            clipboardManager.setPrimaryClip(clipData);
                                            Log.d("TAG", "onClick: " + model.getMessage());
                                            BlurHelper.dialogLayoutColor.dismiss();
                                        }
                                    });
                                }
                            } else {
                                copy.setVisibility(View.GONE);
                            }


                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);


                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);

                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            String modelId = database.getReference().push().getKey();
                                            int listcount = forwardNameList.size();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }


                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);

                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();


                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }
                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });

                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();
                                    BlurHelper.dialogLayoutColor.dismiss();
                                    ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                    Log.d("data000", model.getReceiverUid());
                                    Log.d("data000", model.getModelId());
                                    database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                        @Override
                                        public void onSuccess(Void unused) {

                                            // todo here we need to delete from sqlLite database

                                            try {
                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                            } catch (Exception e) {
                                                throw new RuntimeException(e);
                                            }

                                            System.out.println(position);
                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                            Webservice.delete_chatingindivisualReceiver(mContext, model.getModelId(), model.getUid() + model.getReceiverUid(), model.getUid(), model.getReceiverUid());
                                        }
                                    });
                                }
                            });


                            return true;
                        }
                    });


                } else
                if (model.getDataType().equals(Constant.contact)) {
                    ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);

                    ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                    // Hide viewnew for all receiver messages

                    ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);


                    if (model.getReplyKey().equals(Constant.ReplyKey)) {

                        // TODO: 03/09/25  NEW REPLY  CONTENT
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).contactContainerReply.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).imgcardview.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((receiverViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).miceReply.setVisibility(View.GONE);

                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }


                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        Log.d("0909887", model.getReplyKey());

                        if (model.getReplyType().equals(Constant.Text)) {


                            ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);

                            ((receiverViewHolder) holder).cName.setText(model.getName());
                            ((receiverViewHolder) holder).cPhone.setText(model.getPhone());
                            ((receiverViewHolder) holder).cnamenamelyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).firstText.setText(model.getReplyOldData());
                            ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);

                            ((receiverViewHolder) holder).viewContact.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((receiverViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                            ((receiverViewHolder) holder).msgreplyText.setText("Contact");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.contact);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));

                            String text = model.getName();
                            String[] words = text.split(" ");
                            String firstWord = words[0];

                            ((receiverViewHolder) holder).firstTextReply.setText(firstWord);
                        }
                        ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).contactContainer.setVisibility(View.VISIBLE);

                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                        ((receiverViewHolder) holder).viewContact.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).cnamenamelyt.setVisibility(View.VISIBLE);

                        ((receiverViewHolder) holder).cName.setText(model.getName());
                        ((receiverViewHolder) holder).cPhone.setText(model.getPhone());
                        String text = model.getName();
                        String[] words = text.split(" ");
                        String firstWord = words[0];
                        ((receiverViewHolder) holder).firstText.setText(firstWord);


                        final float scale = mContext.getApplicationContext().getResources().getDisplayMetrics().density;
                        int pixels = (int) (170 * scale + 0.5f);

                        ViewGroup.LayoutParams params = ((receiverViewHolder) holder).viewContact.getLayoutParams();
                        params.width = LinearLayout.LayoutParams.MATCH_PARENT;
                        ((receiverViewHolder) holder).viewContact.setLayoutParams(params);


                    }
                    ((receiverViewHolder) holder).recLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            ((receiverViewHolder) holder).viewContact.performClick();
                        }
                    });
                    ((receiverViewHolder) holder).viewContact.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {

                                //after click on viewcontact

                                Constant.bottomsheetContact(mContext, R.layout.view_contact_btmsheet_lyt);
                                Constant.bottomSheetDialogContact.show();
                                TextView createContact = Constant.bottomSheetDialogContact.findViewById(R.id.createContact);
                                TextView existingContact = Constant.bottomSheetDialogContact.findViewById(R.id.existingContact);
                                LinearLayout cancel = Constant.bottomSheetDialogContact.findViewById(R.id.cancel);

                                createContact.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Constant.bottomSheetDialogContact.dismiss();
                                        Constant.bottomsheetContact(mContext, R.layout.create_contact_layout_bottom);
                                        Constant.bottomSheetDialogContact.show();
                                        TextView cancel = Constant.bottomSheetDialogContact.findViewById(R.id.cancel);
                                        TextView save = Constant.bottomSheetDialogContact.findViewById(R.id.save);
                                        TextView mobile = Constant.bottomSheetDialogContact.findViewById(R.id.mobile);
                                        EditText firstname = Constant.bottomSheetDialogContact.findViewById(R.id.firstname);
                                        EditText lastName = Constant.bottomSheetDialogContact.findViewById(R.id.lastName);
                                        EditText phone = Constant.bottomSheetDialogContact.findViewById(R.id.phoneNumber);

                                        try {
                                            Constant.getSfFuncion(mContext);
                                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));

                                            cancel.setTextColor(Color.parseColor(themColor));
                                            save.setTextColor(Color.parseColor(themColor));
                                            mobile.setTextColor(Color.parseColor(themColor));

                                        } catch (Exception ignored) {

                                        }

                                        String[] nameParts = model.getName().split(" ", 2);

                                        // Assuming the first part is the first name and the second part is the last name
                                        String firstNameString = nameParts[0];
                                        firstname.setText(firstNameString);
                                        try {
                                            String lastNameString = nameParts[1];
                                            lastName.setText(lastNameString);
                                        } catch (Exception ignored) {
                                        }


                                        phone.setText(model.getPhone());

                                        cancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Constant.bottomSheetDialogContact.dismiss();
                                            }
                                        });

                                        save.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {

                                                // Check for permission before accessing contacts
                                                if (ContextCompat.checkSelfPermission(mContext, Manifest.permission.WRITE_CONTACTS) != PackageManager.PERMISSION_GRANTED) {
                                                    // Permission is not granted, request it
                                                    ActivityCompat.requestPermissions(mActivity, new String[]{Manifest.permission.WRITE_CONTACTS}, 74);
                                                } else {


                                                    ArrayList<ContentProviderOperation> operations = new ArrayList<>();
                                                    operations.add(ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI).withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null).withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null).build());

                                                    operations.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0).withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, firstname.getText().toString() + " " + lastName.getText().toString()).build());

                                                    operations.add(ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI).withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0).withValue(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE).withValue(ContactsContract.CommonDataKinds.Phone.NUMBER, phone.getText().toString()).withValue(ContactsContract.CommonDataKinds.Phone.TYPE, ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE).build());

                                                    try {
                                                        mContext.getContentResolver().applyBatch(ContactsContract.AUTHORITY, operations);
                                                        Constant.bottomSheetDialogContact.dismiss();
                                                    } catch (RemoteException |
                                                             OperationApplicationException e) {
                                                        e.printStackTrace();
                                                    }
                                                }

                                            }
                                        });

                                    }
                                });
                                existingContact.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {


                                        Constant.bottomSheetDialogContact.dismiss();
                                        Intent intent = new Intent(Intent.ACTION_PICK, ContactsContract.Contacts.CONTENT_URI);
                                        ((Activity) mContext).startActivityForResult(intent, 7185);

                                        phone2Contact.setText(model.getPhone());


                                    }
                                });
                                cancel.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Constant.bottomSheetDialogContact.dismiss();
                                    }
                                });


                            }
                        }
                    });


                    ((receiverViewHolder) holder).recLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {


                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                            TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                            TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                            TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                            RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout cnamenamelyt = BlurHelper.dialogLayoutColor.findViewById(R.id.cnamenamelyt);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout viewContact = BlurHelper.dialogLayoutColor.findViewById(R.id.viewContact);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            TextView cName = BlurHelper.dialogLayoutColor.findViewById(R.id.cName);
                            TextView cPhone = BlurHelper.dialogLayoutColor.findViewById(R.id.cPhone);
                            TextView firstText = BlurHelper.dialogLayoutColor.findViewById(R.id.firstText);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                            RelativeLayout audioDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControls);
                            FloatingActionButton downlaodAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudio);
                            ProgressBar progressBarAudio = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudio);
                            TextView downloadPercentageAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioSender);
                            ImageButton pauseButtonAudioSender = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioSender);
                            RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                            ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                            TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                            FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                            ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                            CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                            LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                            TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                            TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                            TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                            emojiLongRec.startAnimation(fadeIn);


                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                            cardview.startAnimation(animationdd);
                            recTime.setText(model.getTime());


                            // main codeing starting from here

                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            recMessage.setVisibility(View.GONE);
                            recVideo.setVisibility(View.GONE);
                            receivervideoLyt.setVisibility(View.GONE);
                            recImg.setVisibility(View.GONE);
                            receiverImgLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            viewnew.setVisibility(View.VISIBLE);
                            miceContainer.setVisibility(View.GONE);

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                contactContainerReply.setVisibility(View.VISIBLE);
                                recMessage.setVisibility(View.GONE);
                                receiverImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);
                                recImg.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                contactContainer.setVisibility(View.GONE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                miceReply.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    contactContainer.setVisibility(View.GONE);
                                    recMessage.setVisibility(View.GONE);
                                    recImg.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    recVideo.setVisibility(View.GONE);
                                    receivervideoLyt.setVisibility(View.GONE);
                                    cName.setText(model.getName());
                                    cPhone.setText(model.getPhone());
                                    cnamenamelyt.setVisibility(View.GONE);
                                    firstText.setText(model.getReplyOldData());
                                    miceContainer.setVisibility(View.GONE);
                                    viewContact.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                    ));
                                    msgreplyText.setText("Contact");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.contact);
                                    int size = (int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                    );
                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));
                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                    ));
                                    String text = model.getName();
                                    String[] words = text.split(" ");
                                    String firstWord = words.length > 0 ? words[0] : "";
                                    firstTextReply.setText(firstWord);
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                contactContainer.setVisibility(View.VISIBLE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);
                                viewContact.setVisibility(View.VISIBLE);
                                cnamenamelyt.setVisibility(View.VISIBLE);
                                cName.setText(model.getName());
                                cPhone.setText(model.getPhone());
                                String text = model.getName();
                                String[] words = text.split(" ");
                                String firstWord = words.length > 0 ? words[0] : "";
                                firstText.setText(firstWord);

                                final float scale = mContext.getApplicationContext().getResources().getDisplayMetrics().density;
                                int pixels = (int) (170 * scale + 0.5f);
                                ViewGroup.LayoutParams params = viewContact.getLayoutParams();
                                params.width = LinearLayout.LayoutParams.MATCH_PARENT;
                                viewContact.setLayoutParams(params);


                            }
                            // -----------------------------Ends_Here--------------------------------------


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                deleteLyt.setVisibility(View.GONE);
                            } else {
                                deleteLyt.setVisibility(View.VISIBLE);
                            }
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            if (model.getDataType().equals(Constant.Text)) {


                                if (model.getMessage().equals("You deleted this message")) {
                                    copy.setVisibility(View.GONE);
                                } else {
                                    copy.setVisibility(View.VISIBLE);
                                    copy.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                            ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                            clipboardManager.setPrimaryClip(clipData);
                                            Log.d("TAG", "onClick: " + model.getMessage());
                                            BlurHelper.dialogLayoutColor.dismiss();
                                        }
                                    });
                                }
                            } else {
                                copy.setVisibility(View.GONE);
                            }


                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);


                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);

                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            int listcount = forwardNameList.size();
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }


                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);

                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();


                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }

                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });

                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();

                                    BlurHelper.dialogLayoutColor.dismiss();
                                    ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                    Log.d("data000", model.getReceiverUid());
                                    Log.d("data000", model.getModelId());
                                    database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                        @Override
                                        public void onSuccess(Void unused) {

                                            // todo here we need to delete from sqlLite database

                                            try {
                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                            } catch (Exception e) {
                                                throw new RuntimeException(e);
                                            }
                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                            Webservice.delete_chatingindivisualReceiver(mContext, model.getModelId(), model.getUid() + model.getReceiverUid(), model.getUid(), model.getReceiverUid());
                                        }
                                    });
                                }
                            });


                            return true;
                        }
                    });


                } else
                if (model.getDataType().equals(Constant.voiceAudio)) {
                    ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);

                    ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                    // Hide viewnew for all receiver messages



                    if (model.getReplyKey().equals(Constant.ReplyKey)) {
// TODO: 04/09/25  NEW REPLY
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).miceReply.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).pageLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).musicReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).imgcardview.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                        ((receiverViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                        ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).miceTiming.setVisibility(View.GONE);

                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }

                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).audioDownloadControlsReceiver.setVisibility(View.GONE);

                        if (model.getReplyType().equals(Constant.Text)) {


                            ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).repliedData.setText(model.getReplytextData());
                            ((receiverViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                            ((receiverViewHolder) holder).miceTiming.setText(model.getMiceTiming());


                            ((receiverViewHolder) holder).msgreplyText.setText("Mic");
                            Drawable drawable = mContext.getResources().getDrawable(R.drawable.micegray);
                            int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                            drawable.setBounds(0, 0, size, size);
                            drawable.setTint(Color.parseColor("#78787A"));

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                            ((receiverViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                    mContext.getResources().getDisplayMetrics()));


                        }
                        ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                    } else {
                        ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).miceContainer.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).miceTiming.setVisibility(View.VISIBLE);


                        if (!model.getCaption().equals("")) {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                        } else {
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        }
                        ((receiverViewHolder) holder).replyDevider.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                        ((receiverViewHolder) holder).miceTiming.setText(model.getMiceTiming());


                        ((receiverViewHolder) holder).micePlay.setVisibility(View.VISIBLE);


                        // Show the audio download controls for receiver
                        ((receiverViewHolder) holder).audioDownloadControlsReceiver.setVisibility(View.VISIBLE);

                        File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
                        if (!audiosDir.exists()) audiosDir.mkdirs();
                        File targetFile = new File(audiosDir, model.getFileName());




                        ((receiverViewHolder) holder).micePlay.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
//                                MediaPlayer mediaPlayer = new MediaPlayer();
//
//                                File customFolder2 = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
//                                String exactPath2 = customFolder2.getAbsolutePath();
//
                                String audioUrl = model.getDocument(); // URL or local path
                                String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                String localFilePath = null;

                                File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");

                                if (audiosDir != null) {
                                    String altPath = new File(audiosDir, model.getFileName()).getAbsolutePath();
                                    if (otherFunctions.doesFileExist(altPath)) {
                                        localFilePath = altPath;
                                        audioUrl = altPath;
                                        Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                    }
                                }

                                Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                serviceIntent.putExtra("audioUrl", audioUrl);
                                serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                serviceIntent.putExtra("songTitle", songTitle);
                                serviceIntent.putExtra("localFilePath", localFilePath);
                                serviceIntent.putExtra("modelId", model.getModelId());
                                serviceIntent.putExtra("position", holder.getAdapterPosition());
                                ContextCompat.startForegroundService(mContext, serviceIntent);

                                // Show the bottom sheet
                                if (mContext instanceof AppCompatActivity) {
                                    MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                    bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                } else {
                                    //   Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                    Log.e("MusicPlayer", "mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                }


                            }
                        });


                    }
                    ((receiverViewHolder) holder).recLinear.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                Constant.getSfFuncion(mContext);
                                String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });


                                DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                    @Override
                                    public void onDataChange(@NonNull DataSnapshot snapshot) {

                                        if (targetModelId != null && !targetModelId.isEmpty()) {
                                            boolean modelExists = false;
                                            for (DataSnapshot child : snapshot.getChildren()) {
                                                if (child.getKey().equals(targetModelId)) {
                                                    modelExists = true;
                                                    break;
                                                }
                                            }

                                            if (modelExists) {
                                                otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                            } else {
                                                Log.d("Firebase", "modelId not found in snapshot");
                                            }
                                        } else {
                                            Log.d("Firebase", "Reply modelId is null or empty");
                                        }
                                    }

                                    @Override
                                    public void onCancelled(@NonNull DatabaseError error) {
                                        Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                    }
                                });

                            } else {
                                String audioUrl = model.getDocument(); // URL or local path
                                String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                String localFilePath = null;

                                File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");

                                if (audiosDir != null) {
                                    String altPath = new File(audiosDir, model.getFileName()).getAbsolutePath();
                                    if (otherFunctions.doesFileExist(altPath)) {
                                        localFilePath = altPath;
                                        audioUrl = altPath;
                                        Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                    }
                                }

                                Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                serviceIntent.putExtra("audioUrl", audioUrl);
                                serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                serviceIntent.putExtra("songTitle", songTitle);
                                serviceIntent.putExtra("localFilePath", localFilePath);
                                serviceIntent.putExtra("modelId", model.getModelId());
                                serviceIntent.putExtra("position", holder.getAdapterPosition());
                                ContextCompat.startForegroundService(mContext, serviceIntent);

                                // Show the bottom sheet
                                if (mContext instanceof AppCompatActivity) {
                                    MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                    bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                } else {
                                    //   Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                    Log.e("MusicPlayer", "mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                }
                            }
                        }
                    });


                    ((receiverViewHolder) holder).recLinear.setOnLongClickListener(new View.OnLongClickListener() {
                        @Override
                        public boolean onLongClick(View v) {
                            int[] location = new int[2];
                            v.getLocationOnScreen(location);
                            float touchX = location[0];
                            float touchY = location[1];


                            BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                            BlurHelper.dialogLayoutColor.show();
                            RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                            // Use boundary-aware positioning
                            BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);
                            TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                            TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                            TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                            TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                            TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                            TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                            TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                            TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                            TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                            TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                            RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                            RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                            RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                            ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                            ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                            ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                            ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                            ProgressBar miceProgressbar = BlurHelper.dialogLayoutColor.findViewById(R.id.miceProgressbar);
                            AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                            AppCompatImageButton micePlay = BlurHelper.dialogLayoutColor.findViewById(R.id.micePlay);
                            LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                            LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                            LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                            LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                            LinearLayout progresslyt = BlurHelper.dialogLayoutColor.findViewById(R.id.progresslyt);
                            View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                            View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                            View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                            View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                            CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                            TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                            TextView miceTiming = BlurHelper.dialogLayoutColor.findViewById(R.id.miceTiming);
                            FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);
                            CircleImageView miceUImage = BlurHelper.dialogLayoutColor.findViewById(R.id.miceUImage);

                            LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                            LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                            CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                            LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                            TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                            LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                            CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                            CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                            ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                            TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                            ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                            TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                            RelativeLayout audioDownloadControlsReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControlsReceiver);
                            FloatingActionButton downlaodAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudioReceiver);
                            ProgressBar progressBarAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudioReceiver);
                            TextView downloadPercentageAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioReceiver);
                            ImageButton pauseButtonAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioReceiver);
                            RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                            ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                            TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                            FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                            ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                            CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                            LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                            TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                            TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                            TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);


                            // TODO: 30/01/25  emoji header
                            RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                            LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                            Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                            addEmoji.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        Constant.Vibrator(mContext);
                                    }

                                    Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                    Constant.bottomSheetDialog.show();
                                    RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                    ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                    Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                }
                            });
                            Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                            emojiLongRec.startAnimation(fadeIn);


                            Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                            cardview.startAnimation(animationdd);
                            recTime.setText(model.getTime());
                            // main codeing starting from here
                            readMore.setVisibility(View.GONE);
                            richLinkViewLyt.setVisibility(View.GONE);
                            recMessage.setVisibility(View.GONE);
                            recVideo.setVisibility(View.GONE);
                            receivervideoLyt.setVisibility(View.GONE);
                            recImg.setVisibility(View.GONE);
                            receiverImgLyt.setVisibility(View.GONE);
                            docLyt.setVisibility(View.GONE);
                            contactContainer.setVisibility(View.GONE);
                            viewnew.setVisibility(View.VISIBLE);

                            if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                replylyoutGlobal.setVisibility(View.VISIBLE);
                                miceReply.setVisibility(View.VISIBLE);
                                pageLyt.setVisibility(View.GONE);
                                musicReply.setVisibility(View.GONE);
                                recMessage.setVisibility(View.GONE);
                                receiverImgLyt.setVisibility(View.GONE);
                                imgcardview.setVisibility(View.GONE);
                                contactContainerReply.setVisibility(View.GONE);
                                recImg.setVisibility(View.GONE);
                                replyTheme.setBackgroundTintList(tintList);
                                replyYou.setTextColor(Color.parseColor(themColor));
                                docLyt.setVisibility(View.GONE);
                                miceContainer.setVisibility(View.GONE);
                                miceTiming.setVisibility(View.GONE);
                                audioDownloadControlsReceiver.setVisibility(View.GONE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.VISIBLE);
                                viewbarlyt1.setVisibility(View.GONE);

                                if (model.getReplyType().equals(Constant.Text)) {
                                    recMessage.setVisibility(View.GONE);
                                    recImg.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.GONE);
                                    contactContainer.setVisibility(View.GONE);
                                    recVideo.setVisibility(View.GONE);
                                    receivervideoLyt.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.VISIBLE);
                                    repliedData.setText(model.getReplytextData());
                                    repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                    ));
                                    miceTiming.setText(model.getMiceTiming());
                                    msgreplyText.setText("Mic");
                                    Drawable drawable = mContext.getResources().getDrawable(R.drawable.micegray);
                                    int size = (int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                    );
                                    drawable.setBounds(0, 0, size, size);
                                    drawable.setTint(Color.parseColor("#78787A"));
                                    msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                    msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                            TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                    ));
                                }
                            } else {
                                replylyoutGlobal.setVisibility(View.GONE);
                                miceContainer.setVisibility(View.VISIBLE);
                                miceTiming.setVisibility(View.VISIBLE);

                                if (!model.getCaption().equals("")) {
                                    captionText.setVisibility(View.VISIBLE);
                                    captionText.setText(model.getCaption());
                                } else {
                                    captionText.setVisibility(View.GONE);
                                }

                                replyDevider.setVisibility(View.GONE);
                                replydatalyt.setVisibility(View.GONE);
                                viewbarlyt1.setVisibility(View.GONE);
                                miceTiming.setText(model.getMiceTiming());
                                micePlay.setVisibility(View.VISIBLE);
                                audioDownloadControlsReceiver.setVisibility(View.VISIBLE);

                                File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
                                if (!audiosDir.exists()) audiosDir.mkdirs();
                                File targetFile = new File(audiosDir, model.getFileName());

                                if (targetFile.exists()) {
                                    downlaodAudioReceiver.setVisibility(View.GONE);
                                    progressBarAudioReceiver.setVisibility(View.GONE);
                                    downloadPercentageAudioReceiver.setVisibility(View.GONE);
                                    pauseButtonAudioReceiver.setVisibility(View.GONE);
                                } else {
                                    downlaodAudioReceiver.setVisibility(View.VISIBLE);
                                    progressBarAudioReceiver.setVisibility(View.GONE);
                                    downloadPercentageAudioReceiver.setVisibility(View.GONE);
                                    pauseButtonAudioReceiver.setVisibility(View.GONE);
                                }


                            }
                            // -----------------------------Ends_Here--------------------------------------


                            LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                            if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                deleteLyt.setVisibility(View.GONE);
                            } else {
                                deleteLyt.setVisibility(View.VISIBLE);
                            }
                            LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                            if (model.getDataType().equals(Constant.Text)) {


                                if (model.getMessage().equals("You deleted this message")) {
                                    copy.setVisibility(View.GONE);
                                } else {
                                    copy.setVisibility(View.VISIBLE);
                                    copy.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                            ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                            clipboardManager.setPrimaryClip(clipData);
                                            Log.d("TAG", "onClick: " + model.getMessage());
                                            BlurHelper.dialogLayoutColor.dismiss();
                                        }
                                    });
                                }
                            } else {
                                copy.setVisibility(View.GONE);
                            }


                            LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                            // Add SelectLyt click listener for multi-selection
                            senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                            forward.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {


                                    BlurHelper.dialogLayoutColor.dismiss();
                                    Constant.bottomsheetforward(mContext);
                                    Constant.bottomSheetDialog.show();

                                    Constant.getSfFuncion(mContext);
                                    ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                    View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                    AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                    dx = Constant.viewShape.findViewById(R.id.dx);
                                    richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                    ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                    recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                    namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                    forwardText = Constant.viewShape.findViewById(R.id.forward);


                                    LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                    try {

                                        Constant.getSfFuncion(mContext);
                                        themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                        tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                        try {
                                            if (themColor.equals("#ff0080")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                            } else if (themColor.equals("#00A3E9")) {

                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            } else if (themColor.equals("#7adf2a")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                            } else if (themColor.equals("#ec0001")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                            } else if (themColor.equals("#16f3ff")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                            } else if (themColor.equals("#FF8A00")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                            } else if (themColor.equals("#7F7F7F")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                            } else if (themColor.equals("#D9B845")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                            } else if (themColor.equals("#346667")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                            } else if (themColor.equals("#9846D9")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                            } else if (themColor.equals("#A81010")) {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                            } else {


                                                networkLoader.setTrackColor(Color.parseColor(themColor));
                                                viewnewnn.setBackgroundTintList(tintList);
                                                networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                            }
                                        } catch (Exception ignored) {

                                        }


                                    } catch (Exception ignored) {
                                    }
                                    if (otherFunctions.isInternetConnected(mContext)) {
                                        //TODO ONLINE
                                        networkLoader.setVisibility(View.GONE);

                                        networkLoader.setVisibility(View.GONE);
                                        try {
                                            // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();

                                            if (get_user_active_contact_forward_list.size() > 0) {
                                                // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);
                                            } else {

                                            }
                                        } catch (Exception e) {
                                            Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                        }
                                        Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                    } else {
                                        //TODO OFFLINE
                                        networkLoader.setVisibility(View.VISIBLE);
                                        try {

                                            Log.d("Network", "dissconnetced: " + "chattingRoom");
                                            get_user_active_contact_forward_list.clear();
                                            DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                            get_user_active_contact_forward_list = dbHelper.getAllData();
                                            otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                            recyclerview.setVisibility(View.VISIBLE);

                                        } catch (Exception ignored) {
                                        }

                                    }

                                    cancel.setOnClickListener(new View.OnClickListener() {
                                        @Override
                                        public void onClick(View v) {
                                            Constant.bottomSheetDialog.dismiss();
                                        }
                                    });

                                    searchview.addTextChangedListener(new TextWatcher() {
                                        @Override
                                        public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                        }

                                        @Override
                                        public void onTextChanged(CharSequence s, int start, int before, int count) {
                                            senderReceiverDownload.filteredList(String.valueOf(s));
                                        }

                                        @Override
                                        public void afterTextChanged(Editable s) {

                                        }
                                    });

                                    forwardText.setOnClickListener(new View.OnClickListener() {
                                        private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                        private int completedTasks = 0;
                                        private final int totalTasks;

                                        {
                                            totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                        }

                                        @Override
                                        public void onClick(View v) {
                                            Log.d("TAG", "Forward button clicked. Starting forward process.");
                                            Constant.getSfFuncion(mContext);

                                            Date d = new Date();
                                            SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                            String currentDateTimeString = sdf.format(d);
                                            Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                            if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                return;
                                            }

                                            progressBarMainNew.setVisibility(View.VISIBLE);
                                            int listcount = forwardNameList.size();
                                            String modelId = database.getReference().push().getKey();
                                            for (int i = 0; i < forwardNameList.size(); i++) {
                                                final int index = i;
                                                int finalI = i;
                                                executor.execute(() -> {
                                                    forwardnameModel forwardModel = forwardNameList.get(index);
                                                    if (forwardModel == null) {
                                                        Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String f_id = forwardModel.getFriend_id();
                                                    String f_token = forwardModel.getF_token();
                                                    Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                    if (f_id == null || f_token == null) {
                                                        Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                    Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                    if (myUID.isEmpty() || modelId == null) {
                                                        Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                        onTaskComplete();
                                                        return;
                                                    }

                                                    try {
                                                        ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                        emojiModels.add(new emojiModel("", ""));
                                                        Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                        messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                        messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                        try {
                                                            new DatabaseHelper(mContext).insertMessage(model2);
                                                            Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                        } catch (Exception e) {
                                                            Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                        }


                                                        Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                        UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                        Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                        uploadHelper.uploadContent(modelnew);
                                                        Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);

                                                        if (finalI == forwardNameList.size() - 1) {
                                                            if (listcount == 1) {
                                                                Intent intent = new Intent(mContext, chattingScreen.class);
                                                                intent.putExtra("nameKey", forwardModel.getName());
                                                                intent.putExtra("captionKey", "");
                                                                intent.putExtra("photoKey", "");
                                                                intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                intent.putExtra("msgLmtKey", "");
                                                                intent.putExtra("ecKey", "ecKey");
                                                                intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                intent.putExtra("deviceType", "");
                                                                intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                intent.putExtra("forwardShort", "forwardShort");
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();
                                                            } else {
                                                                Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                Constant.bottomSheetDialog.dismiss();

                                                            }
                                                        }

                                                    } catch (Exception e) {
                                                        Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                        Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                    } finally {
                                                        onTaskComplete();
                                                    }
                                                });
                                            }
                                        }

                                        private synchronized void onTaskComplete() {
                                            completedTasks++;
                                            Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                            if (completedTasks >= totalTasks) {
                                                Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                new Handler(Looper.getMainLooper()).post(() -> {
                                                    progressBarMainNew.setVisibility(View.GONE);
                                                    Constant.bottomSheetDialog.dismiss();
                                                });
                                                executor.shutdown();
                                            }
                                        }
                                    });


                                }
                            });

                            deleteLyt.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {
                                    /// Need to store delete key data here


                                    Constant.setSfFunction(mContext);
                                    Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                    Constant.setSF.apply();
                                    BlurHelper.dialogLayoutColor.dismiss();
                                    ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                    Log.d("data000", model.getReceiverUid());
                                    Log.d("data000", model.getModelId());
                                    database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                        @Override
                                        public void onSuccess(Void unused) {
                                            // todo here we need to delete from sqlLite database
                                            try {
                                                new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                            } catch (Exception e) {
                                                throw new RuntimeException(e);
                                            }
                                            senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);
                                            Webservice.delete_chatingindivisualReceiver(mContext, model.getModelId(), model.getUid() + model.getReceiverUid(), model.getUid(), model.getReceiverUid());
                                        }
                                    });
                                }
                            });


                            return true;
                        }
                    });



                    File docsDir;
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                        docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Audios");
                    } else {
                        docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Audios");
                    }
                    if (!docsDir.exists()) docsDir.mkdirs();
                    File localDoc = new File(docsDir, model.getFileName());
                    boolean docExists = localDoc.exists();
                    ((receiverViewHolder) holder).audioDownloadControlsReceiver.setVisibility(View.VISIBLE);
                    ((receiverViewHolder) holder).progressBarDocReceiver.setVisibility(View.GONE);
                    ((receiverViewHolder) holder).downloadPercentageAudioReceiver.setVisibility(View.GONE);

                    ((receiverViewHolder) holder).downlaodAudioReceiver.setVisibility(docExists ? View.GONE : View.VISIBLE);

                    ((receiverViewHolder) holder).downlaodAudioReceiver.setOnClickListener(v -> {
                        if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                            senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                            return;
                        }
                        senderReceiverDownload.startReceiverAudioDownloadWithProgress(holder, model, mContext);
                    });


                } else {
                    ((receiverViewHolder) holder).recImgBunchLyt.setVisibility(View.GONE);
                    Log.d("TAG444", "com");
                    List<String> musicExtensions = Arrays.asList("mp3", "wav", "flac", "aac", "ogg", "oga", "m4a", "wma", "alac", "aiff");

                    String ext = model.getExtension();
                    if (ext != null && musicExtensions.contains(ext.toLowerCase())) {


                        ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);

                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                        // Always show viewnew
                        ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);


                        if (model.getReplyKey().equals(Constant.ReplyKey)) {
                            // TODO: 04/09/25  NEW REPLY
                            ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).pageLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).musicReply.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).imgcardview.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                            ((receiverViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                            ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).audioDownloadControlsReceiver.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).miceReply.setVisibility(View.GONE);


                            if (!model.getCaption().equals("")) {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                            } else {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                            }

                            ((receiverViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).audioDownloadControlsReceiver.setVisibility(View.GONE);

                            if (model.getReplyType().equals(Constant.Text)) {


                                ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).repliedData.setText(model.getReplytextData());
                                ((receiverViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                                ((receiverViewHolder) holder).miceTiming.setText(model.getMiceTiming());

                                ((receiverViewHolder) holder).msgreplyText.setText("Music");
                                Drawable drawable = mContext.getResources().getDrawable(R.drawable.musical_note);
                                int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                drawable.setBounds(0, 0, size, size);
                                drawable.setTint(Color.parseColor("#78787A"));

                                ((receiverViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                                ((receiverViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                        mContext.getResources().getDisplayMetrics()));

                            }
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        } else {
                            ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).miceContainer.setVisibility(View.VISIBLE);

                            if (!model.getCaption().equals("")) {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                            } else {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                            }
                            ((receiverViewHolder) holder).replyDevider.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);


                            ((receiverViewHolder) holder).miceTiming.setText(model.getMiceTiming());


                            ((receiverViewHolder) holder).micePlay.setVisibility(View.VISIBLE);


                            // Show the audio download controls for receiver
                            ((receiverViewHolder) holder).audioDownloadControlsReceiver.setVisibility(View.VISIBLE);

                            File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                            if (!audiosDir.exists()) audiosDir.mkdirs();
                            File targetFile = new File(audiosDir, model.getFileName());

                            if (targetFile.exists()) {
                                // Already downloaded
                                ((receiverViewHolder) holder).downlaodAudioReceiver.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).progressBarAudioReceiver.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).downloadPercentageAudioReceiver.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).pauseButtonAudioReceiver.setVisibility(View.GONE);
                            } else {
                                // Offer to download
                                ((receiverViewHolder) holder).downlaodAudioReceiver.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).progressBarAudioReceiver.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).downloadPercentageAudioReceiver.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).pauseButtonAudioReceiver.setVisibility(View.GONE);

                                ((receiverViewHolder) holder).downlaodAudioReceiver.setOnClickListener(v -> {
                                    senderReceiverDownload.startReceiverAudioDownloadWithProgressXDocuments(holder, model, mContext);
                                });
                            }


                            ((receiverViewHolder) holder).micePlay.setOnClickListener(new View.OnClickListener() {
                                @Override
                                public void onClick(View v) {

//
                                    String audioUrl = model.getDocument(); // URL or local path
                                    String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                    String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                    String localFilePath = null;

                                    File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");

                                    if (audiosDir != null) {
                                        String altPath = new File(audiosDir, model.getFileName()).getAbsolutePath();
                                        if (otherFunctions.doesFileExist(altPath)) {
                                            localFilePath = altPath;
                                            audioUrl = altPath;
                                            Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                        }
                                    }

                                    Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                    serviceIntent.putExtra("audioUrl", audioUrl);
                                    serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                    serviceIntent.putExtra("songTitle", songTitle);
                                    serviceIntent.putExtra("localFilePath", localFilePath);
                                    serviceIntent.putExtra("modelId", model.getModelId());
                                    serviceIntent.putExtra("position", holder.getAdapterPosition());
                                    ContextCompat.startForegroundService(mContext, serviceIntent);

                                    // Show the bottom sheet
                                    if (mContext instanceof AppCompatActivity) {
                                        MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                        bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                    } else {
                                        //   Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                        Log.e("MusicPlayer", "mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                    }


                                }
                            });


                        }
                        ((receiverViewHolder) holder).itemView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                    Constant.getSfFuncion(mContext);
                                    String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                    String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                    String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                    DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                    messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });


                                    DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                    messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {

                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                } else {
                                    String audioUrl = model.getDocument(); // URL or local path
                                    String profileImageUrl = model.getMicPhoto() != null ? model.getMicPhoto() : "";
                                    String songTitle = model.getFileName() != null ? model.getFileName() : "Audio Message";
                                    String localFilePath = null;

                                    File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");

                                    if (audiosDir != null) {
                                        String altPath = new File(audiosDir, model.getFileName()).getAbsolutePath();
                                        if (otherFunctions.doesFileExist(altPath)) {
                                            localFilePath = altPath;
                                            audioUrl = altPath;
                                            Log.e("3456yhjkldxwaxa", "onClick: " + audioUrl);
                                        }
                                    }

                                    Intent serviceIntent = new Intent(mContext, AudioPlaybackService.class);
                                    serviceIntent.putExtra("audioUrl", audioUrl);
                                    serviceIntent.putExtra("profileImageUrl", profileImageUrl);
                                    serviceIntent.putExtra("songTitle", songTitle);
                                    serviceIntent.putExtra("localFilePath", localFilePath);
                                    serviceIntent.putExtra("modelId", model.getModelId());
                                    serviceIntent.putExtra("position", holder.getAdapterPosition());
                                    ContextCompat.startForegroundService(mContext, serviceIntent);

                                    // Show the bottom sheet
                                    if (mContext instanceof AppCompatActivity) {
                                        MusicPlayerBottomSheet bottomSheet = MusicPlayerBottomSheet.newInstance(audioUrl, profileImageUrl, songTitle, receiverUid, name, captionKey);
                                        bottomSheet.show(((AppCompatActivity) mContext).getSupportFragmentManager(), MusicPlayerBottomSheet.TAG);
                                    } else {
                                        //   Toast.makeText(mContext, "Unable to show player: Activity not compatible", Toast.LENGTH_SHORT).show();
                                        Log.e("MusicPlayer", "mContext is not an AppCompatActivity: " + mContext.getClass().getSimpleName());
                                    }
                                }
                            }
                        });
                        ((receiverViewHolder) holder).recLinear.setOnLongClickListener(new View.OnLongClickListener() {
                            @Override
                            public boolean onLongClick(View v) {
                                int[] location = new int[2];
                                v.getLocationOnScreen(location);
                                float touchX = location[0];
                                float touchY = location[1];


                                BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                                BlurHelper.dialogLayoutColor.show();
                                RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                                // Use boundary-aware positioning
                                BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);
                                TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                                TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                                TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                                TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                                TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);
                                TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                                TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                                TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                                TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                                RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                                RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                                RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                                ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                                ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                                ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                                ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                                ProgressBar miceProgressbar = BlurHelper.dialogLayoutColor.findViewById(R.id.miceProgressbar);
                                AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                                AppCompatImageButton micePlay = BlurHelper.dialogLayoutColor.findViewById(R.id.micePlay);
                                LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                                LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                                LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                                LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                                LinearLayout progresslyt = BlurHelper.dialogLayoutColor.findViewById(R.id.progresslyt);
                                View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                                View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                                View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                                View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                                CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                                TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                                TextView miceTiming = BlurHelper.dialogLayoutColor.findViewById(R.id.miceTiming);
                                FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);
                                CircleImageView miceUImage = BlurHelper.dialogLayoutColor.findViewById(R.id.miceUImage);

                                LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                                LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                                CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                                LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                                TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                                LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                                CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                                CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                                ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                                TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                                ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                                TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                                RelativeLayout audioDownloadControlsReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControlsReceiver);
                                FloatingActionButton downlaodAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudioReceiver);
                                ProgressBar progressBarAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudioReceiver);
                                TextView downloadPercentageAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioReceiver);
                                ImageButton pauseButtonAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioReceiver);
                                RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                                ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                                TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                                FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                                ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                                CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                                LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                                TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                                TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                                TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);


                                // TODO: 30/01/25  emoji header
                                RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                                LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                                Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                                addEmoji.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            Constant.Vibrator(mContext);
                                        }

                                        Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                        Constant.bottomSheetDialog.show();
                                        RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                        ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                        Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                    }
                                });
                                Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                                emojiLongRec.startAnimation(fadeIn);


                                Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                                cardview.startAnimation(animationdd);
                                recTime.setText(model.getTime());
                                // main codeing starting from here
                                readMore.setVisibility(View.GONE);
                                richLinkViewLyt.setVisibility(View.GONE);
                                recMessage.setVisibility(View.GONE);
                                recVideo.setVisibility(View.GONE);
                                receivervideoLyt.setVisibility(View.GONE);
                                recImg.setVisibility(View.GONE);
                                receiverImgLyt.setVisibility(View.GONE);
                                docLyt.setVisibility(View.GONE);
                                contactContainer.setVisibility(View.GONE);
                                viewnew.setVisibility(View.VISIBLE);

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                    replylyoutGlobal.setVisibility(View.VISIBLE);
                                    pageLyt.setVisibility(View.GONE);
                                    musicReply.setVisibility(View.VISIBLE);
                                    recMessage.setVisibility(View.GONE);
                                    receiverImgLyt.setVisibility(View.GONE);
                                    imgcardview.setVisibility(View.GONE);
                                    contactContainerReply.setVisibility(View.GONE);
                                    recImg.setVisibility(View.GONE);
                                    replyTheme.setBackgroundTintList(tintList);
                                    replyYou.setTextColor(Color.parseColor(themColor));
                                    docLyt.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.GONE);
                                    audioDownloadControlsReceiver.setVisibility(View.GONE);
                                    miceReply.setVisibility(View.GONE);

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.VISIBLE);
                                    viewbarlyt1.setVisibility(View.GONE);
                                    audioDownloadControlsReceiver.setVisibility(View.GONE);

                                    if (model.getReplyType().equals(Constant.Text)) {
                                        recMessage.setVisibility(View.GONE);
                                        recImg.setVisibility(View.GONE);
                                        docLyt.setVisibility(View.GONE);
                                        contactContainer.setVisibility(View.GONE);
                                        recVideo.setVisibility(View.GONE);
                                        receivervideoLyt.setVisibility(View.GONE);
                                        replydatalyt.setVisibility(View.VISIBLE);
                                        repliedData.setText(model.getReplytextData());
                                        repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                        ));
                                        miceTiming.setText(model.getMiceTiming());
                                        msgreplyText.setText("Music");
                                        Drawable drawable = mContext.getResources().getDrawable(R.drawable.musical_note);
                                        int size = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                        );
                                        drawable.setBounds(0, 0, size, size);
                                        drawable.setTint(Color.parseColor("#78787A"));
                                        msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                        msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                        ));
                                    }
                                } else {
                                    replylyoutGlobal.setVisibility(View.GONE);
                                    miceContainer.setVisibility(View.VISIBLE);

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.GONE);
                                    viewbarlyt1.setVisibility(View.GONE);
                                    miceTiming.setText(model.getMiceTiming());
                                    micePlay.setVisibility(View.VISIBLE);
                                    audioDownloadControlsReceiver.setVisibility(View.VISIBLE);

                                    File audiosDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                    if (!audiosDir.exists()) audiosDir.mkdirs();
                                    File targetFile = new File(audiosDir, model.getFileName());

                                    if (targetFile.exists()) {
                                        downlaodAudioReceiver.setVisibility(View.GONE);
                                        progressBarAudioReceiver.setVisibility(View.GONE);
                                        downloadPercentageAudioReceiver.setVisibility(View.GONE);
                                        pauseButtonAudioReceiver.setVisibility(View.GONE);
                                    } else {
                                        downlaodAudioReceiver.setVisibility(View.GONE);

                                        progressBarAudioReceiver.setVisibility(View.GONE);
                                        downloadPercentageAudioReceiver.setVisibility(View.GONE);
                                        pauseButtonAudioReceiver.setVisibility(View.GONE);
                                    }


                                }
                                // -----------------------------Ends_Here--------------------------------------


                                LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                                if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                    deleteLyt.setVisibility(View.GONE);
                                } else {
                                    deleteLyt.setVisibility(View.VISIBLE);
                                }
                                LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                                if (model.getDataType().equals(Constant.Text)) {


                                    if (model.getMessage().equals("You deleted this message")) {
                                        copy.setVisibility(View.GONE);
                                    } else {
                                        copy.setVisibility(View.VISIBLE);
                                        copy.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                                ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                                clipboardManager.setPrimaryClip(clipData);
                                                Log.d("TAG", "onClick: " + model.getMessage());
                                                BlurHelper.dialogLayoutColor.dismiss();
                                            }
                                        });
                                    }
                                } else {
                                    copy.setVisibility(View.GONE);
                                }


                                LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                                // Add SelectLyt click listener for multi-selection
                                senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                                forward.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {


                                        BlurHelper.dialogLayoutColor.dismiss();
                                        Constant.bottomsheetforward(mContext);
                                        Constant.bottomSheetDialog.show();

                                        Constant.getSfFuncion(mContext);
                                        ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                        View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                        AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                        dx = Constant.viewShape.findViewById(R.id.dx);
                                        richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                        ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                        recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                        namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                        forwardText = Constant.viewShape.findViewById(R.id.forward);


                                        LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                        try {

                                            Constant.getSfFuncion(mContext);
                                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                            try {
                                                if (themColor.equals("#ff0080")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                                } else if (themColor.equals("#00A3E9")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                } else if (themColor.equals("#7adf2a")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                                } else if (themColor.equals("#ec0001")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                                } else if (themColor.equals("#16f3ff")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                                } else if (themColor.equals("#FF8A00")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                                } else if (themColor.equals("#7F7F7F")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                                } else if (themColor.equals("#D9B845")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                                } else if (themColor.equals("#346667")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                                } else if (themColor.equals("#9846D9")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                                } else if (themColor.equals("#A81010")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                                } else {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                }
                                            } catch (Exception ignored) {

                                            }


                                        } catch (Exception ignored) {
                                        }
                                        if (otherFunctions.isInternetConnected(mContext)) {
                                            //TODO ONLINE
                                            networkLoader.setVisibility(View.GONE);

                                            networkLoader.setVisibility(View.GONE);
                                            try {
                                                // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();

                                                if (get_user_active_contact_forward_list.size() > 0) {
                                                    // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                    otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                    recyclerview.setVisibility(View.VISIBLE);
                                                } else {

                                                }
                                            } catch (Exception e) {
                                                Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                            }
                                            Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                        } else {
                                            //TODO OFFLINE
                                            networkLoader.setVisibility(View.VISIBLE);
                                            try {

                                                Log.d("Network", "dissconnetced: " + "chattingRoom");
                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);

                                            } catch (Exception ignored) {
                                            }

                                        }

                                        cancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Constant.bottomSheetDialog.dismiss();
                                            }
                                        });

                                        searchview.addTextChangedListener(new TextWatcher() {
                                            @Override
                                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                            }

                                            @Override
                                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                                                senderReceiverDownload.filteredList(String.valueOf(s));
                                            }

                                            @Override
                                            public void afterTextChanged(Editable s) {

                                            }
                                        });

                                        forwardText.setOnClickListener(new View.OnClickListener() {
                                            private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                            private int completedTasks = 0;
                                            private final int totalTasks;

                                            {
                                                totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                            }

                                            @Override
                                            public void onClick(View v) {
                                                Log.d("TAG", "Forward button clicked. Starting forward process.");
                                                Constant.getSfFuncion(mContext);

                                                Date d = new Date();
                                                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                                String currentDateTimeString = sdf.format(d);
                                                Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                                if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                    Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                    Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                    return;
                                                }

                                                progressBarMainNew.setVisibility(View.VISIBLE);
                                                int listcount = forwardNameList.size();
                                                String modelId = database.getReference().push().getKey();
                                                for (int i = 0; i < forwardNameList.size(); i++) {
                                                    final int index = i;
                                                    int finalI = i;
                                                    executor.execute(() -> {
                                                        forwardnameModel forwardModel = forwardNameList.get(index);
                                                        if (forwardModel == null) {
                                                            Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String f_id = forwardModel.getFriend_id();
                                                        String f_token = forwardModel.getF_token();
                                                        Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                        if (f_id == null || f_token == null) {
                                                            Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                        Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                        if (myUID.isEmpty() || modelId == null) {
                                                            Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        try {
                                                            ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                            emojiModels.add(new emojiModel("", ""));
                                                            Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                            messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                            messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                            try {
                                                                new DatabaseHelper(mContext).insertMessage(model2);
                                                                Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                            } catch (Exception e) {
                                                                Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                            }


                                                            Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                            UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                            Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                            uploadHelper.uploadContent(modelnew);
                                                            Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);

                                                            if (finalI == forwardNameList.size() - 1) {
                                                                if (listcount == 1) {
                                                                    Intent intent = new Intent(mContext, chattingScreen.class);
                                                                    intent.putExtra("nameKey", forwardModel.getName());
                                                                    intent.putExtra("captionKey", "");
                                                                    intent.putExtra("photoKey", "");
                                                                    intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                    intent.putExtra("msgLmtKey", "");
                                                                    intent.putExtra("ecKey", "ecKey");
                                                                    intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                    intent.putExtra("deviceType", "");
                                                                    intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                    intent.putExtra("forwardShort", "forwardShort");
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();
                                                                } else {
                                                                    Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();

                                                                }
                                                            }

                                                        } catch (Exception e) {
                                                            Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                            Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                        } finally {
                                                            onTaskComplete();
                                                        }
                                                    });
                                                }
                                            }

                                            private synchronized void onTaskComplete() {
                                                completedTasks++;
                                                Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                                if (completedTasks >= totalTasks) {
                                                    Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                    new Handler(Looper.getMainLooper()).post(() -> {
                                                        progressBarMainNew.setVisibility(View.GONE);
                                                        Constant.bottomSheetDialog.dismiss();
                                                    });
                                                    executor.shutdown();
                                                }
                                            }
                                        });


                                    }
                                });

                                deleteLyt.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        /// Need to store delete key data here


                                        Constant.setSfFunction(mContext);
                                        Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                        Constant.setSF.apply();
                                        BlurHelper.dialogLayoutColor.dismiss();
                                        ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                        Log.d("data000", model.getReceiverUid());
                                        Log.d("data000", model.getModelId());
                                        database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {


                                                // todo here we need to delete from sqlLite database

                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }
                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                Webservice.delete_chatingindivisualReceiver(mContext, model.getModelId(), model.getUid() + model.getReceiverUid(), model.getUid(), model.getReceiverUid());
                                            }
                                        });
                                    }
                                });


                                return true;
                            }
                        });

                        File docsDir;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                        } else {
                            docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                        }
                        if (!docsDir.exists()) docsDir.mkdirs();
                        File localDoc = new File(docsDir, model.getFileName());
                        boolean docExists = localDoc.exists();
                        ((receiverViewHolder) holder).audioDownloadControlsReceiver.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).progressBarDocReceiver.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).downloadPercentageAudioReceiver.setVisibility(View.GONE);

                        ((receiverViewHolder) holder).downlaodAudioReceiver.setVisibility(docExists ? View.GONE : View.VISIBLE);

                        ((receiverViewHolder) holder).downlaodAudioReceiver.setOnClickListener(v -> {
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }
                            senderReceiverDownload.startReceiverDocDownloadWithProgress(holder, model, mContext);
                        });

                    } else {

                        //for docs
                        ((receiverViewHolder) holder).readMore.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).richLinkViewLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                        // Always show viewnew
                        ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);


                        File docsDir;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                        } else {
                            docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                        }
                        if (!docsDir.exists()) docsDir.mkdirs();

                        File localDoc = new File(docsDir, model.getFileName());
                        boolean docExists = localDoc.exists();

                        ((receiverViewHolder) holder).docDownloadControlsReceiver.setVisibility(View.VISIBLE);
                        ((receiverViewHolder) holder).progressBarDocReceiver.setVisibility(View.GONE);
                        ((receiverViewHolder) holder).downloadPercentageDocReceiver.setVisibility(View.GONE);

                        ((receiverViewHolder) holder).downlaodDocReceiver.setVisibility(docExists ? View.GONE : View.VISIBLE);


                        ((receiverViewHolder) holder).downlaodDocReceiver.setOnClickListener(v -> {
                            // Handle multi-selection mode first
                            if (senderReceiverDownload.isMultiSelectMode(isMultiSelectMode)) {
                                senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this);
                                return;
                            }
                            senderReceiverDownload.startReceiverDocDownloadWithProgress(holder, model, mContext);
                        });


                        if (model.getExtension().equalsIgnoreCase("pdf")) {
                            ((receiverViewHolder) holder).pdfPreview.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).pdfcard.setVisibility(View.VISIBLE);

                            String localPreviewImagePath = otherFunctions.getLocalPdfPreviewImagePath(model, mContext);
                            // Get the remote URL of the actual PDF document
                            String remotePdfUrl = otherFunctions.getRemotePdfUrl(model);

                            // Load the PDF preview, handling caching logic internally
                            ImageView targetImageView = ((receiverViewHolder) holder).pdfPreview;
                            ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                            otherFunctions.loadPdfPreview(localPreviewImagePath, remotePdfUrl, ((receiverViewHolder) holder).pdfPreview, parentLayout, position, model, mContext);

                            ((receiverViewHolder) holder).docFileIcon.setBackgroundTintList(ColorStateList.valueOf(Color.RED));


                        } else
                            if (model.getExtension().equalsIgnoreCase("xls")) {
                            ((receiverViewHolder) holder).pdfPreview.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).pdfcard.setVisibility(View.GONE);
                            String filePath = otherFunctions.getFilePath(model, mContext);


                            //     ((receiverViewHolder) holder).docFileIcon.setBackgroundTintList(ColorStateList.valueOf(R.color.TextColor));

                        } else
                        {
                            ((receiverViewHolder) holder).pdfPreview.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).pdfcard.setVisibility(View.GONE);
                            //    ((receiverViewHolder) holder).docFileIcon.setBackgroundTintList(ColorStateList.valueOf(R.color.TextColor));
                        }


                        if (model.getReplyKey().equals(Constant.ReplyKey)) {

                            // TODO: 03/09/25  NEW REPLY  CONTENT

                            ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).pageLyt.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).musicReply.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).receiverImgLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).imgcardview.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).contactContainerReply.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).replyTheme.setBackgroundTintList(tintList);
                            ((receiverViewHolder) holder).replyYou.setTextColor(Color.parseColor(themColor));
                            ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).miceReply.setVisibility(View.GONE);

                            if (!model.getCaption().equals("")) {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                            } else {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                            }
//                        //here need to visible
//                        // important views
                            ((receiverViewHolder) holder).replyDevider.setVisibility(View.VISIBLE);
                            ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);
                            Log.d("0909887", model.getReplyKey());

                            if (model.getReplyType().equals(Constant.Text)) {

                                ((receiverViewHolder) holder).docLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recMessage.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recImg.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).recVideo.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).receivervideoLyt.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).contactContainer.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).miceContainer.setVisibility(View.GONE);
                                ((receiverViewHolder) holder).docName.setText(model.getReplyOldData());
                                ((receiverViewHolder) holder).extension.setText(model.getExtension());

                                ((receiverViewHolder) holder).replydatalyt.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).repliedData.setText(model.getReplytextData());
                                ((receiverViewHolder) holder).repliedData.setMaxWidth((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 128, holder.itemView.getContext().getResources().getDisplayMetrics()));


                                ((receiverViewHolder) holder).msgreplyText.setText("Doc");
                                Drawable drawable = mContext.getResources().getDrawable(R.drawable.documentsvg);
                                int size = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics());

                                drawable.setBounds(0, 0, size, size);
                                drawable.setTint(Color.parseColor("#78787A"));

                                ((receiverViewHolder) holder).msgreplyText.setCompoundDrawables(drawable, null, null, null);

                                ((receiverViewHolder) holder).msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 5, // 5dp padding
                                        mContext.getResources().getDisplayMetrics()));

                                ((receiverViewHolder) holder).pageText.setText(model.getExtension());

                            }
                            ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                        } else {
                            ((receiverViewHolder) holder).replylyoutGlobal.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).docLyt.setVisibility(View.VISIBLE);

                            if (!model.getCaption().equals("")) {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.VISIBLE);
                                ((receiverViewHolder) holder).captionText.setText(model.getCaption());

                            } else {
                                ((receiverViewHolder) holder).captionText.setVisibility(View.GONE);
                            }
                            ((receiverViewHolder) holder).replyDevider.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).replydatalyt.setVisibility(View.GONE);
                            ((receiverViewHolder) holder).viewbarlyt1.setVisibility(View.GONE);

                            ((receiverViewHolder) holder).docName.setText(model.getFileName());
                            ((receiverViewHolder) holder).extension.setText(model.getExtension());


                        }
                        ((receiverViewHolder) holder).itemView.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                    Constant.getSfFuncion(mContext);
                                    String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                    String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                    String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                    DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                    messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });


                                    DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                    messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {

                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                } else {

                                    File customFolder;
                                    String exactPath = null;
                                    //android 10
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();
                                        Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                    } else {
                                        customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();

                                    }

                                    if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {

                                        Intent intent = new Intent(mContext, show_document_screen.class);
                                        intent.putExtra("documentKey", model.getFileName());
                                        intent.putExtra("nameKey", model.getFileName());
                                        intent.putExtra("sizeKey", model.getDocSize());
                                        intent.putExtra("extensionKey", model.getExtension());
                                        intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                    } else {
//                                    Intent intent = new Intent(mContext, show_document_screen.class);
//                                    intent.putExtra("documentKey", model.getDocument());
//                                    intent.putExtra("nameKey", model.getDataType());
//                                    intent.putExtra("sizeKey", model.getDocSize());
//                                    intent.putExtra("extensionKey", model.getExtension());
//                                    intent.putExtra("viewHolderTypeKey", Constant.receiverViewHolder);
//                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                    }


                                }
                            }
                        });


                        ((receiverViewHolder) holder).recLinear.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {


                                    Constant.getSfFuncion(mContext);
                                    String receiverRoom = Constant.getSF.getString(Constant.UID_KEY, "") + receiverUid;
                                    String senderRoom = receiverUid + Constant.getSF.getString(Constant.UID_KEY, "");
                                    String targetModelId = model.getReplyCrtPostion(); // This is the model ID you're trying to scroll to

                                    DatabaseReference messagesRef = FirebaseDatabase.getInstance().getReference("chats").child(receiverRoom);
                                    messagesRef.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {
                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(receiverRoom, targetModelId, chattingScreen, adapter);
                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });


                                    DatabaseReference messagesRef2 = FirebaseDatabase.getInstance().getReference("chats").child(senderRoom);
                                    messagesRef2.orderByKey().addListenerForSingleValueEvent(new ValueEventListener() {
                                        @Override
                                        public void onDataChange(@NonNull DataSnapshot snapshot) {

                                            if (targetModelId != null && !targetModelId.isEmpty()) {
                                                boolean modelExists = false;
                                                for (DataSnapshot child : snapshot.getChildren()) {
                                                    if (child.getKey().equals(targetModelId)) {
                                                        modelExists = true;
                                                        break;
                                                    }
                                                }

                                                if (modelExists) {
                                                    otherFunctions.scrollToTargetModelId(senderRoom, targetModelId, chattingScreen, adapter);

                                                } else {
                                                    Log.d("Firebase", "modelId not found in snapshot");
                                                }
                                            } else {
                                                Log.d("Firebase", "Reply modelId is null or empty");
                                            }
                                        }

                                        @Override
                                        public void onCancelled(@NonNull DatabaseError error) {
                                            Log.e("Firebase", "Database read cancelled: " + error.getMessage());
                                        }
                                    });

                                } else {

                                    File customFolder;
                                    String exactPath = null;
                                    //android 10
                                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                        customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();
                                        Log.d("TAG", "exactPath: " + exactPath + "/" + model.getFileName());
                                    } else {
                                        customFolder = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                        exactPath = customFolder.getAbsolutePath();

                                    }

                                    if (otherFunctions.doesFileExist(exactPath + "/" + model.getFileName())) {

                                        Intent intent = new Intent(mContext, show_document_screen.class);
                                        intent.putExtra("documentKey", model.getFileName());
                                        intent.putExtra("nameKey", model.getFileName());
                                        intent.putExtra("sizeKey", model.getDocSize());
                                        intent.putExtra("extensionKey", model.getExtension());
                                        intent.putExtra("viewHolderTypeKey", Constant.senderViewHolder);
                                        SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                    } else {
//                                    Intent intent = new Intent(mContext, show_document_screen.class);
//                                    intent.putExtra("documentKey", model.getDocument());
//                                    intent.putExtra("nameKey", model.getDataType());
//                                    intent.putExtra("sizeKey", model.getDocSize());
//                                    intent.putExtra("extensionKey", model.getExtension());
//                                    intent.putExtra("viewHolderTypeKey", Constant.receiverViewHolder);
//                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);

                                    }


                                }
                            }
                        });

                        ((receiverViewHolder) holder).recLinear.setOnLongClickListener(new View.OnLongClickListener() {
                            @Override
                            public boolean onLongClick(View v) {


                                int[] location = new int[2];
                                v.getLocationOnScreen(location);
                                float touchX = location[0];
                                float touchY = location[1];


                                BlurHelper.showDialogWithBlurBackground(mContext, R.layout.receiver_long_press_dialogue);
                                BlurHelper.dialogLayoutColor.show();
                                RelativeLayout relativeLayout = BlurHelper.dialogLayoutColor.findViewById(R.id.relativelayout);
                                // Use boundary-aware positioning
                                BlurHelper.positionDialogWithinBounds(mContext, touchX, touchY, relativeLayout);

                                TextView recMessage = BlurHelper.dialogLayoutColor.findViewById(R.id.recMessage);
                                TextView recTime = BlurHelper.dialogLayoutColor.findViewById(R.id.recTime);
                                TextView linkActualUrl = BlurHelper.dialogLayoutColor.findViewById(R.id.linkActualUrl);
                                TextView link = BlurHelper.dialogLayoutColor.findViewById(R.id.link);
                                TextView linkDesc = BlurHelper.dialogLayoutColor.findViewById(R.id.linkDesc);
                                TextView captionText = BlurHelper.dialogLayoutColor.findViewById(R.id.captionText);

                                //cscs
                                TextView linkTitle = BlurHelper.dialogLayoutColor.findViewById(R.id.linkTitle);
                                TextView docName = BlurHelper.dialogLayoutColor.findViewById(R.id.docName);
                                TextView extension = BlurHelper.dialogLayoutColor.findViewById(R.id.extension);
                                TextView repliedData = BlurHelper.dialogLayoutColor.findViewById(R.id.repliedData);
                                RelativeLayout richLinkViewLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.richLinkViewLyt);
                                RelativeLayout receiverImgLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receiverImgLyt);
                                RelativeLayout receivervideoLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.receivervideoLyt);
                                ImageView linkImg = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg);
                                ImageView linkImg2 = BlurHelper.dialogLayoutColor.findViewById(R.id.linkImg2);
                                ImageView recVideo = BlurHelper.dialogLayoutColor.findViewById(R.id.recVideo);
                                ProgressBar progressBarImageview = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBar);
                                AppCompatImageView recImg = BlurHelper.dialogLayoutColor.findViewById(R.id.recImg);
                                LinearLayout contactContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainer);
                                LinearLayout docLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.docLyt);
                                LinearLayout miceContainer = BlurHelper.dialogLayoutColor.findViewById(R.id.miceContainer);
                                LinearLayout replydatalyt = BlurHelper.dialogLayoutColor.findViewById(R.id.replydatalyt);
                                View viewnew = BlurHelper.dialogLayoutColor.findViewById(R.id.viewnew);
                                View replyDevider = BlurHelper.dialogLayoutColor.findViewById(R.id.replyDevider);
                                View viewbarlyt1 = BlurHelper.dialogLayoutColor.findViewById(R.id.viewbarlyt1);
                                View blur = BlurHelper.dialogLayoutColor.findViewById(R.id.blur);
                                CardView cardview = BlurHelper.dialogLayoutColor.findViewById(R.id.cardview);
                                TextView readMore = BlurHelper.dialogLayoutColor.findViewById(R.id.readMore);
                                FloatingActionButton downlaod = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaod);

                                LinearLayout replylyoutGlobal = BlurHelper.dialogLayoutColor.findViewById(R.id.replylyoutGlobal);
                                LinearLayout contactContainerReply = BlurHelper.dialogLayoutColor.findViewById(R.id.contactContainerReply);
                                CardView imgcardview = BlurHelper.dialogLayoutColor.findViewById(R.id.imgcardview);
                                LinearLayout replyTheme = BlurHelper.dialogLayoutColor.findViewById(R.id.replyTheme);
                                TextView replyYou = BlurHelper.dialogLayoutColor.findViewById(R.id.replyYou);
                                LinearLayout pageLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.pageLyt);
                                CardView musicReply = BlurHelper.dialogLayoutColor.findViewById(R.id.muciReply);
                                CardView miceReply = BlurHelper.dialogLayoutColor.findViewById(R.id.miceReply);
                                ImageView videoicon = BlurHelper.dialogLayoutColor.findViewById(R.id.videoicon);
                                TextView msgreplyText = BlurHelper.dialogLayoutColor.findViewById(R.id.msgreplyText);
                                ImageView imgreply = BlurHelper.dialogLayoutColor.findViewById(R.id.imgreply);
                                TextView firstTextReply = BlurHelper.dialogLayoutColor.findViewById(R.id.firstTextReply);
                                RelativeLayout audioDownloadControlsReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.audioDownloadControlsReceiver);
                                RelativeLayout docDownloadControlsReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControlsReceiver);
                                FloatingActionButton downlaodAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodAudioReceiver);
                                FloatingActionButton downlaodDocReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDocReceiver);
                                ProgressBar progressBarAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarAudioReceiver);
                                ProgressBar progressBarDocReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDocReceiver);
                                TextView downloadPercentageAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageAudioReceiver);
                                TextView downloadPercentageDocReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocReceiver);
                                ImageButton pauseButtonAudioReceiver = BlurHelper.dialogLayoutColor.findViewById(R.id.pauseButtonAudioReceiver);
                                RelativeLayout docDownloadControls = BlurHelper.dialogLayoutColor.findViewById(R.id.docDownloadControls);
                                ProgressBar progressBarDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.progressBarDoc);
                                TextView downloadPercentageDocSender = BlurHelper.dialogLayoutColor.findViewById(R.id.downloadPercentageDocSender);
                                FloatingActionButton downlaodDoc = BlurHelper.dialogLayoutColor.findViewById(R.id.downlaodDoc);
                                ImageView pdfPreview = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfPreview);
                                CardView pdfcard = BlurHelper.dialogLayoutColor.findViewById(R.id.pdfcard);
                                LinearLayout docFileIcon = BlurHelper.dialogLayoutColor.findViewById(R.id.docFileIcon);
                                TextView docSize = BlurHelper.dialogLayoutColor.findViewById(R.id.docSize);
                                TextView docSizeExtension = BlurHelper.dialogLayoutColor.findViewById(R.id.docSizeExtension);
                                TextView pageText = BlurHelper.dialogLayoutColor.findViewById(R.id.pageText);

                                // TODO: 30/01/25  emoji header
                                RecyclerView emojiLongRec = BlurHelper.dialogLayoutColor.findViewById(R.id.emojiLongRec);
                                LinearLayout addEmoji = BlurHelper.dialogLayoutColor.findViewById(R.id.addEmoji);
                                Webservice.get_emojiChatadapter(mContext, emojiLongRec, emojiAdapterChatAdapter, model.getModelId(), receiverUid, model.getEmojiCount(), model.getEmojiModel(), model, userFTokenKey);
                                addEmoji.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                            Constant.Vibrator(mContext);
                                        }

                                        Constant.bottomsheetEmoji(mContext, R.layout.bottom_emoji_lyt);
                                        Constant.bottomSheetDialog.show();
                                        RecyclerView recyclerView = Constant.bottomSheetDialog.findViewById(R.id.recyclerview);
                                        ProgressBar progressBar = Constant.bottomSheetDialog.findViewById(R.id.progressBar);

                                        Webservice.get_emojiAdd(mContext, recyclerView, progressBar, model.getModelId(), receiverUid);

                                    }
                                });
                                Animation fadeIn = AnimationUtils.loadAnimation(mContext, R.anim.fall_down_receiver);
                                emojiLongRec.startAnimation(fadeIn);


                                Animation animationdd = AnimationUtils.loadAnimation(mContext, R.anim.unfold_anim_receiver);
                                cardview.startAnimation(animationdd);
                                recTime.setText(model.getTime());


                                // main codeing starting from here

                                Log.d("TAG444", "com");


                                //for docs
                                readMore.setVisibility(View.GONE);
                                richLinkViewLyt.setVisibility(View.GONE);
                                docLyt.setVisibility(View.GONE);
                                recMessage.setVisibility(View.GONE);
                                recImg.setVisibility(View.GONE);
                                receiverImgLyt.setVisibility(View.GONE);
                                viewnew.setVisibility(View.VISIBLE);
                                recVideo.setVisibility(View.GONE);
                                receivervideoLyt.setVisibility(View.GONE);
                                contactContainer.setVisibility(View.GONE);
                                miceContainer.setVisibility(View.GONE);

                                File docsDir;
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                                    docsDir = new File(mContext.getExternalFilesDir(Environment.DIRECTORY_DOCUMENTS), "Enclosure/Media/Documents");
                                } else {
                                    docsDir = new File(mContext.getExternalFilesDir(null), "Enclosure/Media/Documents");
                                }
                                if (!docsDir.exists()) docsDir.mkdirs();

                                File localDoc = new File(docsDir, model.getFileName());
                                boolean docExists = localDoc.exists();

                                docDownloadControlsReceiver.setVisibility(View.GONE);
                                progressBarDocReceiver.setVisibility(View.GONE);
                                downloadPercentageDocReceiver.setVisibility(View.GONE);
                                downlaodDocReceiver.setVisibility(View.GONE);


                                if (model.getExtension().equalsIgnoreCase("pdf")) {
                                    pdfPreview.setVisibility(View.VISIBLE);
                                    pdfcard.setVisibility(View.VISIBLE);

                                    String localPreviewImagePath = otherFunctions.getLocalPdfPreviewImagePath(model, mContext);
                                    String remotePdfUrl = otherFunctions.getRemotePdfUrl(model);

                                    ImageView targetImageView = pdfPreview;
                                    ViewGroup parentLayout = (ViewGroup) targetImageView.getParent();
                                    otherFunctions.loadPdfPreview(localPreviewImagePath, remotePdfUrl, pdfPreview, parentLayout, position, model, mContext);

                                    docFileIcon.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
                                } else if (model.getExtension().equalsIgnoreCase("xls")) {
                                    pdfPreview.setVisibility(View.GONE);
                                    pdfcard.setVisibility(View.GONE);
                                    String filePath = otherFunctions.getFilePath(model, mContext);
                                } else {
                                    pdfPreview.setVisibility(View.GONE);
                                    pdfcard.setVisibility(View.GONE);
                                }

                                if (model.getReplyKey().equals(Constant.ReplyKey)) {
                                    replylyoutGlobal.setVisibility(View.VISIBLE);
                                    pageLyt.setVisibility(View.VISIBLE);
                                    recMessage.setVisibility(View.GONE);
                                    musicReply.setVisibility(View.GONE);
                                    receiverImgLyt.setVisibility(View.GONE);
                                    imgcardview.setVisibility(View.GONE);
                                    contactContainerReply.setVisibility(View.GONE);
                                    recImg.setVisibility(View.GONE);
                                    replyTheme.setBackgroundTintList(tintList);
                                    replyYou.setTextColor(Color.parseColor(themColor));
                                    docLyt.setVisibility(View.GONE);
                                    miceReply.setVisibility(View.GONE);

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.VISIBLE);
                                    viewbarlyt1.setVisibility(View.GONE);

                                    if (model.getReplyType().equals(Constant.Text)) {
                                        docLyt.setVisibility(View.GONE);
                                        recMessage.setVisibility(View.GONE);
                                        recImg.setVisibility(View.GONE);
                                        recVideo.setVisibility(View.GONE);
                                        receivervideoLyt.setVisibility(View.GONE);
                                        contactContainer.setVisibility(View.GONE);
                                        miceContainer.setVisibility(View.GONE);
                                        docName.setText(model.getReplyOldData());
                                        extension.setText(model.getExtension());
                                        replydatalyt.setVisibility(View.VISIBLE);
                                        repliedData.setText(model.getReplytextData());
                                        repliedData.setMaxWidth((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 128, mContext.getResources().getDisplayMetrics()
                                        ));
                                        msgreplyText.setText("Doc");
                                        Drawable drawable = mContext.getResources().getDrawable(R.drawable.documentsvg);
                                        int size = (int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 16, mContext.getResources().getDisplayMetrics()
                                        );
                                        drawable.setBounds(0, 0, size, size);
                                        drawable.setTint(Color.parseColor("#78787A"));
                                        msgreplyText.setCompoundDrawables(drawable, null, null, null);
                                        msgreplyText.setCompoundDrawablePadding((int) TypedValue.applyDimension(
                                                TypedValue.COMPLEX_UNIT_DIP, 5, mContext.getResources().getDisplayMetrics()
                                        ));
                                        pageText.setText(model.getExtension());
                                    }
                                } else {
                                    replylyoutGlobal.setVisibility(View.GONE);
                                    docLyt.setVisibility(View.VISIBLE);

                                    if (!model.getCaption().equals("")) {
                                        captionText.setVisibility(View.VISIBLE);
                                        captionText.setText(model.getCaption());
                                    } else {
                                        captionText.setVisibility(View.GONE);
                                    }

                                    replyDevider.setVisibility(View.GONE);
                                    replydatalyt.setVisibility(View.GONE);
                                    viewbarlyt1.setVisibility(View.GONE);
                                    docName.setText(model.getDataType());
                                    extension.setText(model.getExtension());
                                }
                                // -----------------------------Ends_Here--------------------------------------


                                LinearLayout deleteLyt = BlurHelper.dialogLayoutColor.findViewById(R.id.deletelyt);
                                if (position == 0 && otherFunctions.isMobileNumber(TextViewname.getText().toString())) {
                                    deleteLyt.setVisibility(View.GONE);
                                } else {
                                    deleteLyt.setVisibility(View.VISIBLE);
                                }
                                LinearLayout copy = BlurHelper.dialogLayoutColor.findViewById(R.id.copy);
                                if (model.getDataType().equals(Constant.Text)) {


                                    if (model.getMessage().equals("You deleted this message")) {
                                        copy.setVisibility(View.GONE);
                                    } else {
                                        copy.setVisibility(View.VISIBLE);
                                        copy.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                ClipboardManager clipboardManager = (ClipboardManager) mContext.getSystemService(Context.CLIPBOARD_SERVICE);
                                                ClipData clipData = ClipData.newPlainText("Label", model.getMessage());
                                                clipboardManager.setPrimaryClip(clipData);
                                                Log.d("TAG", "onClick: " + model.getMessage());
                                                BlurHelper.dialogLayoutColor.dismiss();
                                            }
                                        });
                                    }
                                } else {
                                    copy.setVisibility(View.GONE);
                                }


                                LinearLayout forward = BlurHelper.dialogLayoutColor.findViewById(R.id.forward);

                                // Add SelectLyt click listener for multi-selection
                                senderReceiverDownload.addSelectLytClickListener(position, BlurHelper.dialogLayoutColor.findViewById(R.id.SelectLyt), () -> senderReceiverDownload.enterMultiSelectMode(selectedPositions, multiSelectListener, chatAdapter.this), () -> senderReceiverDownload.toggleSelection(position, selectedPositions, multiSelectListener, chatAdapter.this));

                                forward.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {


                                        BlurHelper.dialogLayoutColor.dismiss();
                                        Constant.bottomsheetforward(mContext);
                                        Constant.bottomSheetDialog.show();

                                        Constant.getSfFuncion(mContext);
                                        ImageView cancel = Constant.viewShape.findViewById(R.id.cancel);
                                        View viewnewnn = Constant.viewShape.findViewById(R.id.viewnewnn);
                                        AutoCompleteTextView searchview = Constant.viewShape.findViewById(R.id.searchview);
                                        dx = Constant.viewShape.findViewById(R.id.dx);
                                        richBoxForward = Constant.viewShape.findViewById(R.id.richBox);

                                        ProgressBar progressBarMainNew = Constant.viewShape.findViewById(R.id.progressbar);

                                        recyclerview = Constant.viewShape.findViewById(R.id.recyclerview);
                                        namerecyclerview = Constant.viewShape.findViewById(R.id.namerecyclerview);
                                        forwardText = Constant.viewShape.findViewById(R.id.forward);


                                        LinearProgressIndicator networkLoader = Constant.viewShape.findViewById(R.id.networkLoader);
                                        try {

                                            Constant.getSfFuncion(mContext);
                                            themColor = Constant.getSF.getString(Constant.ThemeColorKey, "#00A3E9");
                                            tintList = ColorStateList.valueOf(Color.parseColor(themColor));


                                            try {
                                                if (themColor.equals("#ff0080")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FF6D00"));
                                                } else if (themColor.equals("#00A3E9")) {

                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                } else if (themColor.equals("#7adf2a")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00C853"));

                                                } else if (themColor.equals("#ec0001")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#ec7500"));

                                                } else if (themColor.equals("#16f3ff")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00F365"));

                                                } else if (themColor.equals("#FF8A00")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#FFAB00"));

                                                } else if (themColor.equals("#7F7F7F")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#314E6D"));

                                                } else if (themColor.equals("#D9B845")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#b0d945"));
                                                } else if (themColor.equals("#346667")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#729412"));

                                                } else if (themColor.equals("#9846D9")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#d946d1"));

                                                } else if (themColor.equals("#A81010")) {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#D85D01"));

                                                } else {


                                                    networkLoader.setTrackColor(Color.parseColor(themColor));
                                                    viewnewnn.setBackgroundTintList(tintList);
                                                    networkLoader.setIndicatorColor(Color.parseColor("#00BFA5"));
                                                }
                                            } catch (Exception ignored) {

                                            }


                                        } catch (Exception ignored) {
                                        }
                                        if (otherFunctions.isInternetConnected(mContext)) {
                                            //TODO ONLINE
                                            networkLoader.setVisibility(View.GONE);

                                            networkLoader.setVisibility(View.GONE);
                                            try {
                                                // TODO : - OFFLINE DATA LOAD HERE WHEN ,UNTIL WEBSERVICE 200 STATUS OR ERROR

                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();

                                                if (get_user_active_contact_forward_list.size() > 0) {
                                                    // Toast.makeText(mContext, "not empty", Toast.LENGTH_SHORT).show();
                                                    otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                    recyclerview.setVisibility(View.VISIBLE);
                                                } else {

                                                }
                                            } catch (Exception e) {
                                                Toast.makeText(mContext, e.getMessage(), Toast.LENGTH_SHORT).show();
                                            }
                                            Webservice.get_user_active_chat_list_forward(mContext, Constant.getSF.getString(Constant.UID_KEY, ""), chatAdapter.this, progressBarMainNew, recyclerview);


                                        } else {
                                            //TODO OFFLINE
                                            networkLoader.setVisibility(View.VISIBLE);
                                            try {

                                                Log.d("Network", "dissconnetced: " + "chattingRoom");
                                                get_user_active_contact_forward_list.clear();
                                                DatabaseHelper dbHelper = new DatabaseHelper(mContext);
                                                get_user_active_contact_forward_list = dbHelper.getAllData();
                                                otherFunctions.setAdapter(get_user_active_contact_forward_list, recyclerview, mContext, forwardAdapter, dx, chatAdapter.this, richBoxForward);

                                                recyclerview.setVisibility(View.VISIBLE);

                                            } catch (Exception ignored) {
                                            }

                                        }

                                        cancel.setOnClickListener(new View.OnClickListener() {
                                            @Override
                                            public void onClick(View v) {
                                                Constant.bottomSheetDialog.dismiss();
                                            }
                                        });

                                        searchview.addTextChangedListener(new TextWatcher() {
                                            @Override
                                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

                                            }

                                            @Override
                                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                                                senderReceiverDownload.filteredList(String.valueOf(s));
                                            }

                                            @Override
                                            public void afterTextChanged(Editable s) {

                                            }
                                        });

                                        forwardText.setOnClickListener(new View.OnClickListener() {
                                            private final ExecutorService executor = Executors.newFixedThreadPool(3); // Limit to 3 concurrent tasks
                                            private int completedTasks = 0;
                                            private final int totalTasks;

                                            {
                                                totalTasks = forwardNameList != null ? forwardNameList.size() : 0;
                                            }

                                            @Override
                                            public void onClick(View v) {
                                                Log.d("TAG", "Forward button clicked. Starting forward process.");
                                                Constant.getSfFuncion(mContext);

                                                Date d = new Date();
                                                SimpleDateFormat sdf = new SimpleDateFormat("hh:mm a");
                                                String currentDateTimeString = sdf.format(d);
                                                Log.d("TAG", "Current time: " + currentDateTimeString + ", Forward list size: " + totalTasks);

                                                if (forwardNameList == null || forwardNameList.isEmpty()) {
                                                    Log.e("TAG", "ForwardNameList is null or empty. Aborting.");
                                                    Toast.makeText(mContext, "No recipients selected for forwarding.", Toast.LENGTH_SHORT).show();
                                                    return;
                                                }

                                                progressBarMainNew.setVisibility(View.VISIBLE);
                                                String modelId = database.getReference().push().getKey();
                                                int listcount = forwardNameList.size();
                                                for (int i = 0; i < forwardNameList.size(); i++) {
                                                    final int index = i;
                                                    int finalI = i;
                                                    executor.execute(() -> {
                                                        forwardnameModel forwardModel = forwardNameList.get(index);
                                                        if (forwardModel == null) {
                                                            Log.e("TAG", "ForwardModel at index " + index + " is null. Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String f_id = forwardModel.getFriend_id();
                                                        String f_token = forwardModel.getF_token();
                                                        Log.d("TAG", "Processing recipient " + (index + 1) + "/" + totalTasks + ": Friend ID: " + f_id + ", F Token: " + f_token);

                                                        if (f_id == null || f_token == null) {
                                                            Log.e("TAG", "Invalid data for recipient at index " + index + ": friend_id=" + f_id + ", f_token=" + f_token + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        String myUID = Constant.getSF.getString(Constant.UID_KEY, "");

                                                        Log.d("TAG", "My UID: " + myUID + ", Model ID: " + modelId);

                                                        if (myUID.isEmpty() || modelId == null) {
                                                            Log.e("TAG", "Invalid UID or Model ID: UID=" + myUID + ", ModelId=" + modelId + ". Skipping.");
                                                            onTaskComplete();
                                                            return;
                                                        }

                                                        try {
                                                            ArrayList<emojiModel> emojiModels = new ArrayList<>();
                                                            emojiModels.add(new emojiModel("", ""));
                                                            Log.d("TAG", "Emoji models initialized: " + emojiModels.size());


                                                            messageModel modelnew = new messageModel(myUID, model.getMessage(), currentDateTimeString, model.getDocument(), model.getDataType(), model.getExtension(), model.getName(), model.getPhone(), model.getMicPhoto(), model.getMiceTiming(), model.getUserName(), model.getReplytextData(), model.getReplyKey(), model.getReplyType(), model.getReplyOldData(), model.getReplyCrtPostion(), modelId, f_id, Constant.forwordKey, model.getGroupName(), model.getDocSize(), model.getFileName(), model.getThumbnail(), model.getFileNameThumbnail(), model.getCaption(), model.getNotification(), model.getCurrentDate(), emojiModels, "", model.getTimestamp(), model.getImageWidth(), model.getImageHeight(), model.getAspectRatio(), model.getSelectionCount(), model.getSelectionBunch());

                                                            messagemodel2 model2 = new messagemodel2(modelnew.getUid(), modelnew.getMessage(), modelnew.getTime(), modelnew.getDocument(), modelnew.getDataType(), modelnew.getExtension(), modelnew.getName(), modelnew.getPhone(), modelnew.getMicPhoto(), modelnew.getMiceTiming(), modelnew.getUserName(), modelnew.getReplytextData(), modelnew.getReplyKey(), modelnew.getReplyType(), modelnew.getReplyOldData(), modelnew.getReplyCrtPostion(), modelnew.getModelId(), modelnew.getReceiverUid(), modelnew.getForwaredKey(), modelnew.getGroupName(), modelnew.getDocSize(), modelnew.getFileName(), modelnew.getThumbnail(), modelnew.getFileNameThumbnail(), modelnew.getCaption(), modelnew.getNotification(), modelnew.getCurrentDate(), modelnew.getEmojiModel(), modelnew.getEmojiCount(), modelnew.getTimestamp(), 0, modelnew.getImageWidth(), modelnew.getImageHeight(), modelnew.getAspectRatio(), modelnew.getSelectionCount());


                                                            try {
                                                                new DatabaseHelper(mContext).insertMessage(model2);
                                                                Log.d("DATABASE_HELPER", "Message successfully inserted into SQLite database");
                                                            } catch (Exception e) {
                                                                Log.e("DATABASE_HELPER", "Failed to insert message into SQLite: " + e.getMessage(), e);
                                                            }


                                                            Log.d("TAG", "Message model created for friend_id: " + f_id + ", modelId: " + modelId);

                                                            UploadChatHelperForward uploadHelper = new UploadChatHelperForward(mContext, myUID, f_token);
                                                            Log.d("TAG", "UploadChatHelper initialized for friend_id: " + f_id);

                                                            uploadHelper.uploadContent(modelnew);
                                                            Log.d("TAG", "uploadContent called for friend_id: " + f_id + ", modelId: " + modelId);


                                                            if (finalI == forwardNameList.size() - 1) {
                                                                if (listcount == 1) {
                                                                    Intent intent = new Intent(mContext, chattingScreen.class);
                                                                    intent.putExtra("nameKey", forwardModel.getName());
                                                                    intent.putExtra("captionKey", "");
                                                                    intent.putExtra("photoKey", "");
                                                                    intent.putExtra("friendUidKey", forwardModel.getFriend_id());
                                                                    intent.putExtra("msgLmtKey", "");
                                                                    intent.putExtra("ecKey", "ecKey");
                                                                    intent.putExtra("userFTokenKey", forwardModel.getF_token());
                                                                    intent.putExtra("deviceType", "");
                                                                    intent.putExtra("fromInviteKey", "fromInviteKey");
                                                                    intent.putExtra("forwardShort", "forwardShort");
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();


                                                                } else {
                                                                    Intent intent = new Intent(mContext, MainActivityOld.class);
                                                                    SwipeNavigationHelper.startActivityWithSwipe((Activity) mContext, intent);
                                                                    Constant.bottomSheetDialog.dismiss();

                                                                }
                                                            }

                                                        } catch (Exception e) {
                                                            Log.e("TAG", "Error forwarding to friend_id " + f_id + ": " + e.getMessage(), e);
                                                            Toast.makeText(mContext, "Failed to forward to recipient " + (index + 1), Toast.LENGTH_SHORT).show();
                                                        } finally {
                                                            onTaskComplete();
                                                        }
                                                    });
                                                }
                                            }

                                            private synchronized void onTaskComplete() {
                                                completedTasks++;
                                                Log.d("TAG", "Task completed: " + completedTasks + "/" + totalTasks);
                                                if (completedTasks >= totalTasks) {
                                                    Log.d("TAG", "All recipients processed. Hiding progress bar and dismissing bottom sheet.");
                                                    new Handler(Looper.getMainLooper()).post(() -> {
                                                        progressBarMainNew.setVisibility(View.GONE);
                                                        Constant.bottomSheetDialog.dismiss();
                                                    });
                                                    executor.shutdown();
                                                }
                                            }
                                        });


                                    }
                                });

                                deleteLyt.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {

                                        /// Need to store delete key data here


                                        Constant.setSfFunction(mContext);
                                        Constant.setSF.putString(Constant.last_deleted_model_id, model.getModelId());
                                        Constant.setSF.apply();
                                        BlurHelper.dialogLayoutColor.dismiss();


                                        ((receiverViewHolder) holder).menu2.setVisibility(View.GONE);
                                        Log.d("data000", model.getReceiverUid());
                                        Log.d("data000", model.getModelId());
                                        database.getReference().child("chats").child(model.getUid() + model.getReceiverUid()).child(model.getModelId()).removeValue().addOnSuccessListener(new OnSuccessListener<Void>() {
                                            @Override
                                            public void onSuccess(Void unused) {

                                                // todo here we need to delete from sqlLite database

                                                try {
                                                    new DatabaseHelper(mContext).deleteIndividualChatting(model.getModelId());
                                                } catch (Exception e) {
                                                    throw new RuntimeException(e);
                                                }
                                                holder.getAdapterPosition();

                                                System.out.println("ff" + position);

                                                senderReceiverDownload.removeItem(holder.getAdapterPosition(), messageList, chatAdapter.this, valuable);


                                                Webservice.delete_chatingindivisualReceiver(mContext, model.getModelId(), model.getUid() + model.getReceiverUid(), model.getUid(), model.getReceiverUid());
                                            }
                                        });
                                    }
                                });


                                return true;
                            }
                        });
                    }

                }




//                if (position == messageList.size() - 1) {
//                    Log.d("LastMessage", "LastMessage: " + model.getMessage());
//
//                    if (model.getReceiverLoader() == 0) {
//
//                        // Make sure progress is visible and animated
//                        ((receiverViewHolder) holder).viewnew.setVisibility(View.VISIBLE);
//
//                        // Slight delay ensures view is attached to window before animating
//                        new Handler(Looper.getMainLooper()).postDelayed(() -> {
//                            ((receiverViewHolder) holder).viewnew.setIndeterminate(true);
//
//                            // Stop animation after 1 second
//                            new Handler(Looper.getMainLooper()).postDelayed(() -> {
//                                ((receiverViewHolder) holder).viewnew.setIndeterminate(false);
//                                // optional
//                            }, 1000);
//
//                        }, 50);
//
//                    } else {
//                        ((receiverViewHolder) holder).viewnew.setIndeterminate(false);
//
//                    }
//                } else {
//                    ((receiverViewHolder) holder).viewnew.setIndeterminate(false);
//
//                }

            }
        } catch (Exception ignored) {

//            Toast.makeText(mContext, ignored.getMessage(), Toast.LENGTH_SHORT).show();

            Log.d("BIG EXCEPTION", "BIG EXCEPTION : " + ignored.getMessage());
        }

    }


    @Override
    public int getItemCount() {
        return messageList.size();
    }

    @Override
    public void onItemSwipe(int position, int direction) {
        // Perform any necessary actions when an item is swiped
        // Example: Update the dataset and notify the adapter
        if (direction == ItemTouchHelper.START) {
            // Swiped from the start (left) side
            // Perform action...
        } else if (direction == ItemTouchHelper.END) {
            // Swiped from the end (right) side
            // Perform action...
        }
        notifyItemChanged(position);
    }


    public interface MediaPlayerCallback {
        void onStopMediaPlayer();
    }

    /**
     * Custom image loading method for selectionBunch that respects our custom dimensions
     * This bypasses both BlurImageOptimizer and Constant.loadImageIntoView() which override dimensions
     */



    public class DownloadReceiver extends BroadcastReceiver {

        //this receiver for all type of files
        ProgressBar progressBarImageview;
        View blur;
        FloatingActionButton downlaod;
        messageModel model;

        public DownloadReceiver(ProgressBar progressBarImageview, View blur, FloatingActionButton downlaod) {
            this.progressBarImageview = progressBarImageview;
            this.blur = blur;
            this.downlaod = downlaod;
        }

        public DownloadReceiver(ProgressBar progressBarImageview, View blur, FloatingActionButton downlaod, messageModel model) {
            this.progressBarImageview = progressBarImageview;
            this.blur = blur;
            this.downlaod = downlaod;
            this.model = model;
        }

        @Override
        public void onReceive(Context context, Intent intent) {
            if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(intent.getAction())) {
                long id = intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID, -1);

                if (id == downloadId) {
                    progressBarImageview.setVisibility(View.GONE);
                    blur.setVisibility(View.GONE);

                    // Save to public directory if model is available
                    if (model != null) {
                        senderReceiverDownload.saveDownloadedFileToPublicDirectory(model, mContext);
                    }
                }
            }
        }
    }



    /**
     * Shows custom toast message
     */


    public static class DownloadAndGeneratePdfPreviewTask extends AsyncTask<String, Void, Bitmap> {
        private final Context context;
        private final String localPreviewImagePath;
        private final ImageView imageView;
        private boolean downloadSuccess = false; // Flag to track if PDF download was successful


        public DownloadAndGeneratePdfPreviewTask(Context mContext, String localPreviewImagePath, ImageView imageView, ViewGroup parentLayout, int position, boolean loadHighQuality) {
            this.context = mContext;
            this.localPreviewImagePath = localPreviewImagePath;
            this.imageView = imageView;
        }

        @Override
        protected void onPreExecute() {
            super.onPreExecute();
            // Show a temporary placeholder image while the PDF is being downloaded and processed.
            // Replace R.drawable.inviteimg with your actual placeholder drawable.
            imageView.setImageResource(R.drawable.invite_dark);
        }

        @Override
        protected Bitmap doInBackground(String... urls) {
            String pdfUrl = urls[0]; // The remote URL of the PDF
            File tempPdfFile = null; // Temporary file to store the downloaded PDF
            Bitmap previewBitmap = null; // The bitmap generated from the PDF

            try {
                // --- Step 1: Download the PDF file to a temporary location ---
                URL url = new URL(pdfUrl);
                HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                connection.setConnectTimeout(10000); // 10 seconds timeout for connection
                connection.setReadTimeout(15000);    // 15 seconds timeout for reading
                connection.connect();

                // Check if the HTTP connection was successful (HTTP 200 OK)
                if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
                    InputStream input = connection.getInputStream();
                    // Create a temporary file in the app's cache directory to store the downloaded PDF
                    tempPdfFile = File.createTempFile("temp_pdf", ".pdf", context.getCacheDir());
                    FileOutputStream output = new FileOutputStream(tempPdfFile);

                    byte[] buffer = new byte[4096]; // Buffer for reading data
                    int bytesRead;
                    while ((bytesRead = input.read(buffer)) != -1) {
                        output.write(buffer, 0, bytesRead); // Write data to the temporary file
                    }
                    output.flush(); // Ensure all buffered data is written
                    output.close();
                    input.close();
                    downloadSuccess = true; // Mark download as successful
                    Log.d("TAG", "PDF downloaded to temporary file: " + tempPdfFile.getAbsolutePath());
                } else {
                    Log.e("TAG", "Failed to download PDF. HTTP error code: " + connection.getResponseCode() + " for URL: " + pdfUrl);
                    return null; // Return null if download fails
                }

                // --- Step 2: Generate PDF preview from the downloaded temporary file ---
                if (downloadSuccess && tempPdfFile != null) {
                    ParcelFileDescriptor fileDescriptor = null;
                    PdfRenderer renderer = null;
                    try {
                        // Open the temporary PDF file for reading
                        fileDescriptor = ParcelFileDescriptor.open(tempPdfFile, ParcelFileDescriptor.MODE_READ_ONLY);
                        renderer = new PdfRenderer(fileDescriptor);
                        PdfRenderer.Page page = renderer.openPage(0); // Open the first page of the PDF

                        // Create a mutable bitmap with the same dimensions as the PDF page
                        previewBitmap = Bitmap.createBitmap(page.getWidth(), page.getHeight(), Bitmap.Config.ARGB_8888);
                        // Render the PDF page onto the bitmap
                        page.render(previewBitmap, null, null, PdfRenderer.Page.RENDER_MODE_FOR_DISPLAY);

                        page.close(); // Close the PDF page
                    } finally {
                        // Ensure PdfRenderer and ParcelFileDescriptor are closed to prevent resource leaks
                        if (renderer != null) renderer.close();
                        if (fileDescriptor != null) fileDescriptor.close();
                    }

                    // --- Step 3: Save the generated bitmap preview to the designated local path ---
                    if (previewBitmap != null) {
                        File previewFile = new File(localPreviewImagePath);
                        FileOutputStream out = null;
                        try {
                            out = new FileOutputStream(previewFile);
                            // Compress the bitmap to PNG format (100% quality)
                            previewBitmap.compress(Bitmap.CompressFormat.PNG, 40, out);
                            Log.d("TAG", "PDF preview saved to: " + localPreviewImagePath);
                        } catch (Exception e) {
                            Log.e("TAG", "Error saving PDF preview bitmap to " + localPreviewImagePath + ": " + e.getMessage());
                        } finally {
                            if (out != null) {
                                out.close(); // Close the FileOutputStream
                            }
                        }
                    }
                }

            } catch (IOException e) {
                Log.e("TAG", "Network or file I/O error during PDF download/preview generation: " + e.getMessage());
            } catch (Exception e) {
                Log.e("TAG", "General error during PDF preview generation: " + e.getMessage());
            } finally {
                // --- Cleanup: Ensure the temporary PDF file is deleted ---
                if (tempPdfFile != null && tempPdfFile.exists()) {
                    if (tempPdfFile.delete()) {
                        Log.d("TAG", "Temporary PDF file deleted: " + tempPdfFile.getAbsolutePath());
                    } else {
                        Log.w("TAG", "Failed to delete temporary PDF file: " + tempPdfFile.getAbsolutePath());
                    }
                }
            }
            return previewBitmap; // Return the generated bitmap (or null if an error occurred)
        }

        @Override
        protected void onPostExecute(Bitmap bitmap) {
            // This method runs on the UI thread after doInBackground completes.
            if (bitmap != null) {
                // If a bitmap was successfully generated, display it
                if (bitmap != null && localPreviewImagePath != null) {
                    messageModel model = new messageModel();
                    model.setImageWidth(String.valueOf(bitmap.getWidth()));
                    model.setImageHeight(String.valueOf(bitmap.getHeight()));
                    model.setAspectRatio(String.valueOf((float) bitmap.getWidth() / bitmap.getHeight()));
                    model.setFileName(new File(localPreviewImagePath).getName());

                    String imageSource = localPreviewImagePath.startsWith("/") ? "file://" + localPreviewImagePath : localPreviewImagePath;

                    ViewGroup parentLayout = (ViewGroup) imageView.getParent();

                    RequestOptions requestOptions = new RequestOptions();


                    try {
                        Constant.loadImageIntoViewPdf(context, imageSource, requestOptions, imageView, parentLayout, 0, // Use real adapter position if available
                                true, // true
                                model);
                    } catch (Exception e) {

                    }
                } else {
                    imageView.setImageResource(R.drawable.invite_dark);
                    Log.e("TAG", "Failed to load PDF preview. Displaying placeholder.");
                }

            } else {
                // If bitmap is null, it means there was an error downloading or generating the preview.
                // Display the error placeholder image.
                imageView.setImageResource(R.drawable.invite_dark);
                Log.e("TAG", "Failed to load PDF preview. Displaying placeholder.");
            }
        }
    }


}